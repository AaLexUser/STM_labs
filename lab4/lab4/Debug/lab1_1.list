
lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a74  08006a74  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a7c  08006a7c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          000005a8  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000738  20000738  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c9e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300b  00000000  00000000  00034e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  00038f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251cf  00000000  00000000  00039f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017217  00000000  00000000  0005f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da951  00000000  00000000  000762f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150c47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a28  00000000  00000000  00150c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000190 	.word	0x20000190
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800683c 	.word	0x0800683c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000194 	.word	0x20000194
 80001ec:	0800683c 	.word	0x0800683c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005ec:	f043 0310 	orr.w	r3, r3, #16
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0310 	and.w	r3, r3, #16
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_GPIO_Init+0x10c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0x10c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_GPIO_Init+0x110>)
 800065a:	f001 ffb9 	bl	80025d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800065e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_GPIO_Init+0x114>)
 8000674:	f001 fe00 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000678:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x110>)
 8000692:	f001 fdf1 	bl	8002278 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40020800 	.word	0x40020800

080006ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_I2C1_Init+0x74>)
 80006ea:	f001 ff8b 	bl	8002604 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 fcdc 	bl	80010b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C1_Init+0x74>)
 80006fc:	f002 ff41 	bl	8003582 <HAL_I2CEx_ConfigAnalogFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000706:	f000 fcd3 	bl	80010b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x74>)
 800070e:	f002 ff74 	bl	80035fa <HAL_I2CEx_ConfigDigitalFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000718:	f000 fcca 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001ac 	.word	0x200001ac
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <HAL_I2C_MspInit+0x84>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d12c      	bne.n	80007a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000770:	2312      	movs	r3, #18
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800077c:	2304      	movs	r3, #4
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <HAL_I2C_MspInit+0x8c>)
 8000788:	f001 fd76 	bl	8002278 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 8000796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_I2C_MspInit+0x88>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40005400 	.word	0x40005400
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400

080007bc <Set_Keyboard>:
#include "kb.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09e      	sub	sp, #120	; 0x78
 80007c0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t buf;

	buf = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 80007ce:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80007d2:	461a      	mov	r2, r3
 80007d4:	2102      	movs	r1, #2
 80007d6:	20e2      	movs	r0, #226	; 0xe2
 80007d8:	f000 fdb8 	bl	800134c <PCA9538_Write_Register>
 80007dc:	4603      	mov	r3, r0
 80007de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if( ret != HAL_OK ) {
 80007e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00d      	beq.n	8000806 <Set_Keyboard+0x4a>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "Error write polarity\r");
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4919      	ldr	r1, [pc, #100]	; (8000854 <Set_Keyboard+0x98>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fb8c 	bl	8005f0c <siprintf>
 80007f4:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 80007f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	1d39      	adds	r1, r7, #4
 80007fc:	231e      	movs	r3, #30
 80007fe:	4816      	ldr	r0, [pc, #88]	; (8000858 <Set_Keyboard+0x9c>)
 8000800:	f004 fab7 	bl	8004d72 <HAL_UART_Transmit>
 8000804:	e01f      	b.n	8000846 <Set_Keyboard+0x8a>
		goto exit;
	}

	buf = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 800080c:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8000810:	461a      	mov	r2, r3
 8000812:	2101      	movs	r1, #1
 8000814:	20e2      	movs	r0, #226	; 0xe2
 8000816:	f000 fd99 	bl	800134c <PCA9538_Write_Register>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if( ret != HAL_OK ) {
 8000820:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00d      	beq.n	8000844 <Set_Keyboard+0x88>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "Error write output\r");
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	490c      	ldr	r1, [pc, #48]	; (800085c <Set_Keyboard+0xa0>)
 800082c:	4618      	mov	r0, r3
 800082e:	f005 fb6d 	bl	8005f0c <siprintf>
 8000832:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000836:	b29a      	uxth	r2, r3
 8000838:	1d39      	adds	r1, r7, #4
 800083a:	231e      	movs	r3, #30
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <Set_Keyboard+0x9c>)
 800083e:	f004 fa98 	bl	8004d72 <HAL_UART_Transmit>
 8000842:	e000      	b.n	8000846 <Set_Keyboard+0x8a>
	}

exit:
 8000844:	bf00      	nop
	return ret;
 8000846:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800084a:	4618      	mov	r0, r3
 800084c:	3778      	adds	r7, #120	; 0x78
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	08006854 	.word	0x08006854
 8000858:	200006e0 	.word	0x200006e0
 800085c:	0800686c 	.word	0x0800686c

08000860 <Check_Row>:

uint8_t Check_Row( uint8_t  Nrow ) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b0a2      	sub	sp, #136	; 0x88
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	HAL_StatusTypeDef ret = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t buf;
	uint8_t kbd_in;
	int cnt = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	ret = Set_Keyboard();
 800087c:	f7ff ff9e 	bl	80007bc <Set_Keyboard>
 8000880:	4603      	mov	r3, r0
 8000882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if( ret != HAL_OK ) {
 8000886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00e      	beq.n	80008ac <Check_Row+0x4c>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "Error write init\r");
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4997      	ldr	r1, [pc, #604]	; (8000af0 <Check_Row+0x290>)
 8000894:	4618      	mov	r0, r3
 8000896:	f005 fb39 	bl	8005f0c <siprintf>
 800089a:	67b8      	str	r0, [r7, #120]	; 0x78
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 800089c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	231e      	movs	r3, #30
 80008a6:	4893      	ldr	r0, [pc, #588]	; (8000af4 <Check_Row+0x294>)
 80008a8:	f004 fa63 	bl	8004d72 <HAL_UART_Transmit>
	}

	buf = Nrow;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 80008b2:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80008b6:	461a      	mov	r2, r3
 80008b8:	2103      	movs	r1, #3
 80008ba:	20e2      	movs	r0, #226	; 0xe2
 80008bc:	f000 fd46 	bl	800134c <PCA9538_Write_Register>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if( ret != HAL_OK ) {
 80008c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00e      	beq.n	80008ec <Check_Row+0x8c>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "Error write config\r");
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4989      	ldr	r1, [pc, #548]	; (8000af8 <Check_Row+0x298>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f005 fb19 	bl	8005f0c <siprintf>
 80008da:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 80008dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f107 0108 	add.w	r1, r7, #8
 80008e4:	231e      	movs	r3, #30
 80008e6:	4883      	ldr	r0, [pc, #524]	; (8000af4 <Check_Row+0x294>)
 80008e8:	f004 fa43 	bl	8004d72 <HAL_UART_Transmit>
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 80008ec:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80008f0:	4619      	mov	r1, r3
 80008f2:	20e2      	movs	r0, #226	; 0xe2
 80008f4:	f000 fd4a 	bl	800138c <PCA9538_Read_Inputs>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if( ret != HAL_OK ) {
 80008fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00e      	beq.n	8000924 <Check_Row+0xc4>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "Read error\r");
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	497c      	ldr	r1, [pc, #496]	; (8000afc <Check_Row+0x29c>)
 800090c:	4618      	mov	r0, r3
 800090e:	f005 fafd 	bl	8005f0c <siprintf>
 8000912:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0108 	add.w	r1, r7, #8
 800091c:	231e      	movs	r3, #30
 800091e:	4875      	ldr	r0, [pc, #468]	; (8000af4 <Check_Row+0x294>)
 8000920:	f004 fa27 	bl	8004d72 <HAL_UART_Transmit>
	}

	kbd_in = buf & 0x70;
 8000924:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800092c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	Nkey = kbd_in;
 8000930:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000934:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if( kbd_in != 0x70) {
 8000938:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800093c:	2b70      	cmp	r3, #112	; 0x70
 800093e:	f000 80c5 	beq.w	8000acc <Check_Row+0x26c>
		if( !(kbd_in & 0x10) ) {
 8000942:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	2b00      	cmp	r3, #0
 800094c:	d13a      	bne.n	80009c4 <Check_Row+0x164>
			switch (Nrow) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	3bf7      	subs	r3, #247	; 0xf7
 8000952:	2b07      	cmp	r3, #7
 8000954:	d837      	bhi.n	80009c6 <Check_Row+0x166>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <Check_Row+0xfc>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	080009b3 	.word	0x080009b3
 8000960:	080009c7 	.word	0x080009c7
 8000964:	080009c7 	.word	0x080009c7
 8000968:	080009c7 	.word	0x080009c7
 800096c:	080009a1 	.word	0x080009a1
 8000970:	080009c7 	.word	0x080009c7
 8000974:	0800098f 	.word	0x0800098f
 8000978:	0800097d 	.word	0x0800097d
				case ROW1:
					cnt++;
 800097c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000980:	3301      	adds	r3, #1
 8000982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x07;
 8000986:	2307      	movs	r3, #7
 8000988:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 800098c:	e01b      	b.n	80009c6 <Check_Row+0x166>
				case ROW2:
					cnt++;
 800098e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000992:	3301      	adds	r3, #1
 8000994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x04;
 8000998:	2304      	movs	r3, #4
 800099a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 800099e:	e012      	b.n	80009c6 <Check_Row+0x166>
				case ROW3:
					cnt++;
 80009a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009a4:	3301      	adds	r3, #1
 80009a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x01;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 80009b0:	e009      	b.n	80009c6 <Check_Row+0x166>
				case ROW4:
					cnt++;
 80009b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009b6:	3301      	adds	r3, #1
 80009b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 80009c2:	e000      	b.n	80009c6 <Check_Row+0x166>
			}
		}
 80009c4:	bf00      	nop
		if( !(kbd_in & 0x20) ) {
 80009c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d13a      	bne.n	8000a48 <Check_Row+0x1e8>
			switch (Nrow) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	3bf7      	subs	r3, #247	; 0xf7
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	d837      	bhi.n	8000a4a <Check_Row+0x1ea>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <Check_Row+0x180>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a37 	.word	0x08000a37
 80009e4:	08000a4b 	.word	0x08000a4b
 80009e8:	08000a4b 	.word	0x08000a4b
 80009ec:	08000a4b 	.word	0x08000a4b
 80009f0:	08000a25 	.word	0x08000a25
 80009f4:	08000a4b 	.word	0x08000a4b
 80009f8:	08000a13 	.word	0x08000a13
 80009fc:	08000a01 	.word	0x08000a01
				case ROW1:
					cnt++;
 8000a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x08;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000a10:	e01b      	b.n	8000a4a <Check_Row+0x1ea>
				case ROW2:
					cnt++;
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x05;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000a22:	e012      	b.n	8000a4a <Check_Row+0x1ea>
				case ROW3:
					cnt++;
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a28:	3301      	adds	r3, #1
 8000a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x02;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000a34:	e009      	b.n	8000a4a <Check_Row+0x1ea>
				case ROW4:
					cnt++;
 8000a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x0B;
 8000a40:	230b      	movs	r3, #11
 8000a42:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000a46:	e000      	b.n	8000a4a <Check_Row+0x1ea>
			}
		}
 8000a48:	bf00      	nop
		if( !(kbd_in & 0x40) ) {
 8000a4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d13e      	bne.n	8000ad4 <Check_Row+0x274>
			switch (Nrow) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	3bf7      	subs	r3, #247	; 0xf7
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d83b      	bhi.n	8000ad6 <Check_Row+0x276>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <Check_Row+0x204>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000abb 	.word	0x08000abb
 8000a68:	08000ad7 	.word	0x08000ad7
 8000a6c:	08000ad7 	.word	0x08000ad7
 8000a70:	08000ad7 	.word	0x08000ad7
 8000a74:	08000aa9 	.word	0x08000aa9
 8000a78:	08000ad7 	.word	0x08000ad7
 8000a7c:	08000a97 	.word	0x08000a97
 8000a80:	08000a85 	.word	0x08000a85
				case ROW1:
					cnt++;
 8000a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x09;
 8000a8e:	2309      	movs	r3, #9
 8000a90:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000a94:	e01f      	b.n	8000ad6 <Check_Row+0x276>
				case ROW2:
					cnt++;
 8000a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x06;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000aa6:	e016      	b.n	8000ad6 <Check_Row+0x276>
				case ROW3:
					cnt++;
 8000aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000aac:	3301      	adds	r3, #1
 8000aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x03;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000ab8:	e00d      	b.n	8000ad6 <Check_Row+0x276>
				case ROW4:
					cnt++;
 8000aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000abe:	3301      	adds	r3, #1
 8000ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					Nkey = 0x0C;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 8000aca:	e004      	b.n	8000ad6 <Check_Row+0x276>
			}
		}
	}
	else Nkey = 0x0D;
 8000acc:	230d      	movs	r3, #13
 8000ace:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000ad2:	e000      	b.n	8000ad6 <Check_Row+0x276>
		}
 8000ad4:	bf00      	nop
	if(cnt > 1)
 8000ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	dd02      	ble.n	8000ae4 <Check_Row+0x284>
		Nkey =0x0F;
 8000ade:	230f      	movs	r3, #15
 8000ae0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	return Nkey;
 8000ae4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3788      	adds	r7, #136	; 0x88
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	08006880 	.word	0x08006880
 8000af4:	200006e0 	.word	0x200006e0
 8000af8:	08006894 	.word	0x08006894
 8000afc:	080068a8 	.word	0x080068a8

08000b00 <checkButtons>:
#include "kb_up.h"

int click_cnt[13];
uint8_t checkButtons(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
	int cnt = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
	uint8_t mem = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	72fb      	strb	r3, [r7, #11]
    uint8_t key1 = Check_Row(ROW1);
 8000b0e:	20fe      	movs	r0, #254	; 0xfe
 8000b10:	f7ff fea6 	bl	8000860 <Check_Row>
 8000b14:	4603      	mov	r3, r0
 8000b16:	72bb      	strb	r3, [r7, #10]
    if (key1 != 0x0D){
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	2b0d      	cmp	r3, #13
 8000b1c:	d004      	beq.n	8000b28 <checkButtons+0x28>
        cnt++;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
        mem = key1;
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	72fb      	strb	r3, [r7, #11]
    }
    if (key1 == 0x0F){
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d101      	bne.n	8000b32 <checkButtons+0x32>
    	return key1;
 8000b2e:	7abb      	ldrb	r3, [r7, #10]
 8000b30:	e040      	b.n	8000bb4 <checkButtons+0xb4>
    }
    uint8_t key2 = Check_Row(ROW2);
 8000b32:	20fd      	movs	r0, #253	; 0xfd
 8000b34:	f7ff fe94 	bl	8000860 <Check_Row>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	727b      	strb	r3, [r7, #9]
    if (key2 != 0x0D){
 8000b3c:	7a7b      	ldrb	r3, [r7, #9]
 8000b3e:	2b0d      	cmp	r3, #13
 8000b40:	d004      	beq.n	8000b4c <checkButtons+0x4c>
        cnt++;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
    	mem = key2;
 8000b48:	7a7b      	ldrb	r3, [r7, #9]
 8000b4a:	72fb      	strb	r3, [r7, #11]
    }
    if (key2 == 0x0F){
 8000b4c:	7a7b      	ldrb	r3, [r7, #9]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d101      	bne.n	8000b56 <checkButtons+0x56>
    	return key2;
 8000b52:	7a7b      	ldrb	r3, [r7, #9]
 8000b54:	e02e      	b.n	8000bb4 <checkButtons+0xb4>
    }

    uint8_t key3 = Check_Row(ROW3);
 8000b56:	20fb      	movs	r0, #251	; 0xfb
 8000b58:	f7ff fe82 	bl	8000860 <Check_Row>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	723b      	strb	r3, [r7, #8]
    if (key3 != 0x0D){
 8000b60:	7a3b      	ldrb	r3, [r7, #8]
 8000b62:	2b0d      	cmp	r3, #13
 8000b64:	d004      	beq.n	8000b70 <checkButtons+0x70>
        cnt++;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
    	mem = key3;
 8000b6c:	7a3b      	ldrb	r3, [r7, #8]
 8000b6e:	72fb      	strb	r3, [r7, #11]
    }
    if (key3 == 0x0F){
 8000b70:	7a3b      	ldrb	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	d101      	bne.n	8000b7a <checkButtons+0x7a>
    	return key3;
 8000b76:	7a3b      	ldrb	r3, [r7, #8]
 8000b78:	e01c      	b.n	8000bb4 <checkButtons+0xb4>
    }
    uint8_t key4 = Check_Row(ROW4);
 8000b7a:	20f7      	movs	r0, #247	; 0xf7
 8000b7c:	f7ff fe70 	bl	8000860 <Check_Row>
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
    if (key4 != 0x0D){
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b0d      	cmp	r3, #13
 8000b88:	d004      	beq.n	8000b94 <checkButtons+0x94>
        cnt++;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
    	mem = key4;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	72fb      	strb	r3, [r7, #11]
    }
    if (key4 == 0x0F){
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d101      	bne.n	8000b9e <checkButtons+0x9e>
    	return key4;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	e00a      	b.n	8000bb4 <checkButtons+0xb4>
    }
    if(cnt == 0)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <checkButtons+0xa8>
    	return 0x0D;
 8000ba4:	230d      	movs	r3, #13
 8000ba6:	e005      	b.n	8000bb4 <checkButtons+0xb4>
    if(cnt > 1)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	dd01      	ble.n	8000bb2 <checkButtons+0xb2>
    	return 0x0F;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	e000      	b.n	8000bb4 <checkButtons+0xb4>
    return mem;
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <init_cnt>:

void init_cnt(){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
	for(int i = 0;i < 13;i++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	e007      	b.n	8000bd8 <init_cnt+0x1c>
		click_cnt[i] = 0;
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <init_cnt+0x30>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0;i < 13;i++){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b0c      	cmp	r3, #12
 8000bdc:	ddf4      	ble.n	8000bc8 <init_cnt+0xc>
	}
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000200 	.word	0x20000200

08000bf0 <increase_cnt>:

int increase_cnt(uint8_t button_num){
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i < 13;i++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e01b      	b.n	8000c38 <increase_cnt+0x48>
		if(i != button_num){
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d005      	beq.n	8000c14 <increase_cnt+0x24>
			click_cnt[i] = 0;
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <increase_cnt+0x70>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c12:	e00e      	b.n	8000c32 <increase_cnt+0x42>
		}
		else{
			if(click_cnt[i] <= DREBLIM)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <increase_cnt+0x70>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	2b05      	cmp	r3, #5
 8000c1e:	dc08      	bgt.n	8000c32 <increase_cnt+0x42>
				click_cnt[i] = click_cnt[i] + 1;
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <increase_cnt+0x70>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <increase_cnt+0x70>)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0;i < 13;i++){
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b0c      	cmp	r3, #12
 8000c3c:	dde0      	ble.n	8000c00 <increase_cnt+0x10>
		}
	}
	if(click_cnt[button_num] == DREBLIM){
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <increase_cnt+0x70>)
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	2b05      	cmp	r3, #5
 8000c48:	d101      	bne.n	8000c4e <increase_cnt+0x5e>
		return button_num;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	e001      	b.n	8000c52 <increase_cnt+0x62>
	}
	return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000200 	.word	0x20000200

08000c64 <convert_button_to_symbol>:

void convert_button_to_symbol(int button_num, char* el){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	if(button_num == 0){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <convert_button_to_symbol+0x16>
		(*el) = '\r';
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	220d      	movs	r2, #13
 8000c78:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 1){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <convert_button_to_symbol+0x22>
		(*el) = '1';
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2231      	movs	r2, #49	; 0x31
 8000c84:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 2){
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d102      	bne.n	8000c92 <convert_button_to_symbol+0x2e>
		(*el) = '2';
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2232      	movs	r2, #50	; 0x32
 8000c90:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 3){
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d102      	bne.n	8000c9e <convert_button_to_symbol+0x3a>
		(*el) = '3';
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2233      	movs	r2, #51	; 0x33
 8000c9c:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 4){
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d102      	bne.n	8000caa <convert_button_to_symbol+0x46>
		(*el) = '4';
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2234      	movs	r2, #52	; 0x34
 8000ca8:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 5){
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	d102      	bne.n	8000cb6 <convert_button_to_symbol+0x52>
		(*el) = '5';
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2235      	movs	r2, #53	; 0x35
 8000cb4:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 6){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d102      	bne.n	8000cc2 <convert_button_to_symbol+0x5e>
		(*el) = '6';
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2236      	movs	r2, #54	; 0x36
 8000cc0:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 7){
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d102      	bne.n	8000cce <convert_button_to_symbol+0x6a>
		(*el) = '7';
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2237      	movs	r2, #55	; 0x37
 8000ccc:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 8){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d102      	bne.n	8000cda <convert_button_to_symbol+0x76>
		(*el) = '+';
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	222b      	movs	r2, #43	; 0x2b
 8000cd8:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 9){
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	d102      	bne.n	8000ce6 <convert_button_to_symbol+0x82>
		(*el) = '-';
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	222d      	movs	r2, #45	; 0x2d
 8000ce4:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 11){
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0b      	cmp	r3, #11
 8000cea:	d102      	bne.n	8000cf2 <convert_button_to_symbol+0x8e>
		(*el) = 'A';
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2241      	movs	r2, #65	; 0x41
 8000cf0:	701a      	strb	r2, [r3, #0]
	}
	if(button_num == 12){
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d102      	bne.n	8000cfe <convert_button_to_symbol+0x9a>
		(*el) = 'a';
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2261      	movs	r2, #97	; 0x61
 8000cfc:	701a      	strb	r2, [r3, #0]
	}
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <checkKB>:

int checkKB(char* el){
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	uint8_t res = checkButtons();
 8000d12:	f7ff fef5 	bl	8000b00 <checkButtons>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
	if(res == 0x0F) {
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d101      	bne.n	8000d24 <checkKB+0x1a>
		return 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e016      	b.n	8000d52 <checkKB+0x48>
		// если несколько нажатых кнопок, просто игнорируем итерацию
	}
	if(res == 0x0D) {
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b0d      	cmp	r3, #13
 8000d28:	d103      	bne.n	8000d32 <checkKB+0x28>
		init_cnt();
 8000d2a:	f7ff ff47 	bl	8000bbc <init_cnt>
		return 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e00f      	b.n	8000d52 <checkKB+0x48>
	}
	int pressed_button = increase_cnt(res);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5b 	bl	8000bf0 <increase_cnt>
 8000d3a:	60b8      	str	r0, [r7, #8]
	if(pressed_button == -1){
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d42:	d101      	bne.n	8000d48 <checkKB+0x3e>
		return 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	e004      	b.n	8000d52 <checkKB+0x48>
		// кнопка не готова
	}
	convert_button_to_symbol(pressed_button, el);
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	68b8      	ldr	r0, [r7, #8]
 8000d4c:	f7ff ff8a 	bl	8000c64 <convert_button_to_symbol>
	return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <data_collecter>:
	send_req = 0;
	already_printed = 0;
	last_data = 0;
}

void data_collecter(char* buf, int len){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	for(int i = 0;i < len; i++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e01a      	b.n	8000da2 <data_collecter+0x46>
		datas[last_data] = buf[i];
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	441a      	add	r2, r3
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <data_collecter+0x5c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	7811      	ldrb	r1, [r2, #0]
 8000d78:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <data_collecter+0x60>)
 8000d7a:	54d1      	strb	r1, [r2, r3]
		last_data = (last_data + 1) % 1000;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <data_collecter+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <data_collecter+0x64>)
 8000d84:	fb83 1302 	smull	r1, r3, r3, r2
 8000d88:	1199      	asrs	r1, r3, #6
 8000d8a:	17d3      	asrs	r3, r2, #31
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d92:	fb01 f303 	mul.w	r3, r1, r3
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <data_collecter+0x5c>)
 8000d9a:	6013      	str	r3, [r2, #0]
	for(int i = 0;i < len; i++){
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbe0      	blt.n	8000d6c <data_collecter+0x10>
	}
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	2000068c 	.word	0x2000068c
 8000dbc:	200002a0 	.word	0x200002a0
 8000dc0:	10624dd3 	.word	0x10624dd3

08000dc4 <transend_data_IT>:

void transend_data_IT(char* buf, int len) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	if(send_req){
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <transend_data_IT+0x38>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <transend_data_IT+0x1c>
		data_collecter(buf, len);
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffbf 	bl	8000d5c <data_collecter>
		return;
 8000dde:	e009      	b.n	8000df4 <transend_data_IT+0x30>
	}
	send_req = 1;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <transend_data_IT+0x38>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_IT( &huart6, (uint8_t *) buf, len);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <transend_data_IT+0x3c>)
 8000df0:	f004 f851 	bl	8004e96 <HAL_UART_Transmit_IT>
}
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000029c 	.word	0x2000029c
 8000e00:	200006e0 	.word	0x200006e0

08000e04 <print_collected_data>:

void print_collected_data(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	if(already_printed != last_data){
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <print_collected_data+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <print_collected_data+0x58>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d018      	beq.n	8000e46 <print_collected_data+0x42>
		transend_data_IT(&datas[already_printed], 1);
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <print_collected_data+0x54>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <print_collected_data+0x5c>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ffd0 	bl	8000dc4 <transend_data_IT>
		already_printed = (already_printed + 1) % 1000;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <print_collected_data+0x54>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <print_collected_data+0x60>)
 8000e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e30:	1199      	asrs	r1, r3, #6
 8000e32:	17d3      	asrs	r3, r2, #31
 8000e34:	1acb      	subs	r3, r1, r3
 8000e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3a:	fb01 f303 	mul.w	r3, r1, r3
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <print_collected_data+0x54>)
 8000e42:	6013      	str	r3, [r2, #0]
	}
	else {
		already_printed = 0;
		last_data       = 0;
	}
}
 8000e44:	e005      	b.n	8000e52 <print_collected_data+0x4e>
		already_printed = 0;
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <print_collected_data+0x54>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
		last_data       = 0;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <print_collected_data+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000688 	.word	0x20000688
 8000e5c:	2000068c 	.word	0x2000068c
 8000e60:	200002a0 	.word	0x200002a0
 8000e64:	10624dd3 	.word	0x10624dd3

08000e68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  in_buffer_IT[len_in_buf] = el;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_UART_RxCpltCallback+0x5c>)
 8000e76:	7811      	ldrb	r1, [r2, #0]
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <HAL_UART_RxCpltCallback+0x60>)
 8000e7a:	54d1      	strb	r1, [r2, r3]
  transend_data_IT(&el, 1);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <HAL_UART_RxCpltCallback+0x5c>)
 8000e80:	f7ff ffa0 	bl	8000dc4 <transend_data_IT>
  if(in_buffer_IT[len_in_buf] == '\r'){
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_UART_RxCpltCallback+0x60>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	2b0d      	cmp	r3, #13
 8000e8e:	d10d      	bne.n	8000eac <HAL_UART_RxCpltCallback+0x44>
	  int local_len = len_in_buf;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
	  deshifr(in_buffer_IT, &local_len, &fsm_obj);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_UART_RxCpltCallback+0x64>)
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <HAL_UART_RxCpltCallback+0x60>)
 8000ea0:	f000 fdb8 	bl	8001a14 <deshifr>
	  len_in_buf = 0;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
  }
  else{
	  len_in_buf = len_in_buf + 1;
  }
}
 8000eaa:	e004      	b.n	8000eb6 <HAL_UART_RxCpltCallback+0x4e>
	  len_in_buf = len_in_buf + 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000298 	.word	0x20000298
 8000ec4:	20000260 	.word	0x20000260
 8000ec8:	20000264 	.word	0x20000264
 8000ecc:	20000234 	.word	0x20000234

08000ed0 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	send_req = 0;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_UART_TxCpltCallback+0x1c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	print_collected_data();
 8000ede:	f7ff ff91 	bl	8000e04 <print_collected_data>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000029c 	.word	0x2000029c

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 ff47 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f86d 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f7ff fb49 	bl	8000594 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f02:	f000 fe9d 	bl	8001c40 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000f06:	f000 faf7 	bl	80014f8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f0a:	f7ff fbcf 	bl	80006ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  fsm_obj.button_cnt = 0;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <main+0xc4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  fsm_obj.button_pressed_flag = 0;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <main+0xc4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  fsm_obj.red_time = 6000;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <main+0xc4>)
 8000f1c:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f20:	601a      	str	r2, [r3, #0]
  fsm_obj.other_time = fsm_obj.red_time / 4;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <main+0xc4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da00      	bge.n	8000f2c <main+0x3c>
 8000f2a:	3303      	adds	r3, #3
 8000f2c:	109b      	asrs	r3, r3, #2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <main+0xc4>)
 8000f32:	605a      	str	r2, [r3, #4]
  fsm_obj.current_red = fsm_obj.red_time;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <main+0xc4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <main+0xc4>)
 8000f3a:	6093      	str	r3, [r2, #8]
  fsm_obj.start_time = 0;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <main+0xc4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  fsm_obj.wait_time = 0;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <main+0xc4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  fsm_obj.state = RED;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <main+0xc4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  fsm_obj.fsm_flag = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <main+0xc4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  fsm_obj.interupt_enable = 0;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <main+0xc4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  fsm_obj.work_mode = 1;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <main+0xc4>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	621a      	str	r2, [r3, #32]

  char in_buffer[50];
  int  in_curlen = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  int first_iter = -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <main+0xc8>)
 8000f70:	f003 f882 	bl	8004078 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <main+0xc4>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <main+0xc4>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <main+0xcc>)
 8000f7e:	9303      	str	r3, [sp, #12]
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <main+0xd0>)
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <main+0xd4>)
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <main+0xd8>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <main+0xdc>)
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <main+0xe0>)
 8000f90:	f000 fc04 	bl	800179c <nextStateMachine>
	//if(fsm_obj.work_mode)
	// check_button(&fsm_obj.button_cnt, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.button_pressed_flag);
    if(checkKB(&el)) {
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <main+0xe4>)
 8000f96:	f7ff feb8 	bl	8000d0a <checkKB>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <main+0xba>
    	analize_symb(el);
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <main+0xe4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f8bf 	bl	8001128 <analize_symb>
    }
    HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f000 ff5e 	bl	8001e6c <HAL_Delay>
	nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 8000fb0:	e7e0      	b.n	8000f74 <main+0x84>
 8000fb2:	bf00      	nop
 8000fb4:	20000234 	.word	0x20000234
 8000fb8:	20000694 	.word	0x20000694
 8000fbc:	2000024c 	.word	0x2000024c
 8000fc0:	20000244 	.word	0x20000244
 8000fc4:	20000248 	.word	0x20000248
 8000fc8:	20000240 	.word	0x20000240
 8000fcc:	2000023c 	.word	0x2000023c
 8000fd0:	20000258 	.word	0x20000258
 8000fd4:	20000260 	.word	0x20000260

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 ff88 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <SystemClock_Config+0xd0>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <SystemClock_Config+0xd0>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <SystemClock_Config+0xd0>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <SystemClock_Config+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <SystemClock_Config+0xd4>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <SystemClock_Config+0xd4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001050:	2390      	movs	r3, #144	; 0x90
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fb09 	bl	8003678 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800106c:	f000 f820 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2103      	movs	r1, #3
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fd6a 	bl	8003b68 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800109a:	f000 f809 	bl	80010b0 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <change_now_oktav>:
 *  Created on: Nov 22, 2024
 *      Author: romay
 */
#include "music_pr.h"

void change_now_oktav(int val) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	int new_val = now_oktav + val;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <change_now_oktav+0x30>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
	if(new_val >= 0 && new_val < 9)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db05      	blt.n	80010e0 <change_now_oktav+0x24>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	dc02      	bgt.n	80010e0 <change_now_oktav+0x24>
		now_oktav = new_val;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <change_now_oktav+0x30>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000000 	.word	0x20000000

080010f0 <change_music_time>:

void change_music_time(int val) {
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	int new_music_time = music_time + val;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <change_music_time+0x34>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
	if(new_music_time >= 10 && new_music_time <= 5000)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b09      	cmp	r3, #9
 8001106:	dd07      	ble.n	8001118 <change_music_time+0x28>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	dc02      	bgt.n	8001118 <change_music_time+0x28>
		music_time = new_music_time;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <change_music_time+0x34>)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000004 	.word	0x20000004

08001128 <analize_symb>:

void analize_symb(char el) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b0a0      	sub	sp, #128	; 0x80
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	if(el >= '1' && el <= '7'){
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b30      	cmp	r3, #48	; 0x30
 8001136:	d909      	bls.n	800114c <analize_symb+0x24>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b37      	cmp	r3, #55	; 0x37
 800113c:	d806      	bhi.n	800114c <analize_symb+0x24>
		int note_to_ring = el - '1';
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	3b31      	subs	r3, #49	; 0x31
 8001142:	67fb      	str	r3, [r7, #124]	; 0x7c
		execute_one_oktav(note_to_ring);
 8001144:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001146:	f000 f86f 	bl	8001228 <execute_one_oktav>
	if(el >= '1' && el <= '7'){
 800114a:	e05c      	b.n	8001206 <analize_symb+0xde>
	}
	else
	if(el == '+' || el == '-'){
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b2b      	cmp	r3, #43	; 0x2b
 8001150:	d002      	beq.n	8001158 <analize_symb+0x30>
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b2d      	cmp	r3, #45	; 0x2d
 8001156:	d11c      	bne.n	8001192 <analize_symb+0x6a>
		if(el == '+')
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b2b      	cmp	r3, #43	; 0x2b
 800115c:	d103      	bne.n	8001166 <analize_symb+0x3e>
			change_now_oktav(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff ffac 	bl	80010bc <change_now_oktav>
 8001164:	e003      	b.n	800116e <analize_symb+0x46>
		else
			change_now_oktav(-1);
 8001166:	f04f 30ff 	mov.w	r0, #4294967295
 800116a:	f7ff ffa7 	bl	80010bc <change_now_oktav>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "change oktav_num, now is %d\r", now_oktav);
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <analize_symb+0xe8>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4927      	ldr	r1, [pc, #156]	; (8001214 <analize_symb+0xec>)
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fec7 	bl	8005f0c <siprintf>
 800117e:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8001180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 010c 	add.w	r1, r7, #12
 8001188:	231e      	movs	r3, #30
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <analize_symb+0xf0>)
 800118c:	f003 fdf1 	bl	8004d72 <HAL_UART_Transmit>
	if(el == '+' || el == '-'){
 8001190:	e039      	b.n	8001206 <analize_symb+0xde>
	}
	else
	if(el == 'A' || el == 'a') {
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b41      	cmp	r3, #65	; 0x41
 8001196:	d002      	beq.n	800119e <analize_symb+0x76>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b61      	cmp	r3, #97	; 0x61
 800119c:	d11c      	bne.n	80011d8 <analize_symb+0xb0>
		if(el == 'A')
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b41      	cmp	r3, #65	; 0x41
 80011a2:	d103      	bne.n	80011ac <analize_symb+0x84>
			change_music_time(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f7ff ffa3 	bl	80010f0 <change_music_time>
 80011aa:	e003      	b.n	80011b4 <analize_symb+0x8c>
		else
			change_music_time(-10);
 80011ac:	f06f 0009 	mvn.w	r0, #9
 80011b0:	f7ff ff9e 	bl	80010f0 <change_music_time>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "change time, now is %d\r", music_time);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <analize_symb+0xf4>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4918      	ldr	r1, [pc, #96]	; (8001220 <analize_symb+0xf8>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fea4 	bl	8005f0c <siprintf>
 80011c4:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 80011c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	231e      	movs	r3, #30
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <analize_symb+0xf0>)
 80011d2:	f003 fdce 	bl	8004d72 <HAL_UART_Transmit>
	if(el == 'A' || el == 'a') {
 80011d6:	e016      	b.n	8001206 <analize_symb+0xde>
	}
	else
	if(el == '\r'){
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b0d      	cmp	r3, #13
 80011dc:	d102      	bne.n	80011e4 <analize_symb+0xbc>
		execute_melody();
 80011de:	f000 f881 	bl	80012e4 <execute_melody>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "wrong symbol %c\r", el);
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
	}
}
 80011e2:	e010      	b.n	8001206 <analize_symb+0xde>
		transmitted_data_len = sprintf(out_buffer, "wrong symbol %c\r", el);
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	490e      	ldr	r1, [pc, #56]	; (8001224 <analize_symb+0xfc>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fe8d 	bl	8005f0c <siprintf>
 80011f2:	67b8      	str	r0, [r7, #120]	; 0x78
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 80011f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f107 010c 	add.w	r1, r7, #12
 80011fc:	231e      	movs	r3, #30
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <analize_symb+0xf0>)
 8001200:	f003 fdb7 	bl	8004d72 <HAL_UART_Transmit>
}
 8001204:	e7ff      	b.n	8001206 <analize_symb+0xde>
 8001206:	bf00      	nop
 8001208:	3780      	adds	r7, #128	; 0x80
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000000 	.word	0x20000000
 8001214:	080068d0 	.word	0x080068d0
 8001218:	200006e0 	.word	0x200006e0
 800121c:	20000004 	.word	0x20000004
 8001220:	080068f0 	.word	0x080068f0
 8001224:	08006908 	.word	0x08006908

08001228 <execute_one_oktav>:


void execute_one_oktav(int note_to_ring){
 8001228:	b580      	push	{r7, lr}
 800122a:	b0a0      	sub	sp, #128	; 0x80
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
	char out_buffer[100];
	int transmitted_data_len;
	transmitted_data_len = sprintf(out_buffer, "note %s is ringning on %d oktav, time is %d\r", noteNames[note_to_ring], now_oktav, music_time);
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <execute_one_oktav+0xa0>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <execute_one_oktav+0xa4>)
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <execute_one_oktav+0xa8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f107 000c 	add.w	r0, r7, #12
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	460b      	mov	r3, r1
 8001248:	4922      	ldr	r1, [pc, #136]	; (80012d4 <execute_one_oktav+0xac>)
 800124a:	f004 fe5f 	bl	8005f0c <siprintf>
 800124e:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8001250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001252:	b29a      	uxth	r2, r3
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	231e      	movs	r3, #30
 800125a:	481f      	ldr	r0, [pc, #124]	; (80012d8 <execute_one_oktav+0xb0>)
 800125c:	f003 fd89 	bl	8004d72 <HAL_UART_Transmit>
	htim1.Instance->ARR = oktava_info[now_oktav][note_to_ring] - 1;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <execute_one_oktav+0xa4>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	491d      	ldr	r1, [pc, #116]	; (80012dc <execute_one_oktav+0xb4>)
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <execute_one_oktav+0xb8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3a01      	subs	r2, #1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (oktava_info[now_oktav][note_to_ring] - 1) / 2;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <execute_one_oktav+0xa4>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <execute_one_oktav+0xb4>)
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <execute_one_oktav+0xb8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0852      	lsrs	r2, r2, #1
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
	int start_time = HAL_GetTick();
 800129a:	f000 fddb 	bl	8001e54 <HAL_GetTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	673b      	str	r3, [r7, #112]	; 0x70
	while(HAL_GetTick() - start_time < music_time){
 80012a2:	bf00      	nop
 80012a4:	f000 fdd6 	bl	8001e54 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <execute_one_oktav+0xa8>)
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d3f6      	bcc.n	80012a4 <execute_one_oktav+0x7c>

	}
	htim1.Instance->CCR1 = 0;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <execute_one_oktav+0xb8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012be:	bf00      	nop
 80012c0:	3778      	adds	r7, #120	; 0x78
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000104 	.word	0x20000104
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000004 	.word	0x20000004
 80012d4:	0800691c 	.word	0x0800691c
 80012d8:	200006e0 	.word	0x200006e0
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000694 	.word	0x20000694

080012e4 <execute_melody>:
void execute_melody(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7;i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e005      	b.n	80012fc <execute_melody+0x18>
		execute_one_oktav(i);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff99 	bl	8001228 <execute_one_oktav>
	for(int i = 0; i < 7;i++){
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3301      	adds	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b06      	cmp	r3, #6
 8001300:	ddf6      	ble.n	80012f0 <execute_melody+0xc>
	}
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <PCA9538_Read_Register>:

#include "main.h"
#include "i2c.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
 8001312:	4603      	mov	r3, r0
 8001314:	603a      	str	r2, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	460b      	mov	r3, r1
 800131a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	b299      	uxth	r1, r3
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	b29a      	uxth	r2, r3
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <PCA9538_Read_Register+0x3c>)
 8001338:	f001 fba2 	bl	8002a80 <HAL_I2C_Mem_Read>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001ac 	.word	0x200001ac

0800134c <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af04      	add	r7, sp, #16
 8001352:	4603      	mov	r3, r0
 8001354:	603a      	str	r2, [r7, #0]
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	460b      	mov	r3, r1
 800135a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	b299      	uxth	r1, r3
 8001364:	797b      	ldrb	r3, [r7, #5]
 8001366:	b29a      	uxth	r2, r3
 8001368:	2364      	movs	r3, #100	; 0x64
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <PCA9538_Write_Register+0x3c>)
 8001378:	f001 fa88 	bl	800288c <HAL_I2C_Mem_Write>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001ac 	.word	0x200001ac

0800138c <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffb4 	bl	800130c <PCA9538_Read_Register>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 fcee 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART6_IRQHandler+0x10>)
 800145a:	f003 fe05 	bl	8005068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200006e0 	.word	0x200006e0

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f004 fd06 	bl	8005ea8 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20030000 	.word	0x20030000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	20000690 	.word	0x20000690
 80014d0:	20000738 	.word	0x20000738

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b096      	sub	sp, #88	; 0x58
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2220      	movs	r2, #32
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f004 fce3 	bl	8005efc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001538:	4a3f      	ldr	r2, [pc, #252]	; (8001638 <MX_TIM1_Init+0x140>)
 800153a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <MX_TIM1_Init+0x13c>)
 800153e:	22c7      	movs	r2, #199	; 0xc7
 8001540:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2298;
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <MX_TIM1_Init+0x13c>)
 800154a:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800154e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <MX_TIM1_Init+0x13c>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001562:	4834      	ldr	r0, [pc, #208]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001564:	f002 fce0 	bl	8003f28 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800156e:	f7ff fd9f 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800157c:	4619      	mov	r1, r3
 800157e:	482d      	ldr	r0, [pc, #180]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001580:	f002 ff04 	bl	800438c <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800158a:	f7ff fd91 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800158e:	4829      	ldr	r0, [pc, #164]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001590:	f002 fd19 	bl	8003fc6 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800159a:	f7ff fd89 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015aa:	4619      	mov	r1, r3
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <MX_TIM1_Init+0x13c>)
 80015ae:	f003 fac5 	bl	8004b3c <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015b8:	f7ff fd7a 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1149;
 80015c0:	f240 437d 	movw	r3, #1149	; 0x47d
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4814      	ldr	r0, [pc, #80]	; (8001634 <MX_TIM1_Init+0x13c>)
 80015e4:	f002 fe10 	bl	8004208 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015ee:	f7ff fd5f 	bl	80010b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001616:	f003 fb0d 	bl	8004c34 <HAL_TIMEx_ConfigBreakDeadTime>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001620:	f7ff fd46 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_TIM1_Init+0x13c>)
 8001626:	f000 f82b 	bl	8001680 <HAL_TIM_MspPostInit>

}
 800162a:	bf00      	nop
 800162c:	3758      	adds	r7, #88	; 0x58
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000694 	.word	0x20000694
 8001638:	40010000 	.word	0x40010000

0800163c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <HAL_TIM_Base_MspInit+0x3c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10d      	bne.n	800166a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_TIM_MspPostInit+0x68>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d11e      	bne.n	80016e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_TIM_MspPostInit+0x70>)
 80016dc:	f000 fdcc 	bl	8002278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021000 	.word	0x40021000

080016f4 <set_LED>:
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void set_LED(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
	/* нам не нужны асерты, гарантируется работа
	 * старшие 16 бит бсра, отвечаю за сброс значения, младшие за установку*/
	  if(PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <set_LED+0x1e>
	  {
	    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
	  }
	  else
	  {
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
	  }
};
 8001710:	e003      	b.n	800171a <set_LED+0x26>
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
};
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <getColorName>:
	else
	  bitstatus = GPIO_PIN_RESET;
	return bitstatus;
}

const char* getColorName(TrafficLight c) {
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
    switch (c) {
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d813      	bhi.n	8001760 <getColorName+0x38>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <getColorName+0x18>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001755 	.word	0x08001755
 8001748:	08001759 	.word	0x08001759
 800174c:	0800175d 	.word	0x0800175d
        case RED: return "RED";
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <getColorName+0x48>)
 8001752:	e006      	b.n	8001762 <getColorName+0x3a>
        case GREEN: return "GREEN";
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <getColorName+0x4c>)
 8001756:	e004      	b.n	8001762 <getColorName+0x3a>
        case GREEN_BLINK: return "GREEN_BLINK";
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <getColorName+0x50>)
 800175a:	e002      	b.n	8001762 <getColorName+0x3a>
        case YELLOW: return "YELLOW";
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <getColorName+0x54>)
 800175e:	e000      	b.n	8001762 <getColorName+0x3a>
        default: return "UNKNOWN";
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <getColorName+0x58>)
    }
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	0800694c 	.word	0x0800694c
 8001774:	08006950 	.word	0x08006950
 8001778:	08006958 	.word	0x08006958
 800177c:	08006964 	.word	0x08006964
 8001780:	0800696c 	.word	0x0800696c

08001784 <reset_LEDS>:
		return 1;
	}
	return 0;
}

void reset_LEDS(void){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	set_LED(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <reset_LEDS+0x14>)
 8001790:	f7ff ffb0 	bl	80016f4 <set_LED>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020c00 	.word	0x40020c00

0800179c <nextStateMachine>:

void nextStateMachine(TrafficLight* light, int red_t, int other_t, int* current_red, int* flag, int* waiting_time, int* button_flag_button, int* start_time) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
	static int prev = 0;
    switch (*light) {
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	f200 80f5 	bhi.w	800199e <nextStateMachine+0x202>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <nextStateMachine+0x20>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	08001853 	.word	0x08001853
 80017c4:	080018a9 	.word	0x080018a9
 80017c8:	0800194b 	.word	0x0800194b
        case RED:
        	if(*flag == 1){ // ждём
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11f      	bne.n	8001814 <nextStateMachine+0x78>
        		if(HAL_GetTick() >= *waiting_time){
 80017d4:	f000 fb3e 	bl	8001e54 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d305      	bcc.n	80017ee <nextStateMachine+0x52>
        			*light = GREEN;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
        		}
        		if(*button_flag_button){
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80dc 	beq.w	80019b0 <nextStateMachine+0x214>
        			(*button_flag_button) = 0;
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
        			(*waiting_time) = (*start_time) + (*current_red);
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	441a      	add	r2, r3
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	601a      	str	r2, [r3, #0]
        			(*current_red) = red_t;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
        		*button_flag_button = 0;
        		(*current_red) = red_t;
        		*flag = 1;
        	}
            break;
 8001812:	e0cd      	b.n	80019b0 <nextStateMachine+0x214>
        		reset_LEDS();
 8001814:	f7ff ffb6 	bl	8001784 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	486a      	ldr	r0, [pc, #424]	; (80019c8 <nextStateMachine+0x22c>)
 8001820:	f7ff ff68 	bl	80016f4 <set_LED>
        		(*start_time) = HAL_GetTick();
 8001824:	f000 fb16 	bl	8001e54 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	441a      	add	r2, r3
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	601a      	str	r2, [r3, #0]
        		*button_flag_button = 0;
 800183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
        		(*current_red) = red_t;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
            break;
 8001850:	e0ae      	b.n	80019b0 <nextStateMachine+0x214>
        case GREEN:
        	if(*flag == 1){ // ждём
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <nextStateMachine+0xdc>
        		if(HAL_GetTick() >= *waiting_time){
 800185a:	f000 fafb 	bl	8001e54 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	f0c0 80a5 	bcc.w	80019b4 <nextStateMachine+0x218>
        			*light = GREEN_BLINK;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 8001876:	e09d      	b.n	80019b4 <nextStateMachine+0x218>
        		reset_LEDS();
 8001878:	f7ff ff84 	bl	8001784 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4851      	ldr	r0, [pc, #324]	; (80019c8 <nextStateMachine+0x22c>)
 8001884:	f7ff ff36 	bl	80016f4 <set_LED>
        		(*start_time) = HAL_GetTick();
 8001888:	f000 fae4 	bl	8001e54 <HAL_GetTick>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	441a      	add	r2, r3
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
            break;
 80018a6:	e085      	b.n	80019b4 <nextStateMachine+0x218>
        case GREEN_BLINK:
        	if(*flag == 1){ // ждём
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d12e      	bne.n	800190e <nextStateMachine+0x172>
        		if(HAL_GetTick() >= *waiting_time){
 80018b0:	f000 fad0 	bl	8001e54 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d305      	bcc.n	80018ca <nextStateMachine+0x12e>
        			*light = YELLOW;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2203      	movs	r2, #3
 80018c2:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
        		}
        		if(HAL_GetTick() - prev >= (other_t) / 8) {
 80018ca:	f000 fac3 	bl	8001e54 <HAL_GetTick>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a3e      	ldr	r2, [pc, #248]	; (80019cc <nextStateMachine+0x230>)
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	1a9a      	subs	r2, r3, r2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da00      	bge.n	80018de <nextStateMachine+0x142>
 80018dc:	3307      	adds	r3, #7
 80018de:	10db      	asrs	r3, r3, #3
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d369      	bcc.n	80019b8 <nextStateMachine+0x21c>
        			prev = HAL_GetTick();
 80018e4:	f000 fab6 	bl	8001e54 <HAL_GetTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b37      	ldr	r3, [pc, #220]	; (80019cc <nextStateMachine+0x230>)
 80018ee:	601a      	str	r2, [r3, #0]
        			//inline toggle
        			uint32_t odr = GPIOD->ODR;
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <nextStateMachine+0x22c>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	617b      	str	r3, [r7, #20]
        			GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	43db      	mvns	r3, r3
 8001902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001906:	4930      	ldr	r1, [pc, #192]	; (80019c8 <nextStateMachine+0x22c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	618b      	str	r3, [r1, #24]
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		prev = HAL_GetTick();
        		*flag = 1;
        	}
            break;
 800190c:	e054      	b.n	80019b8 <nextStateMachine+0x21c>
        		reset_LEDS();
 800190e:	f7ff ff39 	bl	8001784 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	482b      	ldr	r0, [pc, #172]	; (80019c8 <nextStateMachine+0x22c>)
 800191a:	f7ff feeb 	bl	80016f4 <set_LED>
        		(*start_time) = HAL_GetTick();
 800191e:	f000 fa99 	bl	8001e54 <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	441a      	add	r2, r3
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	601a      	str	r2, [r3, #0]
        		prev = HAL_GetTick();
 8001936:	f000 fa8d 	bl	8001e54 <HAL_GetTick>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <nextStateMachine+0x230>)
 8001940:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
            break;
 8001948:	e036      	b.n	80019b8 <nextStateMachine+0x21c>
        case YELLOW:
        	if(*flag == 1){ // ждём
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10d      	bne.n	800196e <nextStateMachine+0x1d2>
        		if(HAL_GetTick() >= *waiting_time){
 8001952:	f000 fa7f 	bl	8001e54 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d32d      	bcc.n	80019bc <nextStateMachine+0x220>
        			*light = RED;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 800196c:	e026      	b.n	80019bc <nextStateMachine+0x220>
        		reset_LEDS();
 800196e:	f7ff ff09 	bl	8001784 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <nextStateMachine+0x22c>)
 800197a:	f7ff febb 	bl	80016f4 <set_LED>
        		(*start_time) = HAL_GetTick();
 800197e:	f000 fa69 	bl	8001e54 <HAL_GetTick>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	441a      	add	r2, r3
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
            break;
 800199c:	e00e      	b.n	80019bc <nextStateMachine+0x220>
        default:
        	reset_LEDS();
 800199e:	f7ff fef1 	bl	8001784 <reset_LEDS>
        	*flag = 0;
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
        	*light = RED;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
            break;
 80019ae:	e006      	b.n	80019be <nextStateMachine+0x222>
            break;
 80019b0:	bf00      	nop
 80019b2:	e004      	b.n	80019be <nextStateMachine+0x222>
            break;
 80019b4:	bf00      	nop
 80019b6:	e002      	b.n	80019be <nextStateMachine+0x222>
            break;
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <nextStateMachine+0x222>
            break;
 80019bc:	bf00      	nop
    }
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	200006dc 	.word	0x200006dc

080019d0 <enable_interrupt>:
		(*current_red) = other_t;
		(*button_flag_button) = 1;
	}
}

void enable_interrupt(struct mech_data* tfl_obj) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019d8:	2047      	movs	r0, #71	; 0x47
 80019da:	f000 fb86 	bl	80020ea <HAL_NVIC_EnableIRQ>
	tfl_obj->interupt_enable = 1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <disable_interrupt>:

void disable_interrupt(struct mech_data* tfl_obj) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive(&huart6);
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <disable_interrupt+0x24>)
 80019f6:	f003 fa93 	bl	8004f20 <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 80019fa:	2047      	movs	r0, #71	; 0x47
 80019fc:	f000 fb83 	bl	8002106 <HAL_NVIC_DisableIRQ>
	tfl_obj->interupt_enable = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200006e0 	.word	0x200006e0

08001a14 <deshifr>:

void deshifr(char* in_buf, int* cur_length, struct mech_data* tfl_obj){
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b0a9      	sub	sp, #164	; 0xa4
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	int cmp_res = strncmp(in_buf, "!", 1);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b7d      	ldr	r3, [pc, #500]	; (8001c1c <deshifr+0x208>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(cmp_res == 0){
 8001a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12c      	bne.n	8001a90 <deshifr+0x7c>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "current_state is %s, timeout is %d, mode is %d, I is %d\r", getColorName(tfl_obj->state), tfl_obj->red_time, tfl_obj->work_mode, tfl_obj->interupt_enable);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe73 	bl	8001728 <getColorName>
 8001a42:	4604      	mov	r4, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a50:	f107 0014 	add.w	r0, r7, #20
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	4970      	ldr	r1, [pc, #448]	; (8001c20 <deshifr+0x20c>)
 8001a5e:	f004 fa55 	bl	8005f0c <siprintf>
 8001a62:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(tfl_obj->interupt_enable) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <deshifr+0x6a>
			transend_data_IT(out_buffer, transmitted_data_len);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f9a4 	bl	8000dc4 <transend_data_IT>
 8001a7c:	e008      	b.n	8001a90 <deshifr+0x7c>
		}
		else{
			HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8001a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f107 0114 	add.w	r1, r7, #20
 8001a88:	231e      	movs	r3, #30
 8001a8a:	4866      	ldr	r0, [pc, #408]	; (8001c24 <deshifr+0x210>)
 8001a8c:	f003 f971 	bl	8004d72 <HAL_UART_Transmit>
		}
	}
	char* set_mode_flag = strstr(in_buf, "set mode ");
 8001a90:	4965      	ldr	r1, [pc, #404]	; (8001c28 <deshifr+0x214>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f004 fa6e 	bl	8005f74 <strstr>
 8001a98:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	if(set_mode_flag) {
 8001a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02d      	beq.n	8001b00 <deshifr+0xec>
		int val = (*(set_mode_flag + 9) - '0');
 8001aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa8:	3309      	adds	r3, #9
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3b30      	subs	r3, #48	; 0x30
 8001aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		tfl_obj->work_mode = val;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ab8:	621a      	str	r2, [r3, #32]
		if(val == 0)
 8001aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <deshifr+0xb4>
			tfl_obj->button_pressed_flag = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "data change to %d\r", val);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ad0:	4956      	ldr	r1, [pc, #344]	; (8001c2c <deshifr+0x218>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fa1a 	bl	8005f0c <siprintf>
 8001ad8:	67f8      	str	r0, [r7, #124]	; 0x7c
		if(tfl_obj->interupt_enable){
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <deshifr+0xdc>
			transend_data_IT(out_buffer, transmitted_data_len);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f96b 	bl	8000dc4 <transend_data_IT>
 8001aee:	e007      	b.n	8001b00 <deshifr+0xec>
		}
		else{
		  HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 8001af0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f107 0114 	add.w	r1, r7, #20
 8001af8:	230a      	movs	r3, #10
 8001afa:	484a      	ldr	r0, [pc, #296]	; (8001c24 <deshifr+0x210>)
 8001afc:	f003 f939 	bl	8004d72 <HAL_UART_Transmit>
		}
	}
	char* set_red_time = strstr(in_buf, "set timeout ");
 8001b00:	494b      	ldr	r1, [pc, #300]	; (8001c30 <deshifr+0x21c>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f004 fa36 	bl	8005f74 <strstr>
 8001b08:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(set_red_time) {
 8001b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d062      	beq.n	8001bda <deshifr+0x1c6>
		set_red_time = set_red_time + 12;
 8001b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b18:	330c      	adds	r3, #12
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		int val = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while(*set_red_time != '\0' && *set_red_time != '\r') {
 8001b24:	e012      	b.n	8001b4c <deshifr+0x138>
			val = val * 10 + (*set_red_time - '0');
 8001b26:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	461a      	mov	r2, r3
 8001b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3b30      	subs	r3, #48	; 0x30
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			set_red_time++;
 8001b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b46:	3301      	adds	r3, #1
 8001b48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(*set_red_time != '\0' && *set_red_time != '\r') {
 8001b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <deshifr+0x14c>
 8001b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b0d      	cmp	r3, #13
 8001b5e:	d1e2      	bne.n	8001b26 <deshifr+0x112>
		}
		if(tfl_obj->current_red == tfl_obj->red_time)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d104      	bne.n	8001b76 <deshifr+0x162>
			tfl_obj->current_red = val;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e008      	b.n	8001b88 <deshifr+0x174>
		else
			tfl_obj->current_red = val / 4;
 8001b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da00      	bge.n	8001b80 <deshifr+0x16c>
 8001b7e:	3303      	adds	r3, #3
 8001b80:	109b      	asrs	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
		tfl_obj->red_time = val;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b8e:	601a      	str	r2, [r3, #0]
		tfl_obj->other_time = tfl_obj-> red_time / 4;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da00      	bge.n	8001b9a <deshifr+0x186>
 8001b98:	3303      	adds	r3, #3
 8001b9a:	109b      	asrs	r3, r3, #2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	605a      	str	r2, [r3, #4]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "red timeout change to %d\r", tfl_obj->current_red);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <deshifr+0x220>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 f9ad 	bl	8005f0c <siprintf>
 8001bb2:	67b8      	str	r0, [r7, #120]	; 0x78
		if(tfl_obj->interupt_enable){
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <deshifr+0x1b6>
	      transend_data_IT(out_buffer, transmitted_data_len);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8fe 	bl	8000dc4 <transend_data_IT>
 8001bc8:	e007      	b.n	8001bda <deshifr+0x1c6>
		}
		else{
		  HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 8001bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	f107 0114 	add.w	r1, r7, #20
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <deshifr+0x210>)
 8001bd6:	f003 f8cc 	bl	8004d72 <HAL_UART_Transmit>
		}
	}

	cmp_res = strncmp(in_buf, "set interrupts on", 17);
 8001bda:	2211      	movs	r2, #17
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <deshifr+0x224>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f004 f9b4 	bl	8005f4c <strncmp>
 8001be4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if(cmp_res == 0) {
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <deshifr+0x1e2>
		enable_interrupt(tfl_obj);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff feed 	bl	80019d0 <enable_interrupt>
	}

	cmp_res = strncmp(in_buf, "set interrupts off", 18);
 8001bf6:	2212      	movs	r2, #18
 8001bf8:	4910      	ldr	r1, [pc, #64]	; (8001c3c <deshifr+0x228>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f004 f9a6 	bl	8005f4c <strncmp>
 8001c00:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if(cmp_res == 0) {
 8001c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <deshifr+0x200>
		disable_interrupt(tfl_obj);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff feed 	bl	80019ec <disable_interrupt>
	}

	return;
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
}
 8001c16:	379c      	adds	r7, #156	; 0x9c
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	08006974 	.word	0x08006974
 8001c20:	08006978 	.word	0x08006978
 8001c24:	200006e0 	.word	0x200006e0
 8001c28:	080069b4 	.word	0x080069b4
 8001c2c:	080069c0 	.word	0x080069c0
 8001c30:	080069d4 	.word	0x080069d4
 8001c34:	080069e4 	.word	0x080069e4
 8001c38:	08006a00 	.word	0x08006a00
 8001c3c:	08006a14 	.word	0x08006a14

08001c40 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MX_USART6_UART_Init+0x50>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_USART6_UART_Init+0x4c>)
 8001c78:	f003 f82e 	bl	8004cd8 <HAL_UART_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c82:	f7ff fa15 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200006e0 	.word	0x200006e0
 8001c90:	40011400 	.word	0x40011400

08001c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_UART_MspInit+0x94>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d133      	bne.n	8001d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cee:	23c0      	movs	r3, #192	; 0xc0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cfe:	2308      	movs	r3, #8
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001d0a:	f000 fab5 	bl	8002278 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2047      	movs	r0, #71	; 0x47
 8001d14:	f000 f9cd 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d18:	2047      	movs	r0, #71	; 0x47
 8001d1a:	f000 f9e6 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff fbb9 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f004 f8a7 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff f8c3 	bl	8000ef0 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001d78:	08006a84 	.word	0x08006a84
  ldr r2, =_sbss
 8001d7c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001d80:	20000738 	.word	0x20000738

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f973 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	200f      	movs	r0, #15
 8001db8:	f000 f808 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff faf8 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f999 	bl	8002122 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f953 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000120 	.word	0x20000120
 8001e24:	20000128 	.word	0x20000128
 8001e28:	20000124 	.word	0x20000124

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000128 	.word	0x20000128
 8001e50:	20000724 	.word	0x20000724

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000724 	.word	0x20000724

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000128 	.word	0x20000128

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db12      	blt.n	8001f8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	490a      	ldr	r1, [pc, #40]	; (8001f98 <__NVIC_DisableIRQ+0x44>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	3320      	adds	r3, #32
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f80:	f3bf 8f4f 	dsb	sy
}
 8001f84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f86:	f3bf 8f6f 	isb	sy
}
 8001f8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff05 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff1a 	bl	8001efc <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff0d 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff1d 	bl	8001f54 <__NVIC_DisableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff94 	bl	8002058 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff fe84 	bl	8001e54 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d008      	beq.n	800216c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e052      	b.n	8002212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0216 	bic.w	r2, r2, #22
 800217a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800218a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <HAL_DMA_Abort+0x62>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021bc:	e013      	b.n	80021e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021be:	f7ff fe49 	bl	8001e54 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d90c      	bls.n	80021e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e015      	b.n	8002212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e4      	bne.n	80021be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	223f      	movs	r2, #63	; 0x3f
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e00c      	b.n	8002252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2205      	movs	r2, #5
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e177      	b.n	8002584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8166 	bne.w	800257e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d005      	beq.n	80022ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d130      	bne.n	800232c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2203      	movs	r2, #3
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0201 	and.w	r2, r3, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b03      	cmp	r3, #3
 8002336:	d017      	beq.n	8002368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d123      	bne.n	80023bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	69b9      	ldr	r1, [r7, #24]
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80c0 	beq.w	800257e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_GPIO_Init+0x324>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_GPIO_Init+0x324>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_GPIO_Init+0x324>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241a:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <HAL_GPIO_Init+0x328>)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3302      	adds	r3, #2
 8002422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_GPIO_Init+0x32c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d037      	beq.n	80024b6 <HAL_GPIO_Init+0x23e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_GPIO_Init+0x330>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d031      	beq.n	80024b2 <HAL_GPIO_Init+0x23a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a56      	ldr	r2, [pc, #344]	; (80025ac <HAL_GPIO_Init+0x334>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02b      	beq.n	80024ae <HAL_GPIO_Init+0x236>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_GPIO_Init+0x338>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d025      	beq.n	80024aa <HAL_GPIO_Init+0x232>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_GPIO_Init+0x33c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <HAL_GPIO_Init+0x22e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_GPIO_Init+0x340>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x22a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x344>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x226>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_GPIO_Init+0x348>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x222>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_GPIO_Init+0x34c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x21e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <HAL_GPIO_Init+0x350>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x21a>
 800248e:	2309      	movs	r3, #9
 8002490:	e012      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 8002492:	230a      	movs	r3, #10
 8002494:	e010      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 8002496:	2308      	movs	r3, #8
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 800249a:	2307      	movs	r3, #7
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x240>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x328>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_GPIO_Init+0x354>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_GPIO_Init+0x354>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <HAL_GPIO_Init+0x354>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_GPIO_Init+0x354>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_GPIO_Init+0x354>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_GPIO_Init+0x354>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_GPIO_Init+0x354>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_GPIO_Init+0x354>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae84 	bls.w	8002294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40022400 	.word	0x40022400
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ec:	e003      	b.n	80025f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	619a      	str	r2, [r3, #24]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e12b      	b.n	800286e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f87e 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	; 0x24
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002668:	f001 fc36 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800266c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a81      	ldr	r2, [pc, #516]	; (8002878 <HAL_I2C_Init+0x274>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d807      	bhi.n	8002688 <HAL_I2C_Init+0x84>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a80      	ldr	r2, [pc, #512]	; (800287c <HAL_I2C_Init+0x278>)
 800267c:	4293      	cmp	r3, r2
 800267e:	bf94      	ite	ls
 8002680:	2301      	movls	r3, #1
 8002682:	2300      	movhi	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e006      	b.n	8002696 <HAL_I2C_Init+0x92>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a7d      	ldr	r2, [pc, #500]	; (8002880 <HAL_I2C_Init+0x27c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	bf94      	ite	ls
 8002690:	2301      	movls	r3, #1
 8002692:	2300      	movhi	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0e7      	b.n	800286e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a78      	ldr	r2, [pc, #480]	; (8002884 <HAL_I2C_Init+0x280>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0c9b      	lsrs	r3, r3, #18
 80026a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_I2C_Init+0x274>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d802      	bhi.n	80026d8 <HAL_I2C_Init+0xd4>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	e009      	b.n	80026ec <HAL_I2C_Init+0xe8>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	4a69      	ldr	r2, [pc, #420]	; (8002888 <HAL_I2C_Init+0x284>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	3301      	adds	r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	495c      	ldr	r1, [pc, #368]	; (8002878 <HAL_I2C_Init+0x274>)
 8002708:	428b      	cmp	r3, r1
 800270a:	d819      	bhi.n	8002740 <HAL_I2C_Init+0x13c>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e59      	subs	r1, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fbb1 f3f3 	udiv	r3, r1, r3
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002720:	400b      	ands	r3, r1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_I2C_Init+0x138>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e59      	subs	r1, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fbb1 f3f3 	udiv	r3, r1, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	e051      	b.n	80027e0 <HAL_I2C_Init+0x1dc>
 800273c:	2304      	movs	r3, #4
 800273e:	e04f      	b.n	80027e0 <HAL_I2C_Init+0x1dc>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d111      	bne.n	800276c <HAL_I2C_Init+0x168>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e012      	b.n	8002792 <HAL_I2C_Init+0x18e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	0099      	lsls	r1, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Init+0x196>
 8002796:	2301      	movs	r3, #1
 8002798:	e022      	b.n	80027e0 <HAL_I2C_Init+0x1dc>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <HAL_I2C_Init+0x1bc>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1e58      	subs	r0, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	440b      	add	r3, r1
 80027b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027be:	e00f      	b.n	80027e0 <HAL_I2C_Init+0x1dc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e58      	subs	r0, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	0099      	lsls	r1, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6809      	ldr	r1, [r1, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800280e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6911      	ldr	r1, [r2, #16]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	000186a0 	.word	0x000186a0
 800287c:	001e847f 	.word	0x001e847f
 8002880:	003d08ff 	.word	0x003d08ff
 8002884:	431bde83 	.word	0x431bde83
 8002888:	10624dd3 	.word	0x10624dd3

0800288c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	817b      	strh	r3, [r7, #10]
 800289e:	460b      	mov	r3, r1
 80028a0:	813b      	strh	r3, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028a6:	f7ff fad5 	bl	8001e54 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	f040 80d9 	bne.w	8002a6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2319      	movs	r3, #25
 80028c0:	2201      	movs	r2, #1
 80028c2:	496d      	ldr	r1, [pc, #436]	; (8002a78 <HAL_I2C_Mem_Write+0x1ec>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fc7f 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0cc      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Mem_Write+0x56>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0c5      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d007      	beq.n	8002908 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2221      	movs	r2, #33	; 0x21
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <HAL_I2C_Mem_Write+0x1f0>)
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294a:	88f8      	ldrh	r0, [r7, #6]
 800294c:	893a      	ldrh	r2, [r7, #8]
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fab6 	bl	8002ecc <I2C_RequestMemoryWrite>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d052      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e081      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fd00 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b04      	cmp	r3, #4
 8002980:	d107      	bne.n	8002992 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06b      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11b      	bne.n	8002a0c <HAL_I2C_Mem_Write+0x180>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1aa      	bne.n	800296a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fcec 	bl	80033f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00d      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d107      	bne.n	8002a3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e016      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	00100002 	.word	0x00100002
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a9a:	f7ff f9db 	bl	8001e54 <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	f040 8208 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2319      	movs	r3, #25
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	497b      	ldr	r1, [pc, #492]	; (8002ca4 <HAL_I2C_Mem_Read+0x224>)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fb85 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e1fb      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x56>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e1f4      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d007      	beq.n	8002afc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2222      	movs	r2, #34	; 0x22
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_I2C_Mem_Read+0x228>)
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b3e:	88f8      	ldrh	r0, [r7, #6]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fa52 	bl	8002ff8 <I2C_RequestMemoryRead>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1b0      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d113      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e184      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d11b      	bne.n	8002bce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e164      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d11b      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	e144      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c24:	e138      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	f200 80f1 	bhi.w	8002e12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d123      	bne.n	8002c80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fc1b 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e139      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7e:	e10b      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d14e      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <HAL_I2C_Mem_Read+0x22c>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa98 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e10e      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000
 8002cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d24:	e0b8      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4966      	ldr	r1, [pc, #408]	; (8002ec8 <HAL_I2C_Mem_Read+0x448>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fa49 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0bf      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2200      	movs	r2, #0
 8002d8a:	494f      	ldr	r1, [pc, #316]	; (8002ec8 <HAL_I2C_Mem_Read+0x448>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fa1b 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e091      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e10:	e042      	b.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fb2e 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e04c      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d118      	bne.n	8002e98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f aec2 	bne.w	8002c26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010004 	.word	0x00010004

08002ecc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f960 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1c:	d103      	bne.n	8002f26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e05f      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	492d      	ldr	r1, [pc, #180]	; (8002ff4 <I2C_RequestMemoryWrite+0x128>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f998 	bl	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e04c      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa02 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e02b      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e021      	b.n	8002fe8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa4:	893b      	ldrh	r3, [r7, #8]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	6a39      	ldr	r1, [r7, #32]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f9dc 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d107      	bne.n	8002fda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e005      	b.n	8002fea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fde:	893b      	ldrh	r3, [r7, #8]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	00010002 	.word	0x00010002

08002ff8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003020:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2200      	movs	r2, #0
 800303a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8c2 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d103      	bne.n	8003062 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0aa      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	4952      	ldr	r1, [pc, #328]	; (80031c4 <I2C_RequestMemoryRead+0x1cc>)
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f8fa 	bl	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e097      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f964 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d107      	bne.n	80030ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e076      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e021      	b.n	8003124 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f93e 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e050      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800311a:	893b      	ldrh	r3, [r7, #8]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	6a39      	ldr	r1, [r7, #32]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f923 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	2b04      	cmp	r3, #4
 800313a:	d107      	bne.n	800314c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e035      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2200      	movs	r2, #0
 8003168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f82b 	bl	80031c8 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d103      	bne.n	8003190 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e013      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003194:	897b      	ldrh	r3, [r7, #10]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	4906      	ldr	r1, [pc, #24]	; (80031c4 <I2C_RequestMemoryRead+0x1cc>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f863 	bl	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d8:	e025      	b.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d021      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fe fe37 	bl	8001e54 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e023      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10d      	bne.n	800324c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	e00c      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	429a      	cmp	r2, r3
 800326a:	d0b6      	beq.n	80031da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003284:	e051      	b.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d123      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e046      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d021      	beq.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe fdb5 	bl	8001e54 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e020      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e00b      	b.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d18d      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e02d      	b.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8ce 	bl	8003524 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e02d      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d021      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fd5b 	bl	8001e54 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e007      	b.n	80033ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d1ca      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003402:	e02d      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f88d 	bl	8003524 <I2C_IsAcknowledgeFailed>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e02d      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d021      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fd1a 	bl	8001e54 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d1ca      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003484:	e042      	b.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d119      	bne.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e029      	b.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fcc4 	bl	8001e54 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d116      	bne.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d1b5      	bne.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d11b      	bne.n	8003574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b20      	cmp	r3, #32
 8003596:	d129      	bne.n	80035ec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0210 	bic.w	r2, r2, #16
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	e000      	b.n	80035ee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	d12a      	bne.n	800366a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003634:	89fb      	ldrh	r3, [r7, #14]
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	89fb      	ldrh	r3, [r7, #14]
 8003642:	4313      	orrs	r3, r2
 8003644:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	89fa      	ldrh	r2, [r7, #14]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e267      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d075      	beq.n	8003782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003696:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d00c      	beq.n	80036bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b85      	ldr	r3, [pc, #532]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d112      	bne.n	80036d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b82      	ldr	r3, [pc, #520]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05b      	beq.n	8003780 <HAL_RCC_OscConfig+0x108>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d157      	bne.n	8003780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e242      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d106      	bne.n	80036ec <HAL_RCC_OscConfig+0x74>
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a75      	ldr	r2, [pc, #468]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xb0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x98>
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6f      	ldr	r2, [pc, #444]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6c      	ldr	r2, [pc, #432]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xb0>
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a65      	ldr	r2, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fb90 	bl	8001e54 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe fb8c 	bl	8001e54 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e207      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xc0>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe fb7c 	bl	8001e54 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fb78 	bl	8001e54 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e1f3      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0xe8>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d11c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d116      	bne.n	80037e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_RCC_OscConfig+0x152>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1c7      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4937      	ldr	r1, [pc, #220]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	e03a      	b.n	8003856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_OscConfig+0x244>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe fb31 	bl	8001e54 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fe fb2d 	bl	8001e54 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1a8      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4925      	ldr	r1, [pc, #148]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	e015      	b.n	8003856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_OscConfig+0x244>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fb10 	bl	8001e54 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003838:	f7fe fb0c 	bl	8001e54 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e187      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d036      	beq.n	80038d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_RCC_OscConfig+0x248>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe faf0 	bl	8001e54 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003878:	f7fe faec 	bl	8001e54 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e167      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_OscConfig+0x240>)
 800388c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x200>
 8003896:	e01b      	b.n	80038d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_OscConfig+0x248>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe fad9 	bl	8001e54 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	e00e      	b.n	80038c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe fad5 	bl	8001e54 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d907      	bls.n	80038c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e150      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	42470000 	.word	0x42470000
 80038c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	4b88      	ldr	r3, [pc, #544]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ea      	bne.n	80038a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8097 	beq.w	8003a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	4b7d      	ldr	r3, [pc, #500]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a7c      	ldr	r2, [pc, #496]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	; 0x40
 80038fe:	4b7a      	ldr	r3, [pc, #488]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390a:	2301      	movs	r3, #1
 800390c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b77      	ldr	r3, [pc, #476]	; (8003aec <HAL_RCC_OscConfig+0x474>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d118      	bne.n	800394c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b74      	ldr	r3, [pc, #464]	; (8003aec <HAL_RCC_OscConfig+0x474>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a73      	ldr	r2, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x474>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003926:	f7fe fa95 	bl	8001e54 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fe fa91 	bl	8001e54 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e10c      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_OscConfig+0x474>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x2ea>
 8003954:	4b64      	ldr	r3, [pc, #400]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a63      	ldr	r2, [pc, #396]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	e01c      	b.n	800399c <HAL_RCC_OscConfig+0x324>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b05      	cmp	r3, #5
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x30c>
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a5b      	ldr	r2, [pc, #364]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0x324>
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4a57      	ldr	r2, [pc, #348]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	; 0x70
 8003990:	4b55      	ldr	r3, [pc, #340]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a54      	ldr	r2, [pc, #336]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 0304 	bic.w	r3, r3, #4
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe fa56 	bl	8001e54 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe fa52 	bl	8001e54 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0cb      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ee      	beq.n	80039ac <HAL_RCC_OscConfig+0x334>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fe fa40 	bl	8001e54 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fe fa3c 	bl	8001e54 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0b5      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	4b3e      	ldr	r3, [pc, #248]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ee      	bne.n	80039d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a00:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	4a38      	ldr	r2, [pc, #224]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a1 	beq.w	8003b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a16:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d05c      	beq.n	8003adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d141      	bne.n	8003aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0x478>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fa10 	bl	8001e54 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fe fa0c 	bl	8001e54 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e087      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	491b      	ldr	r1, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x478>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe f9e5 	bl	8001e54 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe f9e1 	bl	8001e54 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e05c      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x416>
 8003aac:	e054      	b.n	8003b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <HAL_RCC_OscConfig+0x478>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fe f9ce 	bl	8001e54 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fe f9ca 	bl	8001e54 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e045      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x444>
 8003ada:	e03d      	b.n	8003b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e038      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000
 8003af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x4ec>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d028      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d121      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d11a      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d111      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0cc      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d90c      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b8      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd4:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	494d      	ldr	r1, [pc, #308]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d044      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d119      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e07f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e06f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e067      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4934      	ldr	r1, [pc, #208]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c58:	f7fe f8fc 	bl	8001e54 <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fe f8f8 	bl	8001e54 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e04f      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d20c      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e032      	b.n	8003d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4916      	ldr	r1, [pc, #88]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cee:	f000 f821 	bl	8003d34 <HAL_RCC_GetSysClockFreq>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	490a      	ldr	r1, [pc, #40]	; (8003d28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	5ccb      	ldrb	r3, [r1, r3]
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe f85c 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023c00 	.word	0x40023c00
 8003d24:	40023800 	.word	0x40023800
 8003d28:	08006a28 	.word	0x08006a28
 8003d2c:	20000120 	.word	0x20000120
 8003d30:	20000124 	.word	0x20000124

08003d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d38:	b090      	sub	sp, #64	; 0x40
 8003d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	2300      	movs	r3, #0
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d44:	2300      	movs	r3, #0
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d4c:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d00d      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x40>
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	f200 80a1 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x34>
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d66:	e09b      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d6c:	e09b      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d6e:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d72:	e098      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d74:	4b4f      	ldr	r3, [pc, #316]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d7e:	4b4d      	ldr	r3, [pc, #308]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d028      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	099b      	lsrs	r3, r3, #6
 8003d90:	2200      	movs	r2, #0
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	627a      	str	r2, [r7, #36]	; 0x24
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8003da0:	fb03 f201 	mul.w	r2, r3, r1
 8003da4:	2300      	movs	r3, #0
 8003da6:	fb00 f303 	mul.w	r3, r0, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x188>)
 8003dae:	fba0 1202 	umull	r1, r2, r0, r2
 8003db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db4:	460a      	mov	r2, r1
 8003db6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	4413      	add	r3, r2
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	61fa      	str	r2, [r7, #28]
 8003dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dce:	f7fc fa5f 	bl	8000290 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dda:	e053      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	099b      	lsrs	r3, r3, #6
 8003de2:	2200      	movs	r2, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	617a      	str	r2, [r7, #20]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dee:	f04f 0b00 	mov.w	fp, #0
 8003df2:	4652      	mov	r2, sl
 8003df4:	465b      	mov	r3, fp
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e0e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e26:	ebb2 0408 	subs.w	r4, r2, r8
 8003e2a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	00eb      	lsls	r3, r5, #3
 8003e38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3c:	00e2      	lsls	r2, r4, #3
 8003e3e:	4614      	mov	r4, r2
 8003e40:	461d      	mov	r5, r3
 8003e42:	eb14 030a 	adds.w	r3, r4, sl
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	eb45 030b 	adc.w	r3, r5, fp
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	028b      	lsls	r3, r1, #10
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e64:	4621      	mov	r1, r4
 8003e66:	028a      	lsls	r2, r1, #10
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	60fa      	str	r2, [r7, #12]
 8003e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e78:	f7fc fa0a 	bl	8000290 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3740      	adds	r7, #64	; 0x40
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	017d7840 	.word	0x017d7840

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000120 	.word	0x20000120

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08006a38 	.word	0x08006a38

08003f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f04:	f7ff ffdc 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08006a38 	.word	0x08006a38

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e041      	b.n	8003fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fb74 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fad8 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e041      	b.n	800405c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f839 	bl	8004064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 fa89 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_TIM_PWM_Start+0x24>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e022      	b.n	80040e2 <HAL_TIM_PWM_Start+0x6a>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d109      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x3e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e015      	b.n	80040e2 <HAL_TIM_PWM_Start+0x6a>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x58>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e008      	b.n	80040e2 <HAL_TIM_PWM_Start+0x6a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07c      	b.n	80041e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_PWM_Start+0x82>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f8:	e013      	b.n	8004122 <HAL_TIM_PWM_Start+0xaa>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d104      	bne.n	800410a <HAL_TIM_PWM_Start+0x92>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	e00b      	b.n	8004122 <HAL_TIM_PWM_Start+0xaa>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d104      	bne.n	800411a <HAL_TIM_PWM_Start+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004118:	e003      	b.n	8004122 <HAL_TIM_PWM_Start+0xaa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	6839      	ldr	r1, [r7, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fce0 	bl	8004af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <HAL_TIM_PWM_Start+0x174>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_TIM_PWM_Start+0xcc>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <HAL_TIM_PWM_Start+0x178>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_TIM_PWM_Start+0xd0>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_TIM_PWM_Start+0xd2>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a22      	ldr	r2, [pc, #136]	; (80041ec <HAL_TIM_PWM_Start+0x174>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d01d      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_TIM_PWM_Start+0x17c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_TIM_PWM_Start+0x180>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <HAL_TIM_PWM_Start+0x184>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <HAL_TIM_PWM_Start+0x178>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_TIM_PWM_Start+0x188>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIM_PWM_Start+0x136>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <HAL_TIM_PWM_Start+0x18c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d111      	bne.n	80041d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b06      	cmp	r3, #6
 80041be:	d010      	beq.n	80041e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	e007      	b.n	80041e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40014000 	.word	0x40014000
 8004204:	40001800 	.word	0x40001800

08004208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004222:	2302      	movs	r3, #2
 8004224:	e0ae      	b.n	8004384 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	f200 809f 	bhi.w	8004374 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004271 	.word	0x08004271
 8004240:	08004375 	.word	0x08004375
 8004244:	08004375 	.word	0x08004375
 8004248:	08004375 	.word	0x08004375
 800424c:	080042b1 	.word	0x080042b1
 8004250:	08004375 	.word	0x08004375
 8004254:	08004375 	.word	0x08004375
 8004258:	08004375 	.word	0x08004375
 800425c:	080042f3 	.word	0x080042f3
 8004260:	08004375 	.word	0x08004375
 8004264:	08004375 	.word	0x08004375
 8004268:	08004375 	.word	0x08004375
 800426c:	08004333 	.word	0x08004333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f9f0 	bl	800465c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	619a      	str	r2, [r3, #24]
      break;
 80042ae:	e064      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fa40 	bl	800473c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6999      	ldr	r1, [r3, #24]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	021a      	lsls	r2, r3, #8
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	619a      	str	r2, [r3, #24]
      break;
 80042f0:	e043      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fa95 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0208 	orr.w	r2, r2, #8
 800430c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0204 	bic.w	r2, r2, #4
 800431c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69d9      	ldr	r1, [r3, #28]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	61da      	str	r2, [r3, #28]
      break;
 8004330:	e023      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fae9 	bl	8004910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69d9      	ldr	r1, [r3, #28]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	021a      	lsls	r2, r3, #8
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	61da      	str	r2, [r3, #28]
      break;
 8004372:	e002      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	75fb      	strb	r3, [r7, #23]
      break;
 8004378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004382:	7dfb      	ldrb	r3, [r7, #23]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_ConfigClockSource+0x1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0b4      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x186>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d03e      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0xd4>
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	f200 8087 	bhi.w	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	f000 8086 	beq.w	80044fe <HAL_TIM_ConfigClockSource+0x172>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d87f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d01a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xa6>
 80043fc:	2b70      	cmp	r3, #112	; 0x70
 80043fe:	d87b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d050      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004404:	2b60      	cmp	r3, #96	; 0x60
 8004406:	d877      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d03c      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xfa>
 800440c:	2b50      	cmp	r3, #80	; 0x50
 800440e:	d873      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d058      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d86f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d064      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b30      	cmp	r3, #48	; 0x30
 800441e:	d86b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d060      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d867      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 800442c:	2b10      	cmp	r3, #16
 800442e:	d05a      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004430:	e062      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f000 fb35 	bl	8004ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
      break;
 800445e:	e04f      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6899      	ldr	r1, [r3, #8]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f000 fb1e 	bl	8004ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004482:	609a      	str	r2, [r3, #8]
      break;
 8004484:	e03c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	461a      	mov	r2, r3
 8004494:	f000 fa92 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2150      	movs	r1, #80	; 0x50
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 faeb 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80044a4:	e02c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f000 fab1 	bl	8004a1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2160      	movs	r1, #96	; 0x60
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fadb 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80044c4:	e01c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 fa72 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 facb 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80044e4:	e00c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f000 fac2 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80044f6:	e003      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      break;
 80044fc:	e000      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a40      	ldr	r2, [pc, #256]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3d      	ldr	r2, [pc, #244]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3a      	ldr	r2, [pc, #232]	; (8004640 <TIM_Base_SetConfig+0x124>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d02b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d027      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d023      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01f      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2a      	ldr	r2, [pc, #168]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a29      	ldr	r2, [pc, #164]	; (8004640 <TIM_Base_SetConfig+0x124>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <TIM_Base_SetConfig+0x128>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <TIM_Base_SetConfig+0x12c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <TIM_Base_SetConfig+0x130>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <TIM_Base_SetConfig+0x134>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <TIM_Base_SetConfig+0x138>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a23      	ldr	r2, [pc, #140]	; (8004658 <TIM_Base_SetConfig+0x13c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <TIM_Base_SetConfig+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	40001800 	.word	0x40001800
 8004654:	40001c00 	.word	0x40001c00
 8004658:	40002000 	.word	0x40002000

0800465c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0302 	bic.w	r3, r3, #2
 80046a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <TIM_OC1_SetConfig+0xd8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_OC1_SetConfig+0x64>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <TIM_OC1_SetConfig+0xdc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10c      	bne.n	80046da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0308 	bic.w	r3, r3, #8
 80046c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <TIM_OC1_SetConfig+0xd8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_OC1_SetConfig+0x8e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <TIM_OC1_SetConfig+0xdc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d111      	bne.n	800470e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40010000 	.word	0x40010000
 8004738:	40010400 	.word	0x40010400

0800473c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0210 	bic.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a22      	ldr	r2, [pc, #136]	; (8004820 <TIM_OC2_SetConfig+0xe4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_OC2_SetConfig+0x68>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <TIM_OC2_SetConfig+0xe8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10d      	bne.n	80047c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <TIM_OC2_SetConfig+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC2_SetConfig+0x94>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <TIM_OC2_SetConfig+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d113      	bne.n	80047f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	621a      	str	r2, [r3, #32]
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40010400 	.word	0x40010400

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a21      	ldr	r2, [pc, #132]	; (8004908 <TIM_OC3_SetConfig+0xe0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC3_SetConfig+0x66>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <TIM_OC3_SetConfig+0xe4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10d      	bne.n	80048aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <TIM_OC3_SetConfig+0xe0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_OC3_SetConfig+0x92>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <TIM_OC3_SetConfig+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d113      	bne.n	80048e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400

08004910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800495a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	031b      	lsls	r3, r3, #12
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <TIM_OC4_SetConfig+0xa4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC4_SetConfig+0x68>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <TIM_OC4_SetConfig+0xa8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d109      	bne.n	800498c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40010400 	.word	0x40010400

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f043 0307 	orr.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2201      	movs	r2, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1a      	ldr	r2, [r3, #32]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1a      	ldr	r2, [r3, #32]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e05a      	b.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d01d      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40010400 	.word	0x40010400
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40001800 	.word	0x40001800

08004c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e03d      	b.n	8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e03f      	b.n	8004d6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc ffc8 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	; 0x24
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fe4f 	bl	80059c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08a      	sub	sp, #40	; 0x28
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d17c      	bne.n	8004e8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_Transmit+0x2c>
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e075      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x3e>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e06e      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc6:	f7fd f845 	bl	8001e54 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	88fa      	ldrh	r2, [r7, #6]
 8004dd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d108      	bne.n	8004df4 <HAL_UART_Transmit+0x82>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e003      	b.n	8004dfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e04:	e02a      	b.n	8004e5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fbcd 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e036      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e007      	b.n	8004e4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1cf      	bne.n	8004e06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2140      	movs	r1, #64	; 0x40
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fb9d 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e006      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d130      	bne.n	8004f12 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Transmit_IT+0x26>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e029      	b.n	8004f14 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Transmit_IT+0x38>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e022      	b.n	8004f14 <HAL_UART_Transmit_IT+0x7e>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2221      	movs	r2, #33	; 0x21
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f12:	2302      	movs	r3, #2
  }
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b09a      	sub	sp, #104	; 0x68
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f48:	657a      	str	r2, [r7, #84]	; 0x54
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d119      	bne.n	8004fcc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e5      	bne.n	8004f98 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d136      	bne.n	8005048 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3314      	adds	r3, #20
 8004fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ffa:	61ba      	str	r2, [r7, #24]
 8004ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e5      	bne.n	8004fda <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	2200      	movs	r2, #0
 800501c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd f889 	bl	800213a <HAL_DMA_Abort>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd f913 	bl	800225e <HAL_DMA_GetError>
 8005038:	4603      	mov	r3, r0
 800503a:	2b20      	cmp	r3, #32
 800503c:	d104      	bne.n	8005048 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2210      	movs	r2, #16
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e00a      	b.n	800505e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3768      	adds	r7, #104	; 0x68
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b0ba      	sub	sp, #232	; 0xe8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005094:	2300      	movs	r3, #0
 8005096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10f      	bne.n	80050ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_UART_IRQHandler+0x66>
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fbbf 	bl	800584a <UART_Receive_IT>
      return;
 80050cc:	e256      	b.n	800557c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80de 	beq.w	8005294 <HAL_UART_IRQHandler+0x22c>
 80050d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80d1 	beq.w	8005294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_UART_IRQHandler+0xae>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_UART_IRQHandler+0xd2>
 8005122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0202 	orr.w	r2, r3, #2
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_UART_IRQHandler+0xf6>
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f043 0204 	orr.w	r2, r3, #4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d011      	beq.n	800518e <HAL_UART_IRQHandler+0x126>
 800516a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0208 	orr.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 81ed 	beq.w	8005572 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_UART_IRQHandler+0x14e>
 80051a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb4a 	bl	800584a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <HAL_UART_IRQHandler+0x17a>
 80051da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04f      	beq.n	8005282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa52 	bl	800568c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d141      	bne.n	800527a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3314      	adds	r3, #20
 80051fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800520c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3314      	adds	r3, #20
 800521e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800522e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800523a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1d9      	bne.n	80051f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	2b00      	cmp	r3, #0
 8005248:	d013      	beq.n	8005272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	4a7d      	ldr	r2, [pc, #500]	; (8005444 <HAL_UART_IRQHandler+0x3dc>)
 8005250:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	4618      	mov	r0, r3
 8005258:	f7fc ffdf 	bl	800221a <HAL_DMA_Abort_IT>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d016      	beq.n	8005290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	e00e      	b.n	8005290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f986 	bl	8005584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	e00a      	b.n	8005290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f982 	bl	8005584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e006      	b.n	8005290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f97e 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800528e:	e170      	b.n	8005572 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	bf00      	nop
    return;
 8005292:	e16e      	b.n	8005572 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	2b01      	cmp	r3, #1
 800529a:	f040 814a 	bne.w	8005532 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8143 	beq.w	8005532 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 813c 	beq.w	8005532 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	f040 80b4 	bne.w	8005448 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8140 	beq.w	8005576 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052fe:	429a      	cmp	r2, r3
 8005300:	f080 8139 	bcs.w	8005576 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800530a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	f000 8088 	beq.w	800542a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	330c      	adds	r3, #12
 8005342:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800534a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800535e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d9      	bne.n	800531a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800538a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800538e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005392:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800539c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e1      	bne.n	8005366 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3314      	adds	r3, #20
 80053a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e3      	bne.n	80053a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fa:	f023 0310 	bic.w	r3, r3, #16
 80053fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800540c:	65ba      	str	r2, [r7, #88]	; 0x58
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800541a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e3      	bne.n	80053e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	4618      	mov	r0, r3
 8005426:	f7fc fe88 	bl	800213a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005432:	b29b      	uxth	r3, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8ac 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005440:	e099      	b.n	8005576 <HAL_UART_IRQHandler+0x50e>
 8005442:	bf00      	nop
 8005444:	08005753 	.word	0x08005753
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005450:	b29b      	uxth	r3, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 808b 	beq.w	800557a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8086 	beq.w	800557a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005492:	647a      	str	r2, [r7, #68]	; 0x44
 8005494:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e3      	bne.n	800546e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	623b      	str	r3, [r7, #32]
   return(result);
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054ca:	633a      	str	r2, [r7, #48]	; 0x30
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e3      	bne.n	80054a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0310 	bic.w	r3, r3, #16
 8005502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005510:	61fa      	str	r2, [r7, #28]
 8005512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	69b9      	ldr	r1, [r7, #24]
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	617b      	str	r3, [r7, #20]
   return(result);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e3      	bne.n	80054ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f834 	bl	8005598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005530:	e023      	b.n	800557a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_UART_IRQHandler+0x4ea>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f915 	bl	800577a <UART_Transmit_IT>
    return;
 8005550:	e014      	b.n	800557c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <HAL_UART_IRQHandler+0x514>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f955 	bl	800581a <UART_EndTransmit_IT>
    return;
 8005570:	e004      	b.n	800557c <HAL_UART_IRQHandler+0x514>
    return;
 8005572:	bf00      	nop
 8005574:	e002      	b.n	800557c <HAL_UART_IRQHandler+0x514>
      return;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_UART_IRQHandler+0x514>
      return;
 800557a:	bf00      	nop
  }
}
 800557c:	37e8      	adds	r7, #232	; 0xe8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop

08005584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b090      	sub	sp, #64	; 0x40
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	e050      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d04c      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055d0:	f7fc fc40 	bl	8001e54 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055dc:	429a      	cmp	r2, r3
 80055de:	d241      	bcs.n	8005664 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005600:	637a      	str	r2, [r7, #52]	; 0x34
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	63bb      	str	r3, [r7, #56]	; 0x38
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e00f      	b.n	8005684 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4013      	ands	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	bf0c      	ite	eq
 8005674:	2301      	moveq	r3, #1
 8005676:	2300      	movne	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	429a      	cmp	r2, r3
 8005680:	d09f      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3740      	adds	r7, #64	; 0x40
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b095      	sub	sp, #84	; 0x54
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b4:	643a      	str	r2, [r7, #64]	; 0x40
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e5      	bne.n	8005694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	2b01      	cmp	r3, #1
 8005702:	d119      	bne.n	8005738 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	60bb      	str	r3, [r7, #8]
   return(result);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f023 0310 	bic.w	r3, r3, #16
 800571a:	647b      	str	r3, [r7, #68]	; 0x44
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005724:	61ba      	str	r2, [r7, #24]
 8005726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	613b      	str	r3, [r7, #16]
   return(result);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005746:	bf00      	nop
 8005748:	3754      	adds	r7, #84	; 0x54
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff09 	bl	8005584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b21      	cmp	r3, #33	; 0x21
 800578c:	d13e      	bne.n	800580c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d114      	bne.n	80057c2 <UART_Transmit_IT+0x48>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d110      	bne.n	80057c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]
 80057c0:	e008      	b.n	80057d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6211      	str	r1, [r2, #32]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	4619      	mov	r1, r3
 80057e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005806:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005830:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb fb48 	bl	8000ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08c      	sub	sp, #48	; 0x30
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b22      	cmp	r3, #34	; 0x22
 800585c:	f040 80ab 	bne.w	80059b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005868:	d117      	bne.n	800589a <UART_Receive_IT+0x50>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d113      	bne.n	800589a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005888:	b29a      	uxth	r2, r3
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
 8005898:	e026      	b.n	80058e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ac:	d007      	beq.n	80058be <UART_Receive_IT+0x74>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <UART_Receive_IT+0x82>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e008      	b.n	80058de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4619      	mov	r1, r3
 80058f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d15a      	bne.n	80059b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0220 	bic.w	r2, r2, #32
 800590a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800591a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	2b01      	cmp	r3, #1
 800593a:	d135      	bne.n	80059a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	613b      	str	r3, [r7, #16]
   return(result);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f023 0310 	bic.w	r3, r3, #16
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	623a      	str	r2, [r7, #32]
 8005964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	69f9      	ldr	r1, [r7, #28]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d10a      	bne.n	800599a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff fdf9 	bl	8005598 <HAL_UARTEx_RxEventCallback>
 80059a6:	e002      	b.n	80059ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fb fa5d 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e002      	b.n	80059b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e000      	b.n	80059b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
  }
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3730      	adds	r7, #48	; 0x30
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c4:	b0c0      	sub	sp, #256	; 0x100
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	ea40 0301 	orr.w	r3, r0, r1
 80059e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a18:	f021 010c 	bic.w	r1, r1, #12
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a26:	430b      	orrs	r3, r1
 8005a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	6999      	ldr	r1, [r3, #24]
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	ea40 0301 	orr.w	r3, r0, r1
 8005a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b8f      	ldr	r3, [pc, #572]	; (8005c8c <UART_SetConfig+0x2cc>)
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d005      	beq.n	8005a60 <UART_SetConfig+0xa0>
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b8d      	ldr	r3, [pc, #564]	; (8005c90 <UART_SetConfig+0x2d0>)
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d104      	bne.n	8005a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a60:	f7fe fa4e 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 8005a64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a68:	e003      	b.n	8005a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a6a:	f7fe fa35 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7c:	f040 810c 	bne.w	8005c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a92:	4622      	mov	r2, r4
 8005a94:	462b      	mov	r3, r5
 8005a96:	1891      	adds	r1, r2, r2
 8005a98:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a9a:	415b      	adcs	r3, r3
 8005a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	eb12 0801 	adds.w	r8, r2, r1
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	eb43 0901 	adc.w	r9, r3, r1
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ac2:	4690      	mov	r8, r2
 8005ac4:	4699      	mov	r9, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	eb18 0303 	adds.w	r3, r8, r3
 8005acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	eb49 0303 	adc.w	r3, r9, r3
 8005ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aee:	460b      	mov	r3, r1
 8005af0:	18db      	adds	r3, r3, r3
 8005af2:	653b      	str	r3, [r7, #80]	; 0x50
 8005af4:	4613      	mov	r3, r2
 8005af6:	eb42 0303 	adc.w	r3, r2, r3
 8005afa:	657b      	str	r3, [r7, #84]	; 0x54
 8005afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b04:	f7fa fbc4 	bl	8000290 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <UART_SetConfig+0x2d4>)
 8005b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	011c      	lsls	r4, r3, #4
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b30:	415b      	adcs	r3, r3
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b38:	4641      	mov	r1, r8
 8005b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b3e:	4649      	mov	r1, r9
 8005b40:	eb43 0b01 	adc.w	fp, r3, r1
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b58:	4692      	mov	sl, r2
 8005b5a:	469b      	mov	fp, r3
 8005b5c:	4643      	mov	r3, r8
 8005b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b66:	464b      	mov	r3, r9
 8005b68:	eb4b 0303 	adc.w	r3, fp, r3
 8005b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b84:	460b      	mov	r3, r1
 8005b86:	18db      	adds	r3, r3, r3
 8005b88:	643b      	str	r3, [r7, #64]	; 0x40
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	eb42 0303 	adc.w	r3, r2, r3
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
 8005b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b9a:	f7fa fb79 	bl	8000290 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4b3b      	ldr	r3, [pc, #236]	; (8005c94 <UART_SetConfig+0x2d4>)
 8005ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	2264      	movs	r2, #100	; 0x64
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	1acb      	subs	r3, r1, r3
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <UART_SetConfig+0x2d4>)
 8005bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc8:	441c      	add	r4, r3
 8005bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	1891      	adds	r1, r2, r2
 8005be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005be4:	415b      	adcs	r3, r3
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bec:	4641      	mov	r1, r8
 8005bee:	1851      	adds	r1, r2, r1
 8005bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	414b      	adcs	r3, r1
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c04:	4659      	mov	r1, fp
 8005c06:	00cb      	lsls	r3, r1, #3
 8005c08:	4651      	mov	r1, sl
 8005c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c0e:	4651      	mov	r1, sl
 8005c10:	00ca      	lsls	r2, r1, #3
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	4642      	mov	r2, r8
 8005c1a:	189b      	adds	r3, r3, r2
 8005c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c20:	464b      	mov	r3, r9
 8005c22:	460a      	mov	r2, r1
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c40:	460b      	mov	r3, r1
 8005c42:	18db      	adds	r3, r3, r3
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c46:	4613      	mov	r3, r2
 8005c48:	eb42 0303 	adc.w	r3, r2, r3
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c56:	f7fa fb1b 	bl	8000290 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <UART_SetConfig+0x2d4>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <UART_SetConfig+0x2d4>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 0207 	and.w	r2, r3, #7
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4422      	add	r2, r4
 8005c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c88:	e105      	b.n	8005e96 <UART_SetConfig+0x4d6>
 8005c8a:	bf00      	nop
 8005c8c:	40011000 	.word	0x40011000
 8005c90:	40011400 	.word	0x40011400
 8005c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005caa:	4642      	mov	r2, r8
 8005cac:	464b      	mov	r3, r9
 8005cae:	1891      	adds	r1, r2, r2
 8005cb0:	6239      	str	r1, [r7, #32]
 8005cb2:	415b      	adcs	r3, r3
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cba:	4641      	mov	r1, r8
 8005cbc:	1854      	adds	r4, r2, r1
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	eb43 0501 	adc.w	r5, r3, r1
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	00eb      	lsls	r3, r5, #3
 8005cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd2:	00e2      	lsls	r2, r4, #3
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	4643      	mov	r3, r8
 8005cda:	18e3      	adds	r3, r4, r3
 8005cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	eb45 0303 	adc.w	r3, r5, r3
 8005ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d06:	4629      	mov	r1, r5
 8005d08:	008b      	lsls	r3, r1, #2
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d10:	4621      	mov	r1, r4
 8005d12:	008a      	lsls	r2, r1, #2
 8005d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d18:	f7fa faba 	bl	8000290 <__aeabi_uldivmod>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4b60      	ldr	r3, [pc, #384]	; (8005ea4 <UART_SetConfig+0x4e4>)
 8005d22:	fba3 2302 	umull	r2, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	011c      	lsls	r4, r3, #4
 8005d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	1891      	adds	r1, r2, r2
 8005d42:	61b9      	str	r1, [r7, #24]
 8005d44:	415b      	adcs	r3, r3
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	1851      	adds	r1, r2, r1
 8005d50:	6139      	str	r1, [r7, #16]
 8005d52:	4649      	mov	r1, r9
 8005d54:	414b      	adcs	r3, r1
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d64:	4659      	mov	r1, fp
 8005d66:	00cb      	lsls	r3, r1, #3
 8005d68:	4651      	mov	r1, sl
 8005d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6e:	4651      	mov	r1, sl
 8005d70:	00ca      	lsls	r2, r1, #3
 8005d72:	4610      	mov	r0, r2
 8005d74:	4619      	mov	r1, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	4642      	mov	r2, r8
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d80:	464b      	mov	r3, r9
 8005d82:	460a      	mov	r2, r1
 8005d84:	eb42 0303 	adc.w	r3, r2, r3
 8005d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005da4:	4649      	mov	r1, r9
 8005da6:	008b      	lsls	r3, r1, #2
 8005da8:	4641      	mov	r1, r8
 8005daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dae:	4641      	mov	r1, r8
 8005db0:	008a      	lsls	r2, r1, #2
 8005db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005db6:	f7fa fa6b 	bl	8000290 <__aeabi_uldivmod>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <UART_SetConfig+0x4e4>)
 8005dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	2164      	movs	r1, #100	; 0x64
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	3332      	adds	r3, #50	; 0x32
 8005dd2:	4a34      	ldr	r2, [pc, #208]	; (8005ea4 <UART_SetConfig+0x4e4>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dde:	441c      	add	r4, r3
 8005de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de4:	2200      	movs	r2, #0
 8005de6:	673b      	str	r3, [r7, #112]	; 0x70
 8005de8:	677a      	str	r2, [r7, #116]	; 0x74
 8005dea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dee:	4642      	mov	r2, r8
 8005df0:	464b      	mov	r3, r9
 8005df2:	1891      	adds	r1, r2, r2
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	415b      	adcs	r3, r3
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dfe:	4641      	mov	r1, r8
 8005e00:	1851      	adds	r1, r2, r1
 8005e02:	6039      	str	r1, [r7, #0]
 8005e04:	4649      	mov	r1, r9
 8005e06:	414b      	adcs	r3, r1
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e16:	4659      	mov	r1, fp
 8005e18:	00cb      	lsls	r3, r1, #3
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e20:	4651      	mov	r1, sl
 8005e22:	00ca      	lsls	r2, r1, #3
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	189b      	adds	r3, r3, r2
 8005e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e30:	464b      	mov	r3, r9
 8005e32:	460a      	mov	r2, r1
 8005e34:	eb42 0303 	adc.w	r3, r2, r3
 8005e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	663b      	str	r3, [r7, #96]	; 0x60
 8005e44:	667a      	str	r2, [r7, #100]	; 0x64
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e52:	4649      	mov	r1, r9
 8005e54:	008b      	lsls	r3, r1, #2
 8005e56:	4641      	mov	r1, r8
 8005e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	008a      	lsls	r2, r1, #2
 8005e60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e64:	f7fa fa14 	bl	8000290 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <UART_SetConfig+0x4e4>)
 8005e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2164      	movs	r1, #100	; 0x64
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	3332      	adds	r3, #50	; 0x32
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <UART_SetConfig+0x4e4>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4422      	add	r2, r4
 8005e94:	609a      	str	r2, [r3, #8]
}
 8005e96:	bf00      	nop
 8005e98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea2:	bf00      	nop
 8005ea4:	51eb851f 	.word	0x51eb851f

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	2000012c 	.word	0x2000012c

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	4d0d      	ldr	r5, [pc, #52]	; (8005eec <__libc_init_array+0x38>)
 8005eb8:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005eba:	1b64      	subs	r4, r4, r5
 8005ebc:	10a4      	asrs	r4, r4, #2
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	4d0b      	ldr	r5, [pc, #44]	; (8005ef4 <__libc_init_array+0x40>)
 8005ec6:	4c0c      	ldr	r4, [pc, #48]	; (8005ef8 <__libc_init_array+0x44>)
 8005ec8:	f000 fcb8 	bl	800683c <_init>
 8005ecc:	1b64      	subs	r4, r4, r5
 8005ece:	10a4      	asrs	r4, r4, #2
 8005ed0:	2600      	movs	r6, #0
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	08006a7c 	.word	0x08006a7c
 8005ef0:	08006a7c 	.word	0x08006a7c
 8005ef4:	08006a7c 	.word	0x08006a7c
 8005ef8:	08006a80 	.word	0x08006a80

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <siprintf>:
 8005f0c:	b40e      	push	{r1, r2, r3}
 8005f0e:	b500      	push	{lr}
 8005f10:	b09c      	sub	sp, #112	; 0x70
 8005f12:	ab1d      	add	r3, sp, #116	; 0x74
 8005f14:	9002      	str	r0, [sp, #8]
 8005f16:	9006      	str	r0, [sp, #24]
 8005f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f1c:	4809      	ldr	r0, [pc, #36]	; (8005f44 <siprintf+0x38>)
 8005f1e:	9107      	str	r1, [sp, #28]
 8005f20:	9104      	str	r1, [sp, #16]
 8005f22:	4909      	ldr	r1, [pc, #36]	; (8005f48 <siprintf+0x3c>)
 8005f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f28:	9105      	str	r1, [sp, #20]
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	a902      	add	r1, sp, #8
 8005f30:	f000 f892 	bl	8006058 <_svfiprintf_r>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	b01c      	add	sp, #112	; 0x70
 8005f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f40:	b003      	add	sp, #12
 8005f42:	4770      	bx	lr
 8005f44:	2000012c 	.word	0x2000012c
 8005f48:	ffff0208 	.word	0xffff0208

08005f4c <strncmp>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	b17a      	cbz	r2, 8005f70 <strncmp+0x24>
 8005f50:	4603      	mov	r3, r0
 8005f52:	3901      	subs	r1, #1
 8005f54:	1884      	adds	r4, r0, r2
 8005f56:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f5e:	4290      	cmp	r0, r2
 8005f60:	d101      	bne.n	8005f66 <strncmp+0x1a>
 8005f62:	42a3      	cmp	r3, r4
 8005f64:	d101      	bne.n	8005f6a <strncmp+0x1e>
 8005f66:	1a80      	subs	r0, r0, r2
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1f3      	bne.n	8005f56 <strncmp+0xa>
 8005f6e:	e7fa      	b.n	8005f66 <strncmp+0x1a>
 8005f70:	4610      	mov	r0, r2
 8005f72:	e7f9      	b.n	8005f68 <strncmp+0x1c>

08005f74 <strstr>:
 8005f74:	780a      	ldrb	r2, [r1, #0]
 8005f76:	b570      	push	{r4, r5, r6, lr}
 8005f78:	b96a      	cbnz	r2, 8005f96 <strstr+0x22>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d109      	bne.n	8005f94 <strstr+0x20>
 8005f80:	460c      	mov	r4, r1
 8005f82:	4605      	mov	r5, r0
 8005f84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f6      	beq.n	8005f7a <strstr+0x6>
 8005f8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005f90:	429e      	cmp	r6, r3
 8005f92:	d0f7      	beq.n	8005f84 <strstr+0x10>
 8005f94:	3001      	adds	r0, #1
 8005f96:	7803      	ldrb	r3, [r0, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1ef      	bne.n	8005f7c <strstr+0x8>
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	e7ec      	b.n	8005f7a <strstr+0x6>

08005fa0 <__ssputs_r>:
 8005fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	688e      	ldr	r6, [r1, #8]
 8005fa6:	429e      	cmp	r6, r3
 8005fa8:	4682      	mov	sl, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4690      	mov	r8, r2
 8005fae:	461f      	mov	r7, r3
 8005fb0:	d838      	bhi.n	8006024 <__ssputs_r+0x84>
 8005fb2:	898a      	ldrh	r2, [r1, #12]
 8005fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fb8:	d032      	beq.n	8006020 <__ssputs_r+0x80>
 8005fba:	6825      	ldr	r5, [r4, #0]
 8005fbc:	6909      	ldr	r1, [r1, #16]
 8005fbe:	eba5 0901 	sub.w	r9, r5, r1
 8005fc2:	6965      	ldr	r5, [r4, #20]
 8005fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fcc:	3301      	adds	r3, #1
 8005fce:	444b      	add	r3, r9
 8005fd0:	106d      	asrs	r5, r5, #1
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	bf38      	it	cc
 8005fd6:	461d      	movcc	r5, r3
 8005fd8:	0553      	lsls	r3, r2, #21
 8005fda:	d531      	bpl.n	8006040 <__ssputs_r+0xa0>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f000 fb63 	bl	80066a8 <_malloc_r>
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	b950      	cbnz	r0, 8005ffc <__ssputs_r+0x5c>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	f8ca 3000 	str.w	r3, [sl]
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	6921      	ldr	r1, [r4, #16]
 8005ffe:	464a      	mov	r2, r9
 8006000:	f000 fabe 	bl	8006580 <memcpy>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	6126      	str	r6, [r4, #16]
 8006012:	6165      	str	r5, [r4, #20]
 8006014:	444e      	add	r6, r9
 8006016:	eba5 0509 	sub.w	r5, r5, r9
 800601a:	6026      	str	r6, [r4, #0]
 800601c:	60a5      	str	r5, [r4, #8]
 800601e:	463e      	mov	r6, r7
 8006020:	42be      	cmp	r6, r7
 8006022:	d900      	bls.n	8006026 <__ssputs_r+0x86>
 8006024:	463e      	mov	r6, r7
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	4632      	mov	r2, r6
 800602a:	4641      	mov	r1, r8
 800602c:	f000 fab6 	bl	800659c <memmove>
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	1b9b      	subs	r3, r3, r6
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	4433      	add	r3, r6
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e7db      	b.n	8005ff8 <__ssputs_r+0x58>
 8006040:	462a      	mov	r2, r5
 8006042:	f000 fba5 	bl	8006790 <_realloc_r>
 8006046:	4606      	mov	r6, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	d1e1      	bne.n	8006010 <__ssputs_r+0x70>
 800604c:	6921      	ldr	r1, [r4, #16]
 800604e:	4650      	mov	r0, sl
 8006050:	f000 fabe 	bl	80065d0 <_free_r>
 8006054:	e7c7      	b.n	8005fe6 <__ssputs_r+0x46>
	...

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	; 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d50e      	bpl.n	800608a <_svfiprintf_r+0x32>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b963      	cbnz	r3, 800608a <_svfiprintf_r+0x32>
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	f000 fb19 	bl	80066a8 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b920      	cbnz	r0, 8006086 <_svfiprintf_r+0x2e>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e0d1      	b.n	800622a <_svfiprintf_r+0x1d2>
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	616b      	str	r3, [r5, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	2320      	movs	r3, #32
 8006090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006094:	f8cd 800c 	str.w	r8, [sp, #12]
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006244 <_svfiprintf_r+0x1ec>
 800609e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	4623      	mov	r3, r4
 80060a8:	469a      	mov	sl, r3
 80060aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ae:	b10a      	cbz	r2, 80060b4 <_svfiprintf_r+0x5c>
 80060b0:	2a25      	cmp	r2, #37	; 0x25
 80060b2:	d1f9      	bne.n	80060a8 <_svfiprintf_r+0x50>
 80060b4:	ebba 0b04 	subs.w	fp, sl, r4
 80060b8:	d00b      	beq.n	80060d2 <_svfiprintf_r+0x7a>
 80060ba:	465b      	mov	r3, fp
 80060bc:	4622      	mov	r2, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff6d 	bl	8005fa0 <__ssputs_r>
 80060c6:	3001      	adds	r0, #1
 80060c8:	f000 80aa 	beq.w	8006220 <_svfiprintf_r+0x1c8>
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	445a      	add	r2, fp
 80060d0:	9209      	str	r2, [sp, #36]	; 0x24
 80060d2:	f89a 3000 	ldrb.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a2 	beq.w	8006220 <_svfiprintf_r+0x1c8>
 80060dc:	2300      	movs	r3, #0
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e6:	f10a 0a01 	add.w	sl, sl, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4654      	mov	r4, sl
 80060f6:	2205      	movs	r2, #5
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4851      	ldr	r0, [pc, #324]	; (8006244 <_svfiprintf_r+0x1ec>)
 80060fe:	f7fa f877 	bl	80001f0 <memchr>
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	b9d8      	cbnz	r0, 800613e <_svfiprintf_r+0xe6>
 8006106:	06d0      	lsls	r0, r2, #27
 8006108:	bf44      	itt	mi
 800610a:	2320      	movmi	r3, #32
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	0711      	lsls	r1, r2, #28
 8006112:	bf44      	itt	mi
 8006114:	232b      	movmi	r3, #43	; 0x2b
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d015      	beq.n	800614e <_svfiprintf_r+0xf6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4654      	mov	r4, sl
 8006126:	2000      	movs	r0, #0
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4621      	mov	r1, r4
 800612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006132:	3b30      	subs	r3, #48	; 0x30
 8006134:	2b09      	cmp	r3, #9
 8006136:	d94e      	bls.n	80061d6 <_svfiprintf_r+0x17e>
 8006138:	b1b0      	cbz	r0, 8006168 <_svfiprintf_r+0x110>
 800613a:	9207      	str	r2, [sp, #28]
 800613c:	e014      	b.n	8006168 <_svfiprintf_r+0x110>
 800613e:	eba0 0308 	sub.w	r3, r0, r8
 8006142:	fa09 f303 	lsl.w	r3, r9, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	46a2      	mov	sl, r4
 800614c:	e7d2      	b.n	80060f4 <_svfiprintf_r+0x9c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9103      	str	r1, [sp, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbb      	ittet	lt
 800615a:	425b      	neglt	r3, r3
 800615c:	f042 0202 	orrlt.w	r2, r2, #2
 8006160:	9307      	strge	r3, [sp, #28]
 8006162:	9307      	strlt	r3, [sp, #28]
 8006164:	bfb8      	it	lt
 8006166:	9204      	strlt	r2, [sp, #16]
 8006168:	7823      	ldrb	r3, [r4, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d10c      	bne.n	8006188 <_svfiprintf_r+0x130>
 800616e:	7863      	ldrb	r3, [r4, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d135      	bne.n	80061e0 <_svfiprintf_r+0x188>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006254 <_svfiprintf_r+0x1fc>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f82d 	bl	80001f0 <memchr>
 8006196:	b140      	cbz	r0, 80061aa <_svfiprintf_r+0x152>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	fa03 f000 	lsl.w	r0, r3, r0
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	4303      	orrs	r3, r0
 80061a6:	3401      	adds	r4, #1
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ae:	4826      	ldr	r0, [pc, #152]	; (8006248 <_svfiprintf_r+0x1f0>)
 80061b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b4:	2206      	movs	r2, #6
 80061b6:	f7fa f81b 	bl	80001f0 <memchr>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d038      	beq.n	8006230 <_svfiprintf_r+0x1d8>
 80061be:	4b23      	ldr	r3, [pc, #140]	; (800624c <_svfiprintf_r+0x1f4>)
 80061c0:	bb1b      	cbnz	r3, 800620a <_svfiprintf_r+0x1b2>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	3307      	adds	r3, #7
 80061c6:	f023 0307 	bic.w	r3, r3, #7
 80061ca:	3308      	adds	r3, #8
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d0:	4433      	add	r3, r6
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	e767      	b.n	80060a6 <_svfiprintf_r+0x4e>
 80061d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80061da:	460c      	mov	r4, r1
 80061dc:	2001      	movs	r0, #1
 80061de:	e7a5      	b.n	800612c <_svfiprintf_r+0xd4>
 80061e0:	2300      	movs	r3, #0
 80061e2:	3401      	adds	r4, #1
 80061e4:	9305      	str	r3, [sp, #20]
 80061e6:	4619      	mov	r1, r3
 80061e8:	f04f 0c0a 	mov.w	ip, #10
 80061ec:	4620      	mov	r0, r4
 80061ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f2:	3a30      	subs	r2, #48	; 0x30
 80061f4:	2a09      	cmp	r2, #9
 80061f6:	d903      	bls.n	8006200 <_svfiprintf_r+0x1a8>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0c5      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fc:	9105      	str	r1, [sp, #20]
 80061fe:	e7c3      	b.n	8006188 <_svfiprintf_r+0x130>
 8006200:	fb0c 2101 	mla	r1, ip, r1, r2
 8006204:	4604      	mov	r4, r0
 8006206:	2301      	movs	r3, #1
 8006208:	e7f0      	b.n	80061ec <_svfiprintf_r+0x194>
 800620a:	ab03      	add	r3, sp, #12
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	462a      	mov	r2, r5
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <_svfiprintf_r+0x1f8>)
 8006212:	a904      	add	r1, sp, #16
 8006214:	4638      	mov	r0, r7
 8006216:	f3af 8000 	nop.w
 800621a:	1c42      	adds	r2, r0, #1
 800621c:	4606      	mov	r6, r0
 800621e:	d1d6      	bne.n	80061ce <_svfiprintf_r+0x176>
 8006220:	89ab      	ldrh	r3, [r5, #12]
 8006222:	065b      	lsls	r3, r3, #25
 8006224:	f53f af2c 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622a:	b01d      	add	sp, #116	; 0x74
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	ab03      	add	r3, sp, #12
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	462a      	mov	r2, r5
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <_svfiprintf_r+0x1f8>)
 8006238:	a904      	add	r1, sp, #16
 800623a:	4638      	mov	r0, r7
 800623c:	f000 f87a 	bl	8006334 <_printf_i>
 8006240:	e7eb      	b.n	800621a <_svfiprintf_r+0x1c2>
 8006242:	bf00      	nop
 8006244:	08006a40 	.word	0x08006a40
 8006248:	08006a4a 	.word	0x08006a4a
 800624c:	00000000 	.word	0x00000000
 8006250:	08005fa1 	.word	0x08005fa1
 8006254:	08006a46 	.word	0x08006a46

08006258 <_printf_common>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	4616      	mov	r6, r2
 800625e:	4699      	mov	r9, r3
 8006260:	688a      	ldr	r2, [r1, #8]
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006268:	4293      	cmp	r3, r2
 800626a:	bfb8      	it	lt
 800626c:	4613      	movlt	r3, r2
 800626e:	6033      	str	r3, [r6, #0]
 8006270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006274:	4607      	mov	r7, r0
 8006276:	460c      	mov	r4, r1
 8006278:	b10a      	cbz	r2, 800627e <_printf_common+0x26>
 800627a:	3301      	adds	r3, #1
 800627c:	6033      	str	r3, [r6, #0]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	0699      	lsls	r1, r3, #26
 8006282:	bf42      	ittt	mi
 8006284:	6833      	ldrmi	r3, [r6, #0]
 8006286:	3302      	addmi	r3, #2
 8006288:	6033      	strmi	r3, [r6, #0]
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	f015 0506 	ands.w	r5, r5, #6
 8006290:	d106      	bne.n	80062a0 <_printf_common+0x48>
 8006292:	f104 0a19 	add.w	sl, r4, #25
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	6832      	ldr	r2, [r6, #0]
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	42ab      	cmp	r3, r5
 800629e:	dc26      	bgt.n	80062ee <_printf_common+0x96>
 80062a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062a4:	1e13      	subs	r3, r2, #0
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	bf18      	it	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	0692      	lsls	r2, r2, #26
 80062ae:	d42b      	bmi.n	8006308 <_printf_common+0xb0>
 80062b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062b4:	4649      	mov	r1, r9
 80062b6:	4638      	mov	r0, r7
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d01e      	beq.n	80062fc <_printf_common+0xa4>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	68e5      	ldr	r5, [r4, #12]
 80062c2:	6832      	ldr	r2, [r6, #0]
 80062c4:	f003 0306 	and.w	r3, r3, #6
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	bf08      	it	eq
 80062cc:	1aad      	subeq	r5, r5, r2
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	6922      	ldr	r2, [r4, #16]
 80062d2:	bf0c      	ite	eq
 80062d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d8:	2500      	movne	r5, #0
 80062da:	4293      	cmp	r3, r2
 80062dc:	bfc4      	itt	gt
 80062de:	1a9b      	subgt	r3, r3, r2
 80062e0:	18ed      	addgt	r5, r5, r3
 80062e2:	2600      	movs	r6, #0
 80062e4:	341a      	adds	r4, #26
 80062e6:	42b5      	cmp	r5, r6
 80062e8:	d11a      	bne.n	8006320 <_printf_common+0xc8>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e008      	b.n	8006300 <_printf_common+0xa8>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4652      	mov	r2, sl
 80062f2:	4649      	mov	r1, r9
 80062f4:	4638      	mov	r0, r7
 80062f6:	47c0      	blx	r8
 80062f8:	3001      	adds	r0, #1
 80062fa:	d103      	bne.n	8006304 <_printf_common+0xac>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	3501      	adds	r5, #1
 8006306:	e7c6      	b.n	8006296 <_printf_common+0x3e>
 8006308:	18e1      	adds	r1, r4, r3
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	2030      	movs	r0, #48	; 0x30
 800630e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006312:	4422      	add	r2, r4
 8006314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800631c:	3302      	adds	r3, #2
 800631e:	e7c7      	b.n	80062b0 <_printf_common+0x58>
 8006320:	2301      	movs	r3, #1
 8006322:	4622      	mov	r2, r4
 8006324:	4649      	mov	r1, r9
 8006326:	4638      	mov	r0, r7
 8006328:	47c0      	blx	r8
 800632a:	3001      	adds	r0, #1
 800632c:	d0e6      	beq.n	80062fc <_printf_common+0xa4>
 800632e:	3601      	adds	r6, #1
 8006330:	e7d9      	b.n	80062e6 <_printf_common+0x8e>
	...

08006334 <_printf_i>:
 8006334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	7e0f      	ldrb	r7, [r1, #24]
 800633a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800633c:	2f78      	cmp	r7, #120	; 0x78
 800633e:	4691      	mov	r9, r2
 8006340:	4680      	mov	r8, r0
 8006342:	460c      	mov	r4, r1
 8006344:	469a      	mov	sl, r3
 8006346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800634a:	d807      	bhi.n	800635c <_printf_i+0x28>
 800634c:	2f62      	cmp	r7, #98	; 0x62
 800634e:	d80a      	bhi.n	8006366 <_printf_i+0x32>
 8006350:	2f00      	cmp	r7, #0
 8006352:	f000 80d8 	beq.w	8006506 <_printf_i+0x1d2>
 8006356:	2f58      	cmp	r7, #88	; 0x58
 8006358:	f000 80a3 	beq.w	80064a2 <_printf_i+0x16e>
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006364:	e03a      	b.n	80063dc <_printf_i+0xa8>
 8006366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800636a:	2b15      	cmp	r3, #21
 800636c:	d8f6      	bhi.n	800635c <_printf_i+0x28>
 800636e:	a101      	add	r1, pc, #4	; (adr r1, 8006374 <_printf_i+0x40>)
 8006370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006374:	080063cd 	.word	0x080063cd
 8006378:	080063e1 	.word	0x080063e1
 800637c:	0800635d 	.word	0x0800635d
 8006380:	0800635d 	.word	0x0800635d
 8006384:	0800635d 	.word	0x0800635d
 8006388:	0800635d 	.word	0x0800635d
 800638c:	080063e1 	.word	0x080063e1
 8006390:	0800635d 	.word	0x0800635d
 8006394:	0800635d 	.word	0x0800635d
 8006398:	0800635d 	.word	0x0800635d
 800639c:	0800635d 	.word	0x0800635d
 80063a0:	080064ed 	.word	0x080064ed
 80063a4:	08006411 	.word	0x08006411
 80063a8:	080064cf 	.word	0x080064cf
 80063ac:	0800635d 	.word	0x0800635d
 80063b0:	0800635d 	.word	0x0800635d
 80063b4:	0800650f 	.word	0x0800650f
 80063b8:	0800635d 	.word	0x0800635d
 80063bc:	08006411 	.word	0x08006411
 80063c0:	0800635d 	.word	0x0800635d
 80063c4:	0800635d 	.word	0x0800635d
 80063c8:	080064d7 	.word	0x080064d7
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	1d1a      	adds	r2, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	602a      	str	r2, [r5, #0]
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063dc:	2301      	movs	r3, #1
 80063de:	e0a3      	b.n	8006528 <_printf_i+0x1f4>
 80063e0:	6820      	ldr	r0, [r4, #0]
 80063e2:	6829      	ldr	r1, [r5, #0]
 80063e4:	0606      	lsls	r6, r0, #24
 80063e6:	f101 0304 	add.w	r3, r1, #4
 80063ea:	d50a      	bpl.n	8006402 <_printf_i+0xce>
 80063ec:	680e      	ldr	r6, [r1, #0]
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	da03      	bge.n	80063fc <_printf_i+0xc8>
 80063f4:	232d      	movs	r3, #45	; 0x2d
 80063f6:	4276      	negs	r6, r6
 80063f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fc:	485e      	ldr	r0, [pc, #376]	; (8006578 <_printf_i+0x244>)
 80063fe:	230a      	movs	r3, #10
 8006400:	e019      	b.n	8006436 <_printf_i+0x102>
 8006402:	680e      	ldr	r6, [r1, #0]
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800640a:	bf18      	it	ne
 800640c:	b236      	sxthne	r6, r6
 800640e:	e7ef      	b.n	80063f0 <_printf_i+0xbc>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	6820      	ldr	r0, [r4, #0]
 8006414:	1d19      	adds	r1, r3, #4
 8006416:	6029      	str	r1, [r5, #0]
 8006418:	0601      	lsls	r1, r0, #24
 800641a:	d501      	bpl.n	8006420 <_printf_i+0xec>
 800641c:	681e      	ldr	r6, [r3, #0]
 800641e:	e002      	b.n	8006426 <_printf_i+0xf2>
 8006420:	0646      	lsls	r6, r0, #25
 8006422:	d5fb      	bpl.n	800641c <_printf_i+0xe8>
 8006424:	881e      	ldrh	r6, [r3, #0]
 8006426:	4854      	ldr	r0, [pc, #336]	; (8006578 <_printf_i+0x244>)
 8006428:	2f6f      	cmp	r7, #111	; 0x6f
 800642a:	bf0c      	ite	eq
 800642c:	2308      	moveq	r3, #8
 800642e:	230a      	movne	r3, #10
 8006430:	2100      	movs	r1, #0
 8006432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006436:	6865      	ldr	r5, [r4, #4]
 8006438:	60a5      	str	r5, [r4, #8]
 800643a:	2d00      	cmp	r5, #0
 800643c:	bfa2      	ittt	ge
 800643e:	6821      	ldrge	r1, [r4, #0]
 8006440:	f021 0104 	bicge.w	r1, r1, #4
 8006444:	6021      	strge	r1, [r4, #0]
 8006446:	b90e      	cbnz	r6, 800644c <_printf_i+0x118>
 8006448:	2d00      	cmp	r5, #0
 800644a:	d04d      	beq.n	80064e8 <_printf_i+0x1b4>
 800644c:	4615      	mov	r5, r2
 800644e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006452:	fb03 6711 	mls	r7, r3, r1, r6
 8006456:	5dc7      	ldrb	r7, [r0, r7]
 8006458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800645c:	4637      	mov	r7, r6
 800645e:	42bb      	cmp	r3, r7
 8006460:	460e      	mov	r6, r1
 8006462:	d9f4      	bls.n	800644e <_printf_i+0x11a>
 8006464:	2b08      	cmp	r3, #8
 8006466:	d10b      	bne.n	8006480 <_printf_i+0x14c>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07de      	lsls	r6, r3, #31
 800646c:	d508      	bpl.n	8006480 <_printf_i+0x14c>
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	6861      	ldr	r1, [r4, #4]
 8006472:	4299      	cmp	r1, r3
 8006474:	bfde      	ittt	le
 8006476:	2330      	movle	r3, #48	; 0x30
 8006478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800647c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006480:	1b52      	subs	r2, r2, r5
 8006482:	6122      	str	r2, [r4, #16]
 8006484:	f8cd a000 	str.w	sl, [sp]
 8006488:	464b      	mov	r3, r9
 800648a:	aa03      	add	r2, sp, #12
 800648c:	4621      	mov	r1, r4
 800648e:	4640      	mov	r0, r8
 8006490:	f7ff fee2 	bl	8006258 <_printf_common>
 8006494:	3001      	adds	r0, #1
 8006496:	d14c      	bne.n	8006532 <_printf_i+0x1fe>
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	b004      	add	sp, #16
 800649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a2:	4835      	ldr	r0, [pc, #212]	; (8006578 <_printf_i+0x244>)
 80064a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064a8:	6829      	ldr	r1, [r5, #0]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80064b0:	6029      	str	r1, [r5, #0]
 80064b2:	061d      	lsls	r5, r3, #24
 80064b4:	d514      	bpl.n	80064e0 <_printf_i+0x1ac>
 80064b6:	07df      	lsls	r7, r3, #31
 80064b8:	bf44      	itt	mi
 80064ba:	f043 0320 	orrmi.w	r3, r3, #32
 80064be:	6023      	strmi	r3, [r4, #0]
 80064c0:	b91e      	cbnz	r6, 80064ca <_printf_i+0x196>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	f023 0320 	bic.w	r3, r3, #32
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	2310      	movs	r3, #16
 80064cc:	e7b0      	b.n	8006430 <_printf_i+0xfc>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f043 0320 	orr.w	r3, r3, #32
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	2378      	movs	r3, #120	; 0x78
 80064d8:	4828      	ldr	r0, [pc, #160]	; (800657c <_printf_i+0x248>)
 80064da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064de:	e7e3      	b.n	80064a8 <_printf_i+0x174>
 80064e0:	0659      	lsls	r1, r3, #25
 80064e2:	bf48      	it	mi
 80064e4:	b2b6      	uxthmi	r6, r6
 80064e6:	e7e6      	b.n	80064b6 <_printf_i+0x182>
 80064e8:	4615      	mov	r5, r2
 80064ea:	e7bb      	b.n	8006464 <_printf_i+0x130>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	6826      	ldr	r6, [r4, #0]
 80064f0:	6961      	ldr	r1, [r4, #20]
 80064f2:	1d18      	adds	r0, r3, #4
 80064f4:	6028      	str	r0, [r5, #0]
 80064f6:	0635      	lsls	r5, r6, #24
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	d501      	bpl.n	8006500 <_printf_i+0x1cc>
 80064fc:	6019      	str	r1, [r3, #0]
 80064fe:	e002      	b.n	8006506 <_printf_i+0x1d2>
 8006500:	0670      	lsls	r0, r6, #25
 8006502:	d5fb      	bpl.n	80064fc <_printf_i+0x1c8>
 8006504:	8019      	strh	r1, [r3, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	4615      	mov	r5, r2
 800650c:	e7ba      	b.n	8006484 <_printf_i+0x150>
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	602a      	str	r2, [r5, #0]
 8006514:	681d      	ldr	r5, [r3, #0]
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	2100      	movs	r1, #0
 800651a:	4628      	mov	r0, r5
 800651c:	f7f9 fe68 	bl	80001f0 <memchr>
 8006520:	b108      	cbz	r0, 8006526 <_printf_i+0x1f2>
 8006522:	1b40      	subs	r0, r0, r5
 8006524:	6060      	str	r0, [r4, #4]
 8006526:	6863      	ldr	r3, [r4, #4]
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	2300      	movs	r3, #0
 800652c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006530:	e7a8      	b.n	8006484 <_printf_i+0x150>
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	462a      	mov	r2, r5
 8006536:	4649      	mov	r1, r9
 8006538:	4640      	mov	r0, r8
 800653a:	47d0      	blx	sl
 800653c:	3001      	adds	r0, #1
 800653e:	d0ab      	beq.n	8006498 <_printf_i+0x164>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	079b      	lsls	r3, r3, #30
 8006544:	d413      	bmi.n	800656e <_printf_i+0x23a>
 8006546:	68e0      	ldr	r0, [r4, #12]
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	4298      	cmp	r0, r3
 800654c:	bfb8      	it	lt
 800654e:	4618      	movlt	r0, r3
 8006550:	e7a4      	b.n	800649c <_printf_i+0x168>
 8006552:	2301      	movs	r3, #1
 8006554:	4632      	mov	r2, r6
 8006556:	4649      	mov	r1, r9
 8006558:	4640      	mov	r0, r8
 800655a:	47d0      	blx	sl
 800655c:	3001      	adds	r0, #1
 800655e:	d09b      	beq.n	8006498 <_printf_i+0x164>
 8006560:	3501      	adds	r5, #1
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	9903      	ldr	r1, [sp, #12]
 8006566:	1a5b      	subs	r3, r3, r1
 8006568:	42ab      	cmp	r3, r5
 800656a:	dcf2      	bgt.n	8006552 <_printf_i+0x21e>
 800656c:	e7eb      	b.n	8006546 <_printf_i+0x212>
 800656e:	2500      	movs	r5, #0
 8006570:	f104 0619 	add.w	r6, r4, #25
 8006574:	e7f5      	b.n	8006562 <_printf_i+0x22e>
 8006576:	bf00      	nop
 8006578:	08006a51 	.word	0x08006a51
 800657c:	08006a62 	.word	0x08006a62

08006580 <memcpy>:
 8006580:	440a      	add	r2, r1
 8006582:	4291      	cmp	r1, r2
 8006584:	f100 33ff 	add.w	r3, r0, #4294967295
 8006588:	d100      	bne.n	800658c <memcpy+0xc>
 800658a:	4770      	bx	lr
 800658c:	b510      	push	{r4, lr}
 800658e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006596:	4291      	cmp	r1, r2
 8006598:	d1f9      	bne.n	800658e <memcpy+0xe>
 800659a:	bd10      	pop	{r4, pc}

0800659c <memmove>:
 800659c:	4288      	cmp	r0, r1
 800659e:	b510      	push	{r4, lr}
 80065a0:	eb01 0402 	add.w	r4, r1, r2
 80065a4:	d902      	bls.n	80065ac <memmove+0x10>
 80065a6:	4284      	cmp	r4, r0
 80065a8:	4623      	mov	r3, r4
 80065aa:	d807      	bhi.n	80065bc <memmove+0x20>
 80065ac:	1e43      	subs	r3, r0, #1
 80065ae:	42a1      	cmp	r1, r4
 80065b0:	d008      	beq.n	80065c4 <memmove+0x28>
 80065b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ba:	e7f8      	b.n	80065ae <memmove+0x12>
 80065bc:	4402      	add	r2, r0
 80065be:	4601      	mov	r1, r0
 80065c0:	428a      	cmp	r2, r1
 80065c2:	d100      	bne.n	80065c6 <memmove+0x2a>
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ce:	e7f7      	b.n	80065c0 <memmove+0x24>

080065d0 <_free_r>:
 80065d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d2:	2900      	cmp	r1, #0
 80065d4:	d044      	beq.n	8006660 <_free_r+0x90>
 80065d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065da:	9001      	str	r0, [sp, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f1a1 0404 	sub.w	r4, r1, #4
 80065e2:	bfb8      	it	lt
 80065e4:	18e4      	addlt	r4, r4, r3
 80065e6:	f000 f913 	bl	8006810 <__malloc_lock>
 80065ea:	4a1e      	ldr	r2, [pc, #120]	; (8006664 <_free_r+0x94>)
 80065ec:	9801      	ldr	r0, [sp, #4]
 80065ee:	6813      	ldr	r3, [r2, #0]
 80065f0:	b933      	cbnz	r3, 8006600 <_free_r+0x30>
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	6014      	str	r4, [r2, #0]
 80065f6:	b003      	add	sp, #12
 80065f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065fc:	f000 b90e 	b.w	800681c <__malloc_unlock>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d908      	bls.n	8006616 <_free_r+0x46>
 8006604:	6825      	ldr	r5, [r4, #0]
 8006606:	1961      	adds	r1, r4, r5
 8006608:	428b      	cmp	r3, r1
 800660a:	bf01      	itttt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	1949      	addeq	r1, r1, r5
 8006612:	6021      	streq	r1, [r4, #0]
 8006614:	e7ed      	b.n	80065f2 <_free_r+0x22>
 8006616:	461a      	mov	r2, r3
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	b10b      	cbz	r3, 8006620 <_free_r+0x50>
 800661c:	42a3      	cmp	r3, r4
 800661e:	d9fa      	bls.n	8006616 <_free_r+0x46>
 8006620:	6811      	ldr	r1, [r2, #0]
 8006622:	1855      	adds	r5, r2, r1
 8006624:	42a5      	cmp	r5, r4
 8006626:	d10b      	bne.n	8006640 <_free_r+0x70>
 8006628:	6824      	ldr	r4, [r4, #0]
 800662a:	4421      	add	r1, r4
 800662c:	1854      	adds	r4, r2, r1
 800662e:	42a3      	cmp	r3, r4
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	d1e0      	bne.n	80065f6 <_free_r+0x26>
 8006634:	681c      	ldr	r4, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	6053      	str	r3, [r2, #4]
 800663a:	4421      	add	r1, r4
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	e7da      	b.n	80065f6 <_free_r+0x26>
 8006640:	d902      	bls.n	8006648 <_free_r+0x78>
 8006642:	230c      	movs	r3, #12
 8006644:	6003      	str	r3, [r0, #0]
 8006646:	e7d6      	b.n	80065f6 <_free_r+0x26>
 8006648:	6825      	ldr	r5, [r4, #0]
 800664a:	1961      	adds	r1, r4, r5
 800664c:	428b      	cmp	r3, r1
 800664e:	bf04      	itt	eq
 8006650:	6819      	ldreq	r1, [r3, #0]
 8006652:	685b      	ldreq	r3, [r3, #4]
 8006654:	6063      	str	r3, [r4, #4]
 8006656:	bf04      	itt	eq
 8006658:	1949      	addeq	r1, r1, r5
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	6054      	str	r4, [r2, #4]
 800665e:	e7ca      	b.n	80065f6 <_free_r+0x26>
 8006660:	b003      	add	sp, #12
 8006662:	bd30      	pop	{r4, r5, pc}
 8006664:	20000728 	.word	0x20000728

08006668 <sbrk_aligned>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	4e0e      	ldr	r6, [pc, #56]	; (80066a4 <sbrk_aligned+0x3c>)
 800666c:	460c      	mov	r4, r1
 800666e:	6831      	ldr	r1, [r6, #0]
 8006670:	4605      	mov	r5, r0
 8006672:	b911      	cbnz	r1, 800667a <sbrk_aligned+0x12>
 8006674:	f000 f8bc 	bl	80067f0 <_sbrk_r>
 8006678:	6030      	str	r0, [r6, #0]
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 f8b7 	bl	80067f0 <_sbrk_r>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d00a      	beq.n	800669c <sbrk_aligned+0x34>
 8006686:	1cc4      	adds	r4, r0, #3
 8006688:	f024 0403 	bic.w	r4, r4, #3
 800668c:	42a0      	cmp	r0, r4
 800668e:	d007      	beq.n	80066a0 <sbrk_aligned+0x38>
 8006690:	1a21      	subs	r1, r4, r0
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f8ac 	bl	80067f0 <_sbrk_r>
 8006698:	3001      	adds	r0, #1
 800669a:	d101      	bne.n	80066a0 <sbrk_aligned+0x38>
 800669c:	f04f 34ff 	mov.w	r4, #4294967295
 80066a0:	4620      	mov	r0, r4
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	2000072c 	.word	0x2000072c

080066a8 <_malloc_r>:
 80066a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	4607      	mov	r7, r0
 80066be:	db01      	blt.n	80066c4 <_malloc_r+0x1c>
 80066c0:	42a9      	cmp	r1, r5
 80066c2:	d905      	bls.n	80066d0 <_malloc_r+0x28>
 80066c4:	230c      	movs	r3, #12
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	2600      	movs	r6, #0
 80066ca:	4630      	mov	r0, r6
 80066cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d0:	4e2e      	ldr	r6, [pc, #184]	; (800678c <_malloc_r+0xe4>)
 80066d2:	f000 f89d 	bl	8006810 <__malloc_lock>
 80066d6:	6833      	ldr	r3, [r6, #0]
 80066d8:	461c      	mov	r4, r3
 80066da:	bb34      	cbnz	r4, 800672a <_malloc_r+0x82>
 80066dc:	4629      	mov	r1, r5
 80066de:	4638      	mov	r0, r7
 80066e0:	f7ff ffc2 	bl	8006668 <sbrk_aligned>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	4604      	mov	r4, r0
 80066e8:	d14d      	bne.n	8006786 <_malloc_r+0xde>
 80066ea:	6834      	ldr	r4, [r6, #0]
 80066ec:	4626      	mov	r6, r4
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d140      	bne.n	8006774 <_malloc_r+0xcc>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	4631      	mov	r1, r6
 80066f6:	4638      	mov	r0, r7
 80066f8:	eb04 0803 	add.w	r8, r4, r3
 80066fc:	f000 f878 	bl	80067f0 <_sbrk_r>
 8006700:	4580      	cmp	r8, r0
 8006702:	d13a      	bne.n	800677a <_malloc_r+0xd2>
 8006704:	6821      	ldr	r1, [r4, #0]
 8006706:	3503      	adds	r5, #3
 8006708:	1a6d      	subs	r5, r5, r1
 800670a:	f025 0503 	bic.w	r5, r5, #3
 800670e:	3508      	adds	r5, #8
 8006710:	2d0c      	cmp	r5, #12
 8006712:	bf38      	it	cc
 8006714:	250c      	movcc	r5, #12
 8006716:	4629      	mov	r1, r5
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff ffa5 	bl	8006668 <sbrk_aligned>
 800671e:	3001      	adds	r0, #1
 8006720:	d02b      	beq.n	800677a <_malloc_r+0xd2>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	442b      	add	r3, r5
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	e00e      	b.n	8006748 <_malloc_r+0xa0>
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	1b52      	subs	r2, r2, r5
 800672e:	d41e      	bmi.n	800676e <_malloc_r+0xc6>
 8006730:	2a0b      	cmp	r2, #11
 8006732:	d916      	bls.n	8006762 <_malloc_r+0xba>
 8006734:	1961      	adds	r1, r4, r5
 8006736:	42a3      	cmp	r3, r4
 8006738:	6025      	str	r5, [r4, #0]
 800673a:	bf18      	it	ne
 800673c:	6059      	strne	r1, [r3, #4]
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	bf08      	it	eq
 8006742:	6031      	streq	r1, [r6, #0]
 8006744:	5162      	str	r2, [r4, r5]
 8006746:	604b      	str	r3, [r1, #4]
 8006748:	4638      	mov	r0, r7
 800674a:	f104 060b 	add.w	r6, r4, #11
 800674e:	f000 f865 	bl	800681c <__malloc_unlock>
 8006752:	f026 0607 	bic.w	r6, r6, #7
 8006756:	1d23      	adds	r3, r4, #4
 8006758:	1af2      	subs	r2, r6, r3
 800675a:	d0b6      	beq.n	80066ca <_malloc_r+0x22>
 800675c:	1b9b      	subs	r3, r3, r6
 800675e:	50a3      	str	r3, [r4, r2]
 8006760:	e7b3      	b.n	80066ca <_malloc_r+0x22>
 8006762:	6862      	ldr	r2, [r4, #4]
 8006764:	42a3      	cmp	r3, r4
 8006766:	bf0c      	ite	eq
 8006768:	6032      	streq	r2, [r6, #0]
 800676a:	605a      	strne	r2, [r3, #4]
 800676c:	e7ec      	b.n	8006748 <_malloc_r+0xa0>
 800676e:	4623      	mov	r3, r4
 8006770:	6864      	ldr	r4, [r4, #4]
 8006772:	e7b2      	b.n	80066da <_malloc_r+0x32>
 8006774:	4634      	mov	r4, r6
 8006776:	6876      	ldr	r6, [r6, #4]
 8006778:	e7b9      	b.n	80066ee <_malloc_r+0x46>
 800677a:	230c      	movs	r3, #12
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	4638      	mov	r0, r7
 8006780:	f000 f84c 	bl	800681c <__malloc_unlock>
 8006784:	e7a1      	b.n	80066ca <_malloc_r+0x22>
 8006786:	6025      	str	r5, [r4, #0]
 8006788:	e7de      	b.n	8006748 <_malloc_r+0xa0>
 800678a:	bf00      	nop
 800678c:	20000728 	.word	0x20000728

08006790 <_realloc_r>:
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	4680      	mov	r8, r0
 8006796:	4614      	mov	r4, r2
 8006798:	460e      	mov	r6, r1
 800679a:	b921      	cbnz	r1, 80067a6 <_realloc_r+0x16>
 800679c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	4611      	mov	r1, r2
 80067a2:	f7ff bf81 	b.w	80066a8 <_malloc_r>
 80067a6:	b92a      	cbnz	r2, 80067b4 <_realloc_r+0x24>
 80067a8:	f7ff ff12 	bl	80065d0 <_free_r>
 80067ac:	4625      	mov	r5, r4
 80067ae:	4628      	mov	r0, r5
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	f000 f838 	bl	8006828 <_malloc_usable_size_r>
 80067b8:	4284      	cmp	r4, r0
 80067ba:	4607      	mov	r7, r0
 80067bc:	d802      	bhi.n	80067c4 <_realloc_r+0x34>
 80067be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067c2:	d812      	bhi.n	80067ea <_realloc_r+0x5a>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff ff6e 	bl	80066a8 <_malloc_r>
 80067cc:	4605      	mov	r5, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0ed      	beq.n	80067ae <_realloc_r+0x1e>
 80067d2:	42bc      	cmp	r4, r7
 80067d4:	4622      	mov	r2, r4
 80067d6:	4631      	mov	r1, r6
 80067d8:	bf28      	it	cs
 80067da:	463a      	movcs	r2, r7
 80067dc:	f7ff fed0 	bl	8006580 <memcpy>
 80067e0:	4631      	mov	r1, r6
 80067e2:	4640      	mov	r0, r8
 80067e4:	f7ff fef4 	bl	80065d0 <_free_r>
 80067e8:	e7e1      	b.n	80067ae <_realloc_r+0x1e>
 80067ea:	4635      	mov	r5, r6
 80067ec:	e7df      	b.n	80067ae <_realloc_r+0x1e>
	...

080067f0 <_sbrk_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	; (800680c <_sbrk_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fa fe34 	bl	8001468 <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_sbrk_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_sbrk_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20000730 	.word	0x20000730

08006810 <__malloc_lock>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__malloc_lock+0x8>)
 8006812:	f000 b811 	b.w	8006838 <__retarget_lock_acquire_recursive>
 8006816:	bf00      	nop
 8006818:	20000734 	.word	0x20000734

0800681c <__malloc_unlock>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__malloc_unlock+0x8>)
 800681e:	f000 b80c 	b.w	800683a <__retarget_lock_release_recursive>
 8006822:	bf00      	nop
 8006824:	20000734 	.word	0x20000734

08006828 <_malloc_usable_size_r>:
 8006828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682c:	1f18      	subs	r0, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfbc      	itt	lt
 8006832:	580b      	ldrlt	r3, [r1, r0]
 8006834:	18c0      	addlt	r0, r0, r3
 8006836:	4770      	bx	lr

08006838 <__retarget_lock_acquire_recursive>:
 8006838:	4770      	bx	lr

0800683a <__retarget_lock_release_recursive>:
 800683a:	4770      	bx	lr

0800683c <_init>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	bf00      	nop
 8006840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006842:	bc08      	pop	{r3}
 8006844:	469e      	mov	lr, r3
 8006846:	4770      	bx	lr

08006848 <_fini>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr
