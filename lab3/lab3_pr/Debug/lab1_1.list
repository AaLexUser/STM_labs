
lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00000520  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b0  200006b0  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001027e  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002547  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  00032988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023de5  00000000  00000000  00034330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a25  00000000  00000000  00058115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fb8  00000000  00000000  00068b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140af2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b04  00000000  00000000  00140b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000190 	.word	0x20000190
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005170 	.word	0x08005170

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000194 	.word	0x20000194
 80001ec:	08005170 	.word	0x08005170

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005ec:	f043 0310 	orr.w	r3, r3, #16
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x10c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0310 	and.w	r3, r3, #16
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_GPIO_Init+0x10c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0x10c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_GPIO_Init+0x10c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_GPIO_Init+0x110>)
 800065a:	f001 fbeb 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800065e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_GPIO_Init+0x114>)
 8000674:	f001 fa32 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000678:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x110>)
 8000692:	f001 fa23 	bl	8001adc <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40020800 	.word	0x40020800

080006ac <data_collecter>:
	send_req = 0;
	already_printed = 0;
	last_data = 0;
}

void data_collecter(char* buf, int len){
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	for(int i = 0;i < len; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e01a      	b.n	80006f2 <data_collecter+0x46>
		datas[last_data] = buf[i];
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	441a      	add	r2, r3
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <data_collecter+0x5c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	7811      	ldrb	r1, [r2, #0]
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <data_collecter+0x60>)
 80006ca:	54d1      	strb	r1, [r2, r3]
		last_data = (last_data + 1) % 1000;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <data_collecter+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <data_collecter+0x64>)
 80006d4:	fb83 1302 	smull	r1, r3, r3, r2
 80006d8:	1199      	asrs	r1, r3, #6
 80006da:	17d3      	asrs	r3, r2, #31
 80006dc:	1acb      	subs	r3, r1, r3
 80006de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e2:	fb01 f303 	mul.w	r3, r1, r3
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <data_collecter+0x5c>)
 80006ea:	6013      	str	r3, [r2, #0]
	for(int i = 0;i < len; i++){
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dbe0      	blt.n	80006bc <data_collecter+0x10>
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	20000604 	.word	0x20000604
 800070c:	20000218 	.word	0x20000218
 8000710:	10624dd3 	.word	0x10624dd3

08000714 <transend_data_IT>:

void transend_data_IT(char* buf, int len) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	if(send_req){
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <transend_data_IT+0x38>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <transend_data_IT+0x1c>
		data_collecter(buf, len);
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ffbf 	bl	80006ac <data_collecter>
		return;
 800072e:	e009      	b.n	8000744 <transend_data_IT+0x30>
	}
	send_req = 1;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <transend_data_IT+0x38>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_IT( &huart6, (uint8_t *) buf, len);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <transend_data_IT+0x3c>)
 8000740:	f003 f843 	bl	80037ca <HAL_UART_Transmit_IT>
}
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000214 	.word	0x20000214
 8000750:	20000658 	.word	0x20000658

08000754 <print_collected_data>:

void print_collected_data(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if(already_printed != last_data){
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <print_collected_data+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <print_collected_data+0x58>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d018      	beq.n	8000796 <print_collected_data+0x42>
		transend_data_IT(&datas[already_printed], 1);
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <print_collected_data+0x54>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <print_collected_data+0x5c>)
 800076a:	4413      	add	r3, r2
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ffd0 	bl	8000714 <transend_data_IT>
		already_printed = (already_printed + 1) % 1000;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <print_collected_data+0x54>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <print_collected_data+0x60>)
 800077c:	fb83 1302 	smull	r1, r3, r3, r2
 8000780:	1199      	asrs	r1, r3, #6
 8000782:	17d3      	asrs	r3, r2, #31
 8000784:	1acb      	subs	r3, r1, r3
 8000786:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <print_collected_data+0x54>)
 8000792:	6013      	str	r3, [r2, #0]
	}
	else {
		already_printed = 0;
		last_data       = 0;
	}
}
 8000794:	e005      	b.n	80007a2 <print_collected_data+0x4e>
		already_printed = 0;
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <print_collected_data+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
		last_data       = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <print_collected_data+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000600 	.word	0x20000600
 80007ac:	20000604 	.word	0x20000604
 80007b0:	20000218 	.word	0x20000218
 80007b4:	10624dd3 	.word	0x10624dd3

080007b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  in_buffer_IT[len_in_buf] = el;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_UART_RxCpltCallback+0x5c>)
 80007c6:	7811      	ldrb	r1, [r2, #0]
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <HAL_UART_RxCpltCallback+0x60>)
 80007ca:	54d1      	strb	r1, [r2, r3]
  transend_data_IT(&el, 1);
 80007cc:	2101      	movs	r1, #1
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <HAL_UART_RxCpltCallback+0x5c>)
 80007d0:	f7ff ffa0 	bl	8000714 <transend_data_IT>
  if(in_buffer_IT[len_in_buf] == '\r'){
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <HAL_UART_RxCpltCallback+0x60>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	2b0d      	cmp	r3, #13
 80007de:	d10d      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x44>
	  int local_len = len_in_buf;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
	  deshifr(in_buffer_IT, &local_len, &fsm_obj);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <HAL_UART_RxCpltCallback+0x64>)
 80007ec:	4619      	mov	r1, r3
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <HAL_UART_RxCpltCallback+0x60>)
 80007f0:	f000 fd66 	bl	80012c0 <deshifr>
	  len_in_buf = 0;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
  }
  else{
	  len_in_buf = len_in_buf + 1;
  }
}
 80007fa:	e004      	b.n	8000806 <HAL_UART_RxCpltCallback+0x4e>
	  len_in_buf = len_in_buf + 1;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_UART_RxCpltCallback+0x58>)
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000210 	.word	0x20000210
 8000814:	200001d8 	.word	0x200001d8
 8000818:	200001dc 	.word	0x200001dc
 800081c:	200001ac 	.word	0x200001ac

08000820 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	send_req = 0;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_UART_TxCpltCallback+0x1c>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	print_collected_data();
 800082e:	f7ff ff91 	bl	8000754 <print_collected_data>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000214 	.word	0x20000214

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fef5 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f86d 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff fea1 	bl	8000594 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000852:	f000 fe4b 	bl	80014ec <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000856:	f000 faa5 	bl	8000da4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  fsm_obj.button_cnt = 0;
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <main+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  fsm_obj.button_pressed_flag = 0;
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <main+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  fsm_obj.red_time = 6000;
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <main+0xc0>)
 8000868:	f241 7270 	movw	r2, #6000	; 0x1770
 800086c:	601a      	str	r2, [r3, #0]
  fsm_obj.other_time = fsm_obj.red_time / 4;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <main+0xc0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	da00      	bge.n	8000878 <main+0x38>
 8000876:	3303      	adds	r3, #3
 8000878:	109b      	asrs	r3, r3, #2
 800087a:	461a      	mov	r2, r3
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <main+0xc0>)
 800087e:	605a      	str	r2, [r3, #4]
  fsm_obj.current_red = fsm_obj.red_time;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <main+0xc0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <main+0xc0>)
 8000886:	6093      	str	r3, [r2, #8]
  fsm_obj.start_time = 0;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <main+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  fsm_obj.wait_time = 0;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <main+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  fsm_obj.state = RED;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <main+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  fsm_obj.fsm_flag = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <main+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  fsm_obj.interupt_enable = 0;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <main+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  fsm_obj.work_mode = 1;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <main+0xc0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	621a      	str	r2, [r3, #32]

  char in_buffer[50];
  int  in_curlen = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  int first_iter = -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <main+0xc4>)
 80008bc:	f001 ffd4 	bl	8002868 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0xc0>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <main+0xc0>)
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <main+0xc8>)
 80008ca:	9303      	str	r3, [sp, #12]
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main+0xcc>)
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <main+0xd0>)
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <main+0xd4>)
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <main+0xd8>)
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <main+0xdc>)
 80008dc:	f000 fbb4 	bl	8001048 <nextStateMachine>
	//if(fsm_obj.work_mode)
	// check_button(&fsm_obj.button_cnt, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.button_pressed_flag);
    if(HAL_OK == HAL_UART_Receive( &huart6, (uint8_t *) &el, 1, 10 )) {
 80008e0:	230a      	movs	r3, #10
 80008e2:	2201      	movs	r2, #1
 80008e4:	490e      	ldr	r1, [pc, #56]	; (8000920 <main+0xe0>)
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <main+0xe4>)
 80008e8:	f002 fecd 	bl	8003686 <HAL_UART_Receive>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1e6      	bne.n	80008c0 <main+0x80>
    	analize_symb(el);
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <main+0xe0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8be 	bl	8000a78 <analize_symb>
	nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 80008fc:	e7e0      	b.n	80008c0 <main+0x80>
 80008fe:	bf00      	nop
 8000900:	200001ac 	.word	0x200001ac
 8000904:	2000060c 	.word	0x2000060c
 8000908:	200001c4 	.word	0x200001c4
 800090c:	200001bc 	.word	0x200001bc
 8000910:	200001c0 	.word	0x200001c0
 8000914:	200001b8 	.word	0x200001b8
 8000918:	200001b4 	.word	0x200001b4
 800091c:	200001d0 	.word	0x200001d0
 8000920:	200001d8 	.word	0x200001d8
 8000924:	20000658 	.word	0x20000658

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ff7a 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <SystemClock_Config+0xd0>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <SystemClock_Config+0xd0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xd4>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800099c:	230f      	movs	r3, #15
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009a0:	2390      	movs	r3, #144	; 0x90
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa59 	bl	8001e68 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009bc:	f000 f820 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2103      	movs	r1, #3
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fcba 	bl	8002358 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ea:	f000 f809 	bl	8000a00 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <change_now_oktav>:
 *  Created on: Nov 22, 2024
 *      Author: romay
 */
#include "music_pr.h"

void change_now_oktav(int val) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	int new_val = now_oktav + val;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <change_now_oktav+0x30>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
	if(new_val >= 0 && new_val < 9)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db05      	blt.n	8000a30 <change_now_oktav+0x24>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	dc02      	bgt.n	8000a30 <change_now_oktav+0x24>
		now_oktav = new_val;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <change_now_oktav+0x30>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000000 	.word	0x20000000

08000a40 <change_music_time>:

void change_music_time(int val) {
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	int new_music_time = music_time + val;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <change_music_time+0x34>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
	if(new_music_time >= 10 && new_music_time <= 5000)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	dd07      	ble.n	8000a68 <change_music_time+0x28>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	dc02      	bgt.n	8000a68 <change_music_time+0x28>
		music_time = new_music_time;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <change_music_time+0x34>)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20000004 	.word	0x20000004

08000a78 <analize_symb>:

void analize_symb(char el){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0a0      	sub	sp, #128	; 0x80
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	if(el >= '1' && el <= '7'){
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b30      	cmp	r3, #48	; 0x30
 8000a86:	d909      	bls.n	8000a9c <analize_symb+0x24>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b37      	cmp	r3, #55	; 0x37
 8000a8c:	d806      	bhi.n	8000a9c <analize_symb+0x24>
		int note_to_ring = el - '1';
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	3b31      	subs	r3, #49	; 0x31
 8000a92:	67fb      	str	r3, [r7, #124]	; 0x7c
		execute_one_oktav(note_to_ring);
 8000a94:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a96:	f000 f86f 	bl	8000b78 <execute_one_oktav>
	if(el >= '1' && el <= '7'){
 8000a9a:	e05c      	b.n	8000b56 <analize_symb+0xde>
	}
	else
	if(el == '+' || el == '-'){
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b2b      	cmp	r3, #43	; 0x2b
 8000aa0:	d002      	beq.n	8000aa8 <analize_symb+0x30>
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b2d      	cmp	r3, #45	; 0x2d
 8000aa6:	d11c      	bne.n	8000ae2 <analize_symb+0x6a>
		if(el == '+')
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b2b      	cmp	r3, #43	; 0x2b
 8000aac:	d103      	bne.n	8000ab6 <analize_symb+0x3e>
			change_now_oktav(1);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ffac 	bl	8000a0c <change_now_oktav>
 8000ab4:	e003      	b.n	8000abe <analize_symb+0x46>
		else
			change_now_oktav(-1);
 8000ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aba:	f7ff ffa7 	bl	8000a0c <change_now_oktav>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "change oktav_num, now is %d\r", now_oktav);
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <analize_symb+0xe8>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4927      	ldr	r1, [pc, #156]	; (8000b64 <analize_symb+0xec>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 feb9 	bl	8004840 <siprintf>
 8000ace:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f107 010c 	add.w	r1, r7, #12
 8000ad8:	231e      	movs	r3, #30
 8000ada:	4823      	ldr	r0, [pc, #140]	; (8000b68 <analize_symb+0xf0>)
 8000adc:	f002 fd41 	bl	8003562 <HAL_UART_Transmit>
	if(el == '+' || el == '-'){
 8000ae0:	e039      	b.n	8000b56 <analize_symb+0xde>
	}
	else
	if(el == 'A' || el == 'a') {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b41      	cmp	r3, #65	; 0x41
 8000ae6:	d002      	beq.n	8000aee <analize_symb+0x76>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b61      	cmp	r3, #97	; 0x61
 8000aec:	d11c      	bne.n	8000b28 <analize_symb+0xb0>
		if(el == 'A')
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b41      	cmp	r3, #65	; 0x41
 8000af2:	d103      	bne.n	8000afc <analize_symb+0x84>
			change_music_time(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f7ff ffa3 	bl	8000a40 <change_music_time>
 8000afa:	e003      	b.n	8000b04 <analize_symb+0x8c>
		else
			change_music_time(-10);
 8000afc:	f06f 0009 	mvn.w	r0, #9
 8000b00:	f7ff ff9e 	bl	8000a40 <change_music_time>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "change time, now is %d\r", music_time);
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <analize_symb+0xf4>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4918      	ldr	r1, [pc, #96]	; (8000b70 <analize_symb+0xf8>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fe96 	bl	8004840 <siprintf>
 8000b14:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	231e      	movs	r3, #30
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <analize_symb+0xf0>)
 8000b22:	f002 fd1e 	bl	8003562 <HAL_UART_Transmit>
	if(el == 'A' || el == 'a') {
 8000b26:	e016      	b.n	8000b56 <analize_symb+0xde>
	}
	else
	if(el == '\r'){
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b0d      	cmp	r3, #13
 8000b2c:	d102      	bne.n	8000b34 <analize_symb+0xbc>
		execute_melody();
 8000b2e:	f000 f881 	bl	8000c34 <execute_melody>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "wrong symbol %c\r", el);
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
	}
}
 8000b32:	e010      	b.n	8000b56 <analize_symb+0xde>
		transmitted_data_len = sprintf(out_buffer, "wrong symbol %c\r", el);
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <analize_symb+0xfc>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fe7f 	bl	8004840 <siprintf>
 8000b42:	67b8      	str	r0, [r7, #120]	; 0x78
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f107 010c 	add.w	r1, r7, #12
 8000b4c:	231e      	movs	r3, #30
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <analize_symb+0xf0>)
 8000b50:	f002 fd07 	bl	8003562 <HAL_UART_Transmit>
}
 8000b54:	e7ff      	b.n	8000b56 <analize_symb+0xde>
 8000b56:	bf00      	nop
 8000b58:	3780      	adds	r7, #128	; 0x80
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	080051a4 	.word	0x080051a4
 8000b68:	20000658 	.word	0x20000658
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	080051c4 	.word	0x080051c4
 8000b74:	080051dc 	.word	0x080051dc

08000b78 <execute_one_oktav>:


void execute_one_oktav(int note_to_ring){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0a0      	sub	sp, #128	; 0x80
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
	char out_buffer[100];
	int transmitted_data_len;
	transmitted_data_len = sprintf(out_buffer, "note %s is ringning on %d oktav, time is %d\r", noteNames[note_to_ring], now_oktav, music_time);
 8000b80:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <execute_one_oktav+0xa0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <execute_one_oktav+0xa4>)
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <execute_one_oktav+0xa8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f107 000c 	add.w	r0, r7, #12
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	460b      	mov	r3, r1
 8000b98:	4922      	ldr	r1, [pc, #136]	; (8000c24 <execute_one_oktav+0xac>)
 8000b9a:	f003 fe51 	bl	8004840 <siprintf>
 8000b9e:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 8000ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	f107 010c 	add.w	r1, r7, #12
 8000ba8:	231e      	movs	r3, #30
 8000baa:	481f      	ldr	r0, [pc, #124]	; (8000c28 <execute_one_oktav+0xb0>)
 8000bac:	f002 fcd9 	bl	8003562 <HAL_UART_Transmit>
	htim1.Instance->ARR = oktava_info[now_oktav][note_to_ring] - 1;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <execute_one_oktav+0xa4>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	491d      	ldr	r1, [pc, #116]	; (8000c2c <execute_one_oktav+0xb4>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <execute_one_oktav+0xb8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->CCR1 = (oktava_info[now_oktav][note_to_ring] - 1) / 2;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <execute_one_oktav+0xa4>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4916      	ldr	r1, [pc, #88]	; (8000c2c <execute_one_oktav+0xb4>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <execute_one_oktav+0xb8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0852      	lsrs	r2, r2, #1
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
	int start_time = HAL_GetTick();
 8000bea:	f000 fd89 	bl	8001700 <HAL_GetTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	673b      	str	r3, [r7, #112]	; 0x70
	while(HAL_GetTick() - start_time < music_time){
 8000bf2:	bf00      	nop
 8000bf4:	f000 fd84 	bl	8001700 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <execute_one_oktav+0xa8>)
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d3f6      	bcc.n	8000bf4 <execute_one_oktav+0x7c>

	}
	htim1.Instance->CCR1 = 0;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <execute_one_oktav+0xb8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c0e:	bf00      	nop
 8000c10:	3778      	adds	r7, #120	; 0x78
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000104 	.word	0x20000104
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004
 8000c24:	080051f0 	.word	0x080051f0
 8000c28:	20000658 	.word	0x20000658
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	2000060c 	.word	0x2000060c

08000c34 <execute_melody>:
void execute_melody(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7;i++){
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e005      	b.n	8000c4c <execute_melody+0x18>
		execute_one_oktav(i);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff99 	bl	8000b78 <execute_one_oktav>
	for(int i = 0; i < 7;i++){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	ddf6      	ble.n	8000c40 <execute_melody+0xc>
	}
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 fcee 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART6_IRQHandler+0x10>)
 8000d06:	f002 fe49 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000658 	.word	0x20000658

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f003 fd4a 	bl	80047dc <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20030000 	.word	0x20030000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000608 	.word	0x20000608
 8000d7c:	200006b0 	.word	0x200006b0

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <MX_TIM1_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	; 0x58
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2220      	movs	r2, #32
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fd27 	bl	8004830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000de4:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <MX_TIM1_Init+0x140>)
 8000de6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000dea:	22c7      	movs	r2, #199	; 0xc7
 8000dec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2298;
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000df6:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8000dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0e:	4834      	ldr	r0, [pc, #208]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e10:	f001 fc82 	bl	8002718 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e1a:	f7ff fdf1 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e2c:	f001 fea6 	bl	8002b7c <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e36:	f7ff fde3 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e3c:	f001 fcbb 	bl	80027b6 <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e46:	f7ff fddb 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e56:	4619      	mov	r1, r3
 8000e58:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e5a:	f002 fa67 	bl	800332c <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e64:	f7ff fdcc 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1149;
 8000e6c:	f240 437d 	movw	r3, #1149	; 0x47d
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000e90:	f001 fdb2 	bl	80029f8 <HAL_TIM_PWM_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e9a:	f7ff fdb1 	bl	8000a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000ec2:	f002 faaf 	bl	8003424 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000ecc:	f7ff fd98 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM1_Init+0x13c>)
 8000ed2:	f000 f82b 	bl	8000f2c <HAL_TIM_MspPostInit>

}
 8000ed6:	bf00      	nop
 8000ed8:	3758      	adds	r7, #88	; 0x58
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000060c 	.word	0x2000060c
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10d      	bne.n	8000f16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_TIM_Base_MspInit+0x40>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_TIM_Base_MspInit+0x40>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <HAL_TIM_Base_MspInit+0x40>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_TIM_MspPostInit+0x68>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d11e      	bne.n	8000f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_MspPostInit+0x6c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_TIM_MspPostInit+0x70>)
 8000f88:	f000 fda8 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <set_LED>:
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void set_LED(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
	/* нам не нужны асерты, гарантируется работа
	 * старшие 16 бит бсра, отвечаю за сброс значения, младшие за установку*/
	  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <set_LED+0x1e>
	  {
	    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
	  }
	  else
	  {
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
	  }
};
 8000fbc:	e003      	b.n	8000fc6 <set_LED+0x26>
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
};
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <getColorName>:
	else
	  bitstatus = GPIO_PIN_RESET;
	return bitstatus;
}

const char* getColorName(TrafficLight c) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
    switch (c) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d813      	bhi.n	800100c <getColorName+0x38>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <getColorName+0x18>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	08001009 	.word	0x08001009
        case RED: return "RED";
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <getColorName+0x48>)
 8000ffe:	e006      	b.n	800100e <getColorName+0x3a>
        case GREEN: return "GREEN";
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <getColorName+0x4c>)
 8001002:	e004      	b.n	800100e <getColorName+0x3a>
        case GREEN_BLINK: return "GREEN_BLINK";
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <getColorName+0x50>)
 8001006:	e002      	b.n	800100e <getColorName+0x3a>
        case YELLOW: return "YELLOW";
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <getColorName+0x54>)
 800100a:	e000      	b.n	800100e <getColorName+0x3a>
        default: return "UNKNOWN";
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <getColorName+0x58>)
    }
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	08005220 	.word	0x08005220
 8001020:	08005224 	.word	0x08005224
 8001024:	0800522c 	.word	0x0800522c
 8001028:	08005238 	.word	0x08005238
 800102c:	08005240 	.word	0x08005240

08001030 <reset_LEDS>:
		return 1;
	}
	return 0;
}

void reset_LEDS(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	set_LED(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <reset_LEDS+0x14>)
 800103c:	f7ff ffb0 	bl	8000fa0 <set_LED>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020c00 	.word	0x40020c00

08001048 <nextStateMachine>:

void nextStateMachine(TrafficLight* light, int red_t, int other_t, int* current_red, int* flag, int* waiting_time, int* button_flag_button, int* start_time) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
	static int prev = 0;
    switch (*light) {
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	f200 80f5 	bhi.w	800124a <nextStateMachine+0x202>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <nextStateMachine+0x20>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001079 	.word	0x08001079
 800106c:	080010ff 	.word	0x080010ff
 8001070:	08001155 	.word	0x08001155
 8001074:	080011f7 	.word	0x080011f7
        case RED:
        	if(*flag == 1){ // ждём
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d11f      	bne.n	80010c0 <nextStateMachine+0x78>
        		if(HAL_GetTick() >= *waiting_time){
 8001080:	f000 fb3e 	bl	8001700 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d305      	bcc.n	800109a <nextStateMachine+0x52>
        			*light = GREEN;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
        		}
        		if(*button_flag_button){
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80dc 	beq.w	800125c <nextStateMachine+0x214>
        			(*button_flag_button) = 0;
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
        			(*waiting_time) = (*start_time) + (*current_red);
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	441a      	add	r2, r3
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	601a      	str	r2, [r3, #0]
        			(*current_red) = red_t;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
        		*button_flag_button = 0;
        		(*current_red) = red_t;
        		*flag = 1;
        	}
            break;
 80010be:	e0cd      	b.n	800125c <nextStateMachine+0x214>
        		reset_LEDS();
 80010c0:	f7ff ffb6 	bl	8001030 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ca:	486a      	ldr	r0, [pc, #424]	; (8001274 <nextStateMachine+0x22c>)
 80010cc:	f7ff ff68 	bl	8000fa0 <set_LED>
        		(*start_time) = HAL_GetTick();
 80010d0:	f000 fb16 	bl	8001700 <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	441a      	add	r2, r3
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	601a      	str	r2, [r3, #0]
        		*button_flag_button = 0;
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
        		(*current_red) = red_t;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
            break;
 80010fc:	e0ae      	b.n	800125c <nextStateMachine+0x214>
        case GREEN:
        	if(*flag == 1){ // ждём
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d10e      	bne.n	8001124 <nextStateMachine+0xdc>
        		if(HAL_GetTick() >= *waiting_time){
 8001106:	f000 fafb 	bl	8001700 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	f0c0 80a5 	bcc.w	8001260 <nextStateMachine+0x218>
        			*light = GREEN_BLINK;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2202      	movs	r2, #2
 800111a:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 8001122:	e09d      	b.n	8001260 <nextStateMachine+0x218>
        		reset_LEDS();
 8001124:	f7ff ff84 	bl	8001030 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	4851      	ldr	r0, [pc, #324]	; (8001274 <nextStateMachine+0x22c>)
 8001130:	f7ff ff36 	bl	8000fa0 <set_LED>
        		(*start_time) = HAL_GetTick();
 8001134:	f000 fae4 	bl	8001700 <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	441a      	add	r2, r3
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
            break;
 8001152:	e085      	b.n	8001260 <nextStateMachine+0x218>
        case GREEN_BLINK:
        	if(*flag == 1){ // ждём
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d12e      	bne.n	80011ba <nextStateMachine+0x172>
        		if(HAL_GetTick() >= *waiting_time){
 800115c:	f000 fad0 	bl	8001700 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d305      	bcc.n	8001176 <nextStateMachine+0x12e>
        			*light = YELLOW;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2203      	movs	r2, #3
 800116e:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
        		}
        		if(HAL_GetTick() - prev >= (other_t) / 8) {
 8001176:	f000 fac3 	bl	8001700 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <nextStateMachine+0x230>)
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	1a9a      	subs	r2, r3, r2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da00      	bge.n	800118a <nextStateMachine+0x142>
 8001188:	3307      	adds	r3, #7
 800118a:	10db      	asrs	r3, r3, #3
 800118c:	429a      	cmp	r2, r3
 800118e:	d369      	bcc.n	8001264 <nextStateMachine+0x21c>
        			prev = HAL_GetTick();
 8001190:	f000 fab6 	bl	8001700 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <nextStateMachine+0x230>)
 800119a:	601a      	str	r2, [r3, #0]
        			//inline toggle
        			uint32_t odr = GPIOD->ODR;
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <nextStateMachine+0x22c>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	617b      	str	r3, [r7, #20]
        			GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b2:	4930      	ldr	r1, [pc, #192]	; (8001274 <nextStateMachine+0x22c>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	618b      	str	r3, [r1, #24]
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		prev = HAL_GetTick();
        		*flag = 1;
        	}
            break;
 80011b8:	e054      	b.n	8001264 <nextStateMachine+0x21c>
        		reset_LEDS();
 80011ba:	f7ff ff39 	bl	8001030 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c4:	482b      	ldr	r0, [pc, #172]	; (8001274 <nextStateMachine+0x22c>)
 80011c6:	f7ff feeb 	bl	8000fa0 <set_LED>
        		(*start_time) = HAL_GetTick();
 80011ca:	f000 fa99 	bl	8001700 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	441a      	add	r2, r3
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	601a      	str	r2, [r3, #0]
        		prev = HAL_GetTick();
 80011e2:	f000 fa8d 	bl	8001700 <HAL_GetTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <nextStateMachine+0x230>)
 80011ec:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
            break;
 80011f4:	e036      	b.n	8001264 <nextStateMachine+0x21c>
        case YELLOW:
        	if(*flag == 1){ // ждём
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d10d      	bne.n	800121a <nextStateMachine+0x1d2>
        		if(HAL_GetTick() >= *waiting_time){
 80011fe:	f000 fa7f 	bl	8001700 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d32d      	bcc.n	8001268 <nextStateMachine+0x220>
        			*light = RED;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 8001218:	e026      	b.n	8001268 <nextStateMachine+0x220>
        		reset_LEDS();
 800121a:	f7ff ff09 	bl	8001030 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001224:	4813      	ldr	r0, [pc, #76]	; (8001274 <nextStateMachine+0x22c>)
 8001226:	f7ff febb 	bl	8000fa0 <set_LED>
        		(*start_time) = HAL_GetTick();
 800122a:	f000 fa69 	bl	8001700 <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	441a      	add	r2, r3
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
            break;
 8001248:	e00e      	b.n	8001268 <nextStateMachine+0x220>
        default:
        	reset_LEDS();
 800124a:	f7ff fef1 	bl	8001030 <reset_LEDS>
        	*flag = 0;
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
        	*light = RED;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
            break;
 800125a:	e006      	b.n	800126a <nextStateMachine+0x222>
            break;
 800125c:	bf00      	nop
 800125e:	e004      	b.n	800126a <nextStateMachine+0x222>
            break;
 8001260:	bf00      	nop
 8001262:	e002      	b.n	800126a <nextStateMachine+0x222>
            break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <nextStateMachine+0x222>
            break;
 8001268:	bf00      	nop
    }
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020c00 	.word	0x40020c00
 8001278:	20000654 	.word	0x20000654

0800127c <enable_interrupt>:
		(*current_red) = other_t;
		(*button_flag_button) = 1;
	}
}

void enable_interrupt(struct mech_data* tfl_obj) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001284:	2047      	movs	r0, #71	; 0x47
 8001286:	f000 fb62 	bl	800194e <HAL_NVIC_EnableIRQ>
	tfl_obj->interupt_enable = 1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <disable_interrupt>:

void disable_interrupt(struct mech_data* tfl_obj) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive(&huart6);
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <disable_interrupt+0x24>)
 80012a2:	f002 fad7 	bl	8003854 <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 80012a6:	2047      	movs	r0, #71	; 0x47
 80012a8:	f000 fb5f 	bl	800196a <HAL_NVIC_DisableIRQ>
	tfl_obj->interupt_enable = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000658 	.word	0x20000658

080012c0 <deshifr>:

void deshifr(char* in_buf, int* cur_length, struct mech_data* tfl_obj){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b0a9      	sub	sp, #164	; 0xa4
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	int cmp_res = strncmp(in_buf, "!", 1);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <deshifr+0x208>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(cmp_res == 0){
 80012da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12c      	bne.n	800133c <deshifr+0x7c>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "current_state is %s, timeout is %d, mode is %d, I is %d\r", getColorName(tfl_obj->state), tfl_obj->red_time, tfl_obj->work_mode, tfl_obj->interupt_enable);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe73 	bl	8000fd4 <getColorName>
 80012ee:	4604      	mov	r4, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012fc:	f107 0014 	add.w	r0, r7, #20
 8001300:	9201      	str	r2, [sp, #4]
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	460b      	mov	r3, r1
 8001306:	4622      	mov	r2, r4
 8001308:	4970      	ldr	r1, [pc, #448]	; (80014cc <deshifr+0x20c>)
 800130a:	f003 fa99 	bl	8004840 <siprintf>
 800130e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if(tfl_obj->interupt_enable) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <deshifr+0x6a>
			transend_data_IT(out_buffer, transmitted_data_len);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9f6 	bl	8000714 <transend_data_IT>
 8001328:	e008      	b.n	800133c <deshifr+0x7c>
		}
		else{
			HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 30 );
 800132a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800132e:	b29a      	uxth	r2, r3
 8001330:	f107 0114 	add.w	r1, r7, #20
 8001334:	231e      	movs	r3, #30
 8001336:	4866      	ldr	r0, [pc, #408]	; (80014d0 <deshifr+0x210>)
 8001338:	f002 f913 	bl	8003562 <HAL_UART_Transmit>
		}
	}
	char* set_mode_flag = strstr(in_buf, "set mode ");
 800133c:	4965      	ldr	r1, [pc, #404]	; (80014d4 <deshifr+0x214>)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f003 fab2 	bl	80048a8 <strstr>
 8001344:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	if(set_mode_flag) {
 8001348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800134c:	2b00      	cmp	r3, #0
 800134e:	d02d      	beq.n	80013ac <deshifr+0xec>
		int val = (*(set_mode_flag + 9) - '0');
 8001350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001354:	3309      	adds	r3, #9
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3b30      	subs	r3, #48	; 0x30
 800135a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		tfl_obj->work_mode = val;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001364:	621a      	str	r2, [r3, #32]
		if(val == 0)
 8001366:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <deshifr+0xb4>
			tfl_obj->button_pressed_flag = 0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "data change to %d\r", val);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800137c:	4956      	ldr	r1, [pc, #344]	; (80014d8 <deshifr+0x218>)
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fa5e 	bl	8004840 <siprintf>
 8001384:	67f8      	str	r0, [r7, #124]	; 0x7c
		if(tfl_obj->interupt_enable){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <deshifr+0xdc>
			transend_data_IT(out_buffer, transmitted_data_len);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f9bd 	bl	8000714 <transend_data_IT>
 800139a:	e007      	b.n	80013ac <deshifr+0xec>
		}
		else{
		  HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 800139c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f107 0114 	add.w	r1, r7, #20
 80013a4:	230a      	movs	r3, #10
 80013a6:	484a      	ldr	r0, [pc, #296]	; (80014d0 <deshifr+0x210>)
 80013a8:	f002 f8db 	bl	8003562 <HAL_UART_Transmit>
		}
	}
	char* set_red_time = strstr(in_buf, "set timeout ");
 80013ac:	494b      	ldr	r1, [pc, #300]	; (80014dc <deshifr+0x21c>)
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f003 fa7a 	bl	80048a8 <strstr>
 80013b4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(set_red_time) {
 80013b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d062      	beq.n	8001486 <deshifr+0x1c6>
		set_red_time = set_red_time + 12;
 80013c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013c4:	330c      	adds	r3, #12
 80013c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		int val = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while(*set_red_time != '\0' && *set_red_time != '\r') {
 80013d0:	e012      	b.n	80013f8 <deshifr+0x138>
			val = val * 10 + (*set_red_time - '0');
 80013d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3b30      	subs	r3, #48	; 0x30
 80013e8:	4413      	add	r3, r2
 80013ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			set_red_time++;
 80013ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013f2:	3301      	adds	r3, #1
 80013f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(*set_red_time != '\0' && *set_red_time != '\r') {
 80013f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <deshifr+0x14c>
 8001402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b0d      	cmp	r3, #13
 800140a:	d1e2      	bne.n	80013d2 <deshifr+0x112>
		}
		if(tfl_obj->current_red == tfl_obj->red_time)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d104      	bne.n	8001422 <deshifr+0x162>
			tfl_obj->current_red = val;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	e008      	b.n	8001434 <deshifr+0x174>
		else
			tfl_obj->current_red = val / 4;
 8001422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001426:	2b00      	cmp	r3, #0
 8001428:	da00      	bge.n	800142c <deshifr+0x16c>
 800142a:	3303      	adds	r3, #3
 800142c:	109b      	asrs	r3, r3, #2
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
		tfl_obj->red_time = val;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800143a:	601a      	str	r2, [r3, #0]
		tfl_obj->other_time = tfl_obj-> red_time / 4;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <deshifr+0x186>
 8001444:	3303      	adds	r3, #3
 8001446:	109b      	asrs	r3, r3, #2
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "red timeout change to %d\r", tfl_obj->current_red);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4922      	ldr	r1, [pc, #136]	; (80014e0 <deshifr+0x220>)
 8001458:	4618      	mov	r0, r3
 800145a:	f003 f9f1 	bl	8004840 <siprintf>
 800145e:	67b8      	str	r0, [r7, #120]	; 0x78
		if(tfl_obj->interupt_enable){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <deshifr+0x1b6>
	      transend_data_IT(out_buffer, transmitted_data_len);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f950 	bl	8000714 <transend_data_IT>
 8001474:	e007      	b.n	8001486 <deshifr+0x1c6>
		}
		else{
		  HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 8001476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0114 	add.w	r1, r7, #20
 800147e:	230a      	movs	r3, #10
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <deshifr+0x210>)
 8001482:	f002 f86e 	bl	8003562 <HAL_UART_Transmit>
		}
	}

	cmp_res = strncmp(in_buf, "set interrupts on", 17);
 8001486:	2211      	movs	r2, #17
 8001488:	4916      	ldr	r1, [pc, #88]	; (80014e4 <deshifr+0x224>)
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f003 f9f8 	bl	8004880 <strncmp>
 8001490:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if(cmp_res == 0) {
 8001494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <deshifr+0x1e2>
		enable_interrupt(tfl_obj);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff feed 	bl	800127c <enable_interrupt>
	}

	cmp_res = strncmp(in_buf, "set interrupts off", 18);
 80014a2:	2212      	movs	r2, #18
 80014a4:	4910      	ldr	r1, [pc, #64]	; (80014e8 <deshifr+0x228>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f003 f9ea 	bl	8004880 <strncmp>
 80014ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if(cmp_res == 0) {
 80014b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <deshifr+0x200>
		disable_interrupt(tfl_obj);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff feed 	bl	8001298 <disable_interrupt>
	}

	return;
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
}
 80014c2:	379c      	adds	r7, #156	; 0x9c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	08005248 	.word	0x08005248
 80014cc:	0800524c 	.word	0x0800524c
 80014d0:	20000658 	.word	0x20000658
 80014d4:	08005288 	.word	0x08005288
 80014d8:	08005294 	.word	0x08005294
 80014dc:	080052a8 	.word	0x080052a8
 80014e0:	080052b8 	.word	0x080052b8
 80014e4:	080052d4 	.word	0x080052d4
 80014e8:	080052e8 	.word	0x080052e8

080014ec <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_USART6_UART_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 80014f8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80014fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART6_UART_Init+0x4c>)
 8001524:	f001 ffd0 	bl	80034c8 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800152e:	f7ff fa67 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000658 	.word	0x20000658
 800153c:	40011400 	.word	0x40011400

08001540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0x94>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d133      	bne.n	80015ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_UART_MspInit+0x98>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_UART_MspInit+0x98>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x98>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0x98>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_UART_MspInit+0x98>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_UART_MspInit+0x98>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015aa:	2308      	movs	r3, #8
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <HAL_UART_MspInit+0x9c>)
 80015b6:	f000 fa91 	bl	8001adc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2047      	movs	r0, #71	; 0x47
 80015c0:	f000 f9a9 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015c4:	2047      	movs	r0, #71	; 0x47
 80015c6:	f000 f9c2 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40011400 	.word	0x40011400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160a:	f7ff fbb9 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f003 f8eb 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff f915 	bl	8000840 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001624:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8001628:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800162c:	200006b0 	.word	0x200006b0

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f94f 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff faf8 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f975 	bl	8001986 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f92f 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000120 	.word	0x20000120
 80016d0:	20000128 	.word	0x20000128
 80016d4:	20000124 	.word	0x20000124

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000128 	.word	0x20000128
 80016fc:	2000069c 	.word	0x2000069c

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000069c 	.word	0x2000069c

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db12      	blt.n	80017f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	490a      	ldr	r1, [pc, #40]	; (80017fc <__NVIC_DisableIRQ+0x44>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	3320      	adds	r3, #32
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017e4:	f3bf 8f4f 	dsb	sy
}
 80017e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
}
 80017ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff05 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff1a 	bl	8001760 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff0d 	bl	800177c <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff1d 	bl	80017b8 <__NVIC_DisableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ff94 	bl	80018bc <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fea8 	bl	8001700 <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d008      	beq.n	80019d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e052      	b.n	8001a76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0216 	bic.w	r2, r2, #22
 80019de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <HAL_DMA_Abort+0x62>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0208 	bic.w	r2, r2, #8
 8001a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a20:	e013      	b.n	8001a4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a22:	f7ff fe6d 	bl	8001700 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d90c      	bls.n	8001a4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e015      	b.n	8001a76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e4      	bne.n	8001a22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	223f      	movs	r2, #63	; 0x3f
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00c      	b.n	8001ab6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e177      	b.n	8001de8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8166 	bne.w	8001de2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d017      	beq.n	8001bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d123      	bne.n	8001c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80c0 	beq.w	8001de2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_GPIO_Init+0x324>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_GPIO_Init+0x324>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_GPIO_Init+0x324>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7e:	4a61      	ldr	r2, [pc, #388]	; (8001e04 <HAL_GPIO_Init+0x328>)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <HAL_GPIO_Init+0x32c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d037      	beq.n	8001d1a <HAL_GPIO_Init+0x23e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a57      	ldr	r2, [pc, #348]	; (8001e0c <HAL_GPIO_Init+0x330>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_GPIO_Init+0x23a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x334>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x236>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a55      	ldr	r2, [pc, #340]	; (8001e14 <HAL_GPIO_Init+0x338>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x232>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <HAL_GPIO_Init+0x33c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x22e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a53      	ldr	r2, [pc, #332]	; (8001e1c <HAL_GPIO_Init+0x340>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x22a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x344>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x226>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x348>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x222>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_GPIO_Init+0x34c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x21e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_GPIO_Init+0x350>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x21a>
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	e012      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	e010      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00e      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e00c      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x328>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5e:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_GPIO_Init+0x354>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	f67f ae84 	bls.w	8001af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40021400 	.word	0x40021400
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022400 	.word	0x40022400
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e50:	e003      	b.n	8001e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e267      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d075      	beq.n	8001f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00c      	beq.n	8001eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d157      	bne.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e242      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x74>
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6f      	ldr	r2, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001f00:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fbee 	bl	8001700 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fbea 	bl	8001700 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e207      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fbda 	bl	8001700 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fbd6 	bl	8001700 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1f3      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1c7      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4937      	ldr	r1, [pc, #220]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff fb8f 	bl	8001700 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fb8b 	bl	8001700 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1a8      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4925      	ldr	r1, [pc, #148]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff fb6e 	bl	8001700 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff fb6a 	bl	8001700 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e187      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d036      	beq.n	80020c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff fb4e 	bl	8001700 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff fb4a 	bl	8001700 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e167      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x200>
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb37 	bl	8001700 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	e00e      	b.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fb33 	bl	8001700 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d907      	bls.n	80020b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e150      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470000 	.word	0x42470000
 80020b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ea      	bne.n	8002096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8097 	beq.w	80021fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b7d      	ldr	r3, [pc, #500]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a7c      	ldr	r2, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b77      	ldr	r3, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b74      	ldr	r3, [pc, #464]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a73      	ldr	r2, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff faf3 	bl	8001700 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff faef 	bl	8001700 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e10c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x2ea>
 8002144:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x30c>
 800215a:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a5e      	ldr	r2, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002174:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0304 	bic.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d015      	beq.n	80021c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fab4 	bl	8001700 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fab0 	bl	8001700 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0cb      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ee      	beq.n	800219c <HAL_RCC_OscConfig+0x334>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7ff fa9e 	bl	8001700 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff fa9a 	bl	8001700 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0b5      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ee      	bne.n	80021c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a1 	beq.w	8002348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d05c      	beq.n	80022cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d141      	bne.n	800229e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fa6e 	bl	8001700 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff fa6a 	bl	8001700 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e087      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	491b      	ldr	r1, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fa43 	bl	8001700 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fa3f 	bl	8001700 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e05c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x416>
 800229c:	e054      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fa2c 	bl	8001700 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff fa28 	bl	8001700 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e045      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x444>
 80022ca:	e03d      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e038      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4ec>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d028      	beq.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d121      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11a      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	4293      	cmp	r3, r2
 800231e:	d111      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff f95a 	bl	8001700 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7ff f956 	bl	8001700 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f8ba 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	080052fc 	.word	0x080052fc
 800251c:	20000120 	.word	0x20000120
 8002520:	20000124 	.word	0x20000124

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b090      	sub	sp, #64	; 0x40
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d00d      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 8002548:	2b08      	cmp	r3, #8
 800254a:	f200 80a1 	bhi.w	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x34>
 8002552:	2b04      	cmp	r3, #4
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x3a>
 8002556:	e09b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800255c:	e09b      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002562:	e098      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256e:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	2200      	movs	r2, #0
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	627a      	str	r2, [r7, #36]	; 0x24
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800258c:	2100      	movs	r1, #0
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002590:	fb03 f201 	mul.w	r2, r3, r1
 8002594:	2300      	movs	r3, #0
 8002596:	fb00 f303 	mul.w	r3, r0, r3
 800259a:	4413      	add	r3, r2
 800259c:	4a43      	ldr	r2, [pc, #268]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 800259e:	fba0 1202 	umull	r1, r2, r0, r2
 80025a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a4:	460a      	mov	r2, r1
 80025a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025aa:	4413      	add	r3, r2
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	2200      	movs	r2, #0
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025be:	f7fd fe67 	bl	8000290 <__aeabi_uldivmod>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4613      	mov	r3, r2
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	e053      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	617a      	str	r2, [r7, #20]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025de:	f04f 0b00 	mov.w	fp, #0
 80025e2:	4652      	mov	r2, sl
 80025e4:	465b      	mov	r3, fp
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ebb2 080a 	subs.w	r8, r2, sl
 80025fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002616:	ebb2 0408 	subs.w	r4, r2, r8
 800261a:	eb63 0509 	sbc.w	r5, r3, r9
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	00eb      	lsls	r3, r5, #3
 8002628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262c:	00e2      	lsls	r2, r4, #3
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	eb14 030a 	adds.w	r3, r4, sl
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	eb45 030b 	adc.w	r3, r5, fp
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800264a:	4629      	mov	r1, r5
 800264c:	028b      	lsls	r3, r1, #10
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002654:	4621      	mov	r1, r4
 8002656:	028a      	lsls	r2, r1, #10
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	2200      	movs	r2, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002668:	f7fd fe12 	bl	8000290 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002698:	4618      	mov	r0, r3
 800269a:	3740      	adds	r7, #64	; 0x40
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	017d7840 	.word	0x017d7840

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000120 	.word	0x20000120

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	0800530c 	.word	0x0800530c

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	0800530c 	.word	0x0800530c

08002718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e041      	b.n	80027ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fbd2 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f000 fad8 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e041      	b.n	800284c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f839 	bl	8002854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f000 fa89 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_TIM_PWM_Start+0x24>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e022      	b.n	80028d2 <HAL_TIM_PWM_Start+0x6a>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d109      	bne.n	80028a6 <HAL_TIM_PWM_Start+0x3e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e015      	b.n	80028d2 <HAL_TIM_PWM_Start+0x6a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d109      	bne.n	80028c0 <HAL_TIM_PWM_Start+0x58>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e008      	b.n	80028d2 <HAL_TIM_PWM_Start+0x6a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07c      	b.n	80029d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <HAL_TIM_PWM_Start+0x82>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e8:	e013      	b.n	8002912 <HAL_TIM_PWM_Start+0xaa>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d104      	bne.n	80028fa <HAL_TIM_PWM_Start+0x92>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f8:	e00b      	b.n	8002912 <HAL_TIM_PWM_Start+0xaa>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d104      	bne.n	800290a <HAL_TIM_PWM_Start+0xa2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	e003      	b.n	8002912 <HAL_TIM_PWM_Start+0xaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fce0 	bl	80032e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2d      	ldr	r2, [pc, #180]	; (80029dc <HAL_TIM_PWM_Start+0x174>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_TIM_PWM_Start+0xcc>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2c      	ldr	r2, [pc, #176]	; (80029e0 <HAL_TIM_PWM_Start+0x178>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_TIM_PWM_Start+0xd0>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_TIM_PWM_Start+0xd2>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <HAL_TIM_PWM_Start+0x174>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d01d      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_TIM_PWM_Start+0x17c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <HAL_TIM_PWM_Start+0x180>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <HAL_TIM_PWM_Start+0x184>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_PWM_Start+0x178>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <HAL_TIM_PWM_Start+0x188>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIM_PWM_Start+0x136>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_PWM_Start+0x18c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d010      	beq.n	80029d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	e007      	b.n	80029d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40010400 	.word	0x40010400
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40001800 	.word	0x40001800

080029f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0ae      	b.n	8002b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	f200 809f 	bhi.w	8002b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002b65 	.word	0x08002b65
 8002a34:	08002b65 	.word	0x08002b65
 8002a38:	08002b65 	.word	0x08002b65
 8002a3c:	08002aa1 	.word	0x08002aa1
 8002a40:	08002b65 	.word	0x08002b65
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	08002b65 	.word	0x08002b65
 8002a4c:	08002ae3 	.word	0x08002ae3
 8002a50:	08002b65 	.word	0x08002b65
 8002a54:	08002b65 	.word	0x08002b65
 8002a58:	08002b65 	.word	0x08002b65
 8002a5c:	08002b23 	.word	0x08002b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f9f0 	bl	8002e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e064      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fa40 	bl	8002f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e043      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa95 	bl	8003018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e023      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fae9 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
      break;
 8002b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_ConfigClockSource+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0b4      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x186>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd0:	d03e      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0xd4>
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	f200 8087 	bhi.w	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	f000 8086 	beq.w	8002cee <HAL_TIM_ConfigClockSource+0x172>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d87f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b70      	cmp	r3, #112	; 0x70
 8002bea:	d01a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0xa6>
 8002bec:	2b70      	cmp	r3, #112	; 0x70
 8002bee:	d87b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d050      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x11a>
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d877      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d03c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xfa>
 8002bfc:	2b50      	cmp	r3, #80	; 0x50
 8002bfe:	d873      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d058      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x13a>
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d86f      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d064      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b30      	cmp	r3, #48	; 0x30
 8002c0e:	d86b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d060      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d867      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d05a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	e062      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f000 fb35 	bl	80032a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
      break;
 8002c4e:	e04f      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6899      	ldr	r1, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f000 fb1e 	bl	80032a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e03c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 fa92 	bl	80031ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2150      	movs	r1, #80	; 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 faeb 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8002c94:	e02c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f000 fab1 	bl	800320a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2160      	movs	r1, #96	; 0x60
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fadb 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e01c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f000 fa72 	bl	80031ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 facb 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e00c      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fac2 	bl	800326a <TIM_ITRx_SetConfig>
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      break;
 8002cec:	e000      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <TIM_Base_SetConfig+0x114>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d00f      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3d      	ldr	r2, [pc, #244]	; (8002e24 <TIM_Base_SetConfig+0x118>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <TIM_Base_SetConfig+0x11c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <TIM_Base_SetConfig+0x120>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <TIM_Base_SetConfig+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2f      	ldr	r2, [pc, #188]	; (8002e20 <TIM_Base_SetConfig+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02b      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d027      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <TIM_Base_SetConfig+0x118>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d023      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <TIM_Base_SetConfig+0x11c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <TIM_Base_SetConfig+0x120>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <TIM_Base_SetConfig+0x124>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a28      	ldr	r2, [pc, #160]	; (8002e34 <TIM_Base_SetConfig+0x128>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <TIM_Base_SetConfig+0x12c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <TIM_Base_SetConfig+0x130>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <TIM_Base_SetConfig+0x134>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <TIM_Base_SetConfig+0x138>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <TIM_Base_SetConfig+0x13c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40010400 	.word	0x40010400
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800
 8002e40:	40001800 	.word	0x40001800
 8002e44:	40001c00 	.word	0x40001c00
 8002e48:	40002000 	.word	0x40002000

08002e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 0302 	bic.w	r3, r3, #2
 8002e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <TIM_OC1_SetConfig+0xd8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_OC1_SetConfig+0x64>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <TIM_OC1_SetConfig+0xdc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10c      	bne.n	8002eca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0308 	bic.w	r3, r3, #8
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC1_SetConfig+0xd8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_OC1_SetConfig+0x8e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <TIM_OC1_SetConfig+0xdc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d111      	bne.n	8002efe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	621a      	str	r2, [r3, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010400 	.word	0x40010400

08002f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_OC2_SetConfig+0xe4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC2_SetConfig+0x68>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_OC2_SetConfig+0xe8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10d      	bne.n	8002fb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <TIM_OC2_SetConfig+0xe4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC2_SetConfig+0x94>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <TIM_OC2_SetConfig+0xe8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d113      	bne.n	8002fe8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40010400 	.word	0x40010400

08003018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <TIM_OC3_SetConfig+0xe0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_OC3_SetConfig+0x66>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a20      	ldr	r2, [pc, #128]	; (80030fc <TIM_OC3_SetConfig+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10d      	bne.n	800309a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <TIM_OC3_SetConfig+0xe0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC3_SetConfig+0x92>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a15      	ldr	r2, [pc, #84]	; (80030fc <TIM_OC3_SetConfig+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	621a      	str	r2, [r3, #32]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40010400 	.word	0x40010400

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <TIM_OC4_SetConfig+0xa4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC4_SetConfig+0x68>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <TIM_OC4_SetConfig+0xa8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d109      	bne.n	800317c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800316e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40010400 	.word	0x40010400

080031ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0201 	bic.w	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 030a 	bic.w	r3, r3, #10
 80031e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	031b      	lsls	r3, r3, #12
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	f043 0307 	orr.w	r3, r3, #7
 800328c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	021a      	lsls	r2, r3, #8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2201      	movs	r2, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003340:	2302      	movs	r3, #2
 8003342:	e05a      	b.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d01d      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10c      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40010400 	.word	0x40010400
 800341c:	40014000 	.word	0x40014000
 8003420:	40001800 	.word	0x40001800

08003424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e03d      	b.n	80034bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e03f      	b.n	800355a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe f826 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	; 0x24
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fef1 	bl	80042f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
 8003566:	af02      	add	r7, sp, #8
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	d17c      	bne.n	800367c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_UART_Transmit+0x2c>
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e075      	b.n	800367e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Transmit+0x3e>
 800359c:	2302      	movs	r3, #2
 800359e:	e06e      	b.n	800367e <HAL_UART_Transmit+0x11c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2221      	movs	r2, #33	; 0x21
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035b6:	f7fe f8a3 	bl	8001700 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d108      	bne.n	80035e4 <HAL_UART_Transmit+0x82>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	e003      	b.n	80035ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035f4:	e02a      	b.n	800364c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fc6f 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e036      	b.n	800367e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	3302      	adds	r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e007      	b.n	800363e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1cf      	bne.n	80035f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2140      	movs	r1, #64	; 0x40
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fc3f 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e006      	b.n	800367e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b08a      	sub	sp, #40	; 0x28
 800368a:	af02      	add	r7, sp, #8
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 808c 	bne.w	80037c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive+0x2e>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e084      	b.n	80037c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Receive+0x40>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e07d      	b.n	80037c2 <HAL_UART_Receive+0x13c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2222      	movs	r2, #34	; 0x22
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fe f80d 	bl	8001700 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d108      	bne.n	8003710 <HAL_UART_Receive+0x8a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e003      	b.n	8003718 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003720:	e043      	b.n	80037aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2120      	movs	r1, #32
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fbd9 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e042      	b.n	80037c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	b29a      	uxth	r2, r3
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	3302      	adds	r3, #2
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e01f      	b.n	800379c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d007      	beq.n	8003776 <HAL_UART_Receive+0xf0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_UART_Receive+0xfe>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e008      	b.n	8003796 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	b2da      	uxtb	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3301      	adds	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1b6      	bne.n	8003722 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d130      	bne.n	8003846 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_UART_Transmit_IT+0x26>
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e029      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Transmit_IT+0x38>
 80037fe:	2302      	movs	r3, #2
 8003800:	e022      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003840:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b09a      	sub	sp, #104	; 0x68
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003872:	667b      	str	r3, [r7, #100]	; 0x64
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800387c:	657a      	str	r2, [r7, #84]	; 0x54
 800387e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b0:	643a      	str	r2, [r7, #64]	; 0x40
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	61fb      	str	r3, [r7, #28]
   return(result);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d136      	bne.n	800397c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	60bb      	str	r3, [r7, #8]
   return(result);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003924:	65bb      	str	r3, [r7, #88]	; 0x58
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392e:	61ba      	str	r2, [r7, #24]
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	613b      	str	r3, [r7, #16]
   return(result);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e5      	bne.n	800390e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	2200      	movs	r2, #0
 8003950:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f821 	bl	800199e <HAL_DMA_Abort>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe f8ab 	bl	8001ac2 <HAL_DMA_GetError>
 800396c:	4603      	mov	r3, r0
 800396e:	2b20      	cmp	r3, #32
 8003970:	d104      	bne.n	800397c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2210      	movs	r2, #16
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e00a      	b.n	8003992 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3768      	adds	r7, #104	; 0x68
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0ba      	sub	sp, #232	; 0xe8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fbbf 	bl	800417e <UART_Receive_IT>
      return;
 8003a00:	e256      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80de 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
 8003a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80d1 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
 8003a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
 8003a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0208 	orr.w	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 81ed 	beq.w	8003ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fb4a 	bl	800417e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_UART_IRQHandler+0x17a>
 8003b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04f      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa52 	bl	8003fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d141      	bne.n	8003bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1d9      	bne.n	8003b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_UART_IRQHandler+0x3dc>)
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd ff77 	bl	8001a7e <HAL_DMA_Abort_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e00e      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f986 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00a      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f982 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e006      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f97e 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bc2:	e170      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	bf00      	nop
    return;
 8003bc6:	e16e      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 814a 	bne.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8143 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 813c 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	f040 80b4 	bne.w	8003d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8140 	beq.w	8003eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c32:	429a      	cmp	r2, r3
 8003c34:	f080 8139 	bcs.w	8003eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	f000 8088 	beq.w	8003d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1d9      	bne.n	8003c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e1      	bne.n	8003c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e3      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e3      	bne.n	8003d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fd fe20 	bl	800199e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8ac 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d74:	e099      	b.n	8003eaa <HAL_UART_IRQHandler+0x50e>
 8003d76:	bf00      	nop
 8003d78:	08004087 	.word	0x08004087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808b 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8086 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e44:	61fa      	str	r2, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	617b      	str	r3, [r7, #20]
   return(result);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f834 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e64:	e023      	b.n	8003eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f915 	bl	80040ae <UART_Transmit_IT>
    return;
 8003e84:	e014      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f955 	bl	800414e <UART_EndTransmit_IT>
    return;
 8003ea4:	e004      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eae:	bf00      	nop
  }
}
 8003eb0:	37e8      	adds	r7, #232	; 0xe8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b090      	sub	sp, #64	; 0x40
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	e050      	b.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d04c      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f04:	f7fd fbfc 	bl	8001700 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d241      	bcs.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f34:	637a      	str	r2, [r7, #52]	; 0x34
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	613b      	str	r3, [r7, #16]
   return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f68:	623a      	str	r2, [r7, #32]
 8003f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	69f9      	ldr	r1, [r7, #28]
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e00f      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d09f      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3740      	adds	r7, #64	; 0x40
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b095      	sub	sp, #84	; 0x54
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe8:	643a      	str	r2, [r7, #64]	; 0x40
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	61fb      	str	r3, [r7, #28]
   return(result);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	2b01      	cmp	r3, #1
 8004036:	d119      	bne.n	800406c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60bb      	str	r3, [r7, #8]
   return(result);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f023 0310 	bic.w	r3, r3, #16
 800404e:	647b      	str	r3, [r7, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004058:	61ba      	str	r2, [r7, #24]
 800405a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	613b      	str	r3, [r7, #16]
   return(result);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
}
 800407a:	bf00      	nop
 800407c:	3754      	adds	r7, #84	; 0x54
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff ff09 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b21      	cmp	r3, #33	; 0x21
 80040c0:	d13e      	bne.n	8004140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d114      	bne.n	80040f6 <UART_Transmit_IT+0x48>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d110      	bne.n	80040f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]
 80040f4:	e008      	b.n	8004108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6211      	str	r1, [r2, #32]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29b      	uxth	r3, r3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4619      	mov	r1, r3
 8004116:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10f      	bne.n	800413c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fb56 	bl	8000820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08c      	sub	sp, #48	; 0x30
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	f040 80ab 	bne.w	80042ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d117      	bne.n	80041ce <UART_Receive_IT+0x50>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d113      	bne.n	80041ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
 80041cc:	e026      	b.n	800421c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d007      	beq.n	80041f2 <UART_Receive_IT+0x74>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <UART_Receive_IT+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800422c:	2b00      	cmp	r3, #0
 800422e:	d15a      	bne.n	80042e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0220 	bic.w	r2, r2, #32
 800423e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	2b01      	cmp	r3, #1
 800426e:	d135      	bne.n	80042dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	613b      	str	r3, [r7, #16]
   return(result);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f023 0310 	bic.w	r3, r3, #16
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	623a      	str	r2, [r7, #32]
 8004298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	69f9      	ldr	r1, [r7, #28]
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d10a      	bne.n	80042ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fdf9 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
 80042da:	e002      	b.n	80042e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc fa6b 	bl	80007b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e002      	b.n	80042ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	; 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0c0      	sub	sp, #256	; 0x100
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	ea40 0301 	orr.w	r3, r0, r1
 800431c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800434c:	f021 010c 	bic.w	r1, r1, #12
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800435a:	430b      	orrs	r3, r1
 800435c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	6999      	ldr	r1, [r3, #24]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	ea40 0301 	orr.w	r3, r0, r1
 800437a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <UART_SetConfig+0xa0>
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b8d      	ldr	r3, [pc, #564]	; (80045c4 <UART_SetConfig+0x2d0>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d104      	bne.n	800439e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe f9ac 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8004398:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800439c:	e003      	b.n	80043a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800439e:	f7fe f993 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80043a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	f040 810c 	bne.w	80045cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	1891      	adds	r1, r2, r2
 80043cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ce:	415b      	adcs	r3, r3
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d6:	4621      	mov	r1, r4
 80043d8:	eb12 0801 	adds.w	r8, r2, r1
 80043dc:	4629      	mov	r1, r5
 80043de:	eb43 0901 	adc.w	r9, r3, r1
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043f6:	4690      	mov	r8, r2
 80043f8:	4699      	mov	r9, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	eb18 0303 	adds.w	r3, r8, r3
 8004400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004404:	462b      	mov	r3, r5
 8004406:	eb49 0303 	adc.w	r3, r9, r3
 800440a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800441a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800441e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004422:	460b      	mov	r3, r1
 8004424:	18db      	adds	r3, r3, r3
 8004426:	653b      	str	r3, [r7, #80]	; 0x50
 8004428:	4613      	mov	r3, r2
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004438:	f7fb ff2a 	bl	8000290 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004442:	fba3 2302 	umull	r2, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	011c      	lsls	r4, r3, #4
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004454:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	64b9      	str	r1, [r7, #72]	; 0x48
 8004464:	415b      	adcs	r3, r3
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800446c:	4641      	mov	r1, r8
 800446e:	eb12 0a01 	adds.w	sl, r2, r1
 8004472:	4649      	mov	r1, r9
 8004474:	eb43 0b01 	adc.w	fp, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800448c:	4692      	mov	sl, r2
 800448e:	469b      	mov	fp, r3
 8004490:	4643      	mov	r3, r8
 8004492:	eb1a 0303 	adds.w	r3, sl, r3
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800449a:	464b      	mov	r3, r9
 800449c:	eb4b 0303 	adc.w	r3, fp, r3
 80044a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b8:	460b      	mov	r3, r1
 80044ba:	18db      	adds	r3, r3, r3
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
 80044be:	4613      	mov	r3, r2
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
 80044c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ce:	f7fb fedf 	bl	8000290 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	; 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044f0:	fba3 2302 	umull	r2, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044fc:	441c      	add	r4, r3
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004508:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800450c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	63b9      	str	r1, [r7, #56]	; 0x38
 8004518:	415b      	adcs	r3, r3
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004520:	4641      	mov	r1, r8
 8004522:	1851      	adds	r1, r2, r1
 8004524:	6339      	str	r1, [r7, #48]	; 0x30
 8004526:	4649      	mov	r1, r9
 8004528:	414b      	adcs	r3, r1
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004538:	4659      	mov	r1, fp
 800453a:	00cb      	lsls	r3, r1, #3
 800453c:	4651      	mov	r1, sl
 800453e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004542:	4651      	mov	r1, sl
 8004544:	00ca      	lsls	r2, r1, #3
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	4603      	mov	r3, r0
 800454c:	4642      	mov	r2, r8
 800454e:	189b      	adds	r3, r3, r2
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	464b      	mov	r3, r9
 8004556:	460a      	mov	r2, r1
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800456c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004574:	460b      	mov	r3, r1
 8004576:	18db      	adds	r3, r3, r3
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	4613      	mov	r3, r2
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800458a:	f7fb fe81 	bl	8000290 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x2d4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4422      	add	r2, r4
 80045ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045bc:	e105      	b.n	80047ca <UART_SetConfig+0x4d6>
 80045be:	bf00      	nop
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	6239      	str	r1, [r7, #32]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb43 0501 	adc.w	r5, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	00eb      	lsls	r3, r5, #3
 8004602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004606:	00e2      	lsls	r2, r4, #3
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	4643      	mov	r3, r8
 800460e:	18e3      	adds	r3, r4, r3
 8004610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004614:	464b      	mov	r3, r9
 8004616:	eb45 0303 	adc.w	r3, r5, r3
 800461a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800463a:	4629      	mov	r1, r5
 800463c:	008b      	lsls	r3, r1, #2
 800463e:	4621      	mov	r1, r4
 8004640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004644:	4621      	mov	r1, r4
 8004646:	008a      	lsls	r2, r1, #2
 8004648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800464c:	f7fb fe20 	bl	8000290 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <UART_SetConfig+0x4e4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004668:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800466c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	61b9      	str	r1, [r7, #24]
 8004678:	415b      	adcs	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6139      	str	r1, [r7, #16]
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b4:	464b      	mov	r3, r9
 80046b6:	460a      	mov	r2, r1
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d8:	4649      	mov	r1, r9
 80046da:	008b      	lsls	r3, r1, #2
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e2:	4641      	mov	r1, r8
 80046e4:	008a      	lsls	r2, r1, #2
 80046e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ea:	f7fb fdd1 	bl	8000290 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <UART_SetConfig+0x4e4>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	; 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	3332      	adds	r3, #50	; 0x32
 8004706:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <UART_SetConfig+0x4e4>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004712:	441c      	add	r4, r3
 8004714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004718:	2200      	movs	r2, #0
 800471a:	673b      	str	r3, [r7, #112]	; 0x70
 800471c:	677a      	str	r2, [r7, #116]	; 0x74
 800471e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	415b      	adcs	r3, r3
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004732:	4641      	mov	r1, r8
 8004734:	1851      	adds	r1, r2, r1
 8004736:	6039      	str	r1, [r7, #0]
 8004738:	4649      	mov	r1, r9
 800473a:	414b      	adcs	r3, r1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800474a:	4659      	mov	r1, fp
 800474c:	00cb      	lsls	r3, r1, #3
 800474e:	4651      	mov	r1, sl
 8004750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004754:	4651      	mov	r1, sl
 8004756:	00ca      	lsls	r2, r1, #3
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	4603      	mov	r3, r0
 800475e:	4642      	mov	r2, r8
 8004760:	189b      	adds	r3, r3, r2
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
 8004778:	667a      	str	r2, [r7, #100]	; 0x64
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004786:	4649      	mov	r1, r9
 8004788:	008b      	lsls	r3, r1, #2
 800478a:	4641      	mov	r1, r8
 800478c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004790:	4641      	mov	r1, r8
 8004792:	008a      	lsls	r2, r1, #2
 8004794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004798:	f7fb fd7a 	bl	8000290 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047a2:	fba3 1302 	umull	r1, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2164      	movs	r1, #100	; 0x64
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4422      	add	r2, r4
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	51eb851f 	.word	0x51eb851f

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000012c 	.word	0x2000012c

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	; (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	; (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	; (800482c <__libc_init_array+0x44>)
 80047fc:	f000 fcb8 	bl	8005170 <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	08005350 	.word	0x08005350
 8004824:	08005350 	.word	0x08005350
 8004828:	08005350 	.word	0x08005350
 800482c:	08005354 	.word	0x08005354

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <siprintf>:
 8004840:	b40e      	push	{r1, r2, r3}
 8004842:	b500      	push	{lr}
 8004844:	b09c      	sub	sp, #112	; 0x70
 8004846:	ab1d      	add	r3, sp, #116	; 0x74
 8004848:	9002      	str	r0, [sp, #8]
 800484a:	9006      	str	r0, [sp, #24]
 800484c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <siprintf+0x38>)
 8004852:	9107      	str	r1, [sp, #28]
 8004854:	9104      	str	r1, [sp, #16]
 8004856:	4909      	ldr	r1, [pc, #36]	; (800487c <siprintf+0x3c>)
 8004858:	f853 2b04 	ldr.w	r2, [r3], #4
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	6800      	ldr	r0, [r0, #0]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	a902      	add	r1, sp, #8
 8004864:	f000 f892 	bl	800498c <_svfiprintf_r>
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	b01c      	add	sp, #112	; 0x70
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b003      	add	sp, #12
 8004876:	4770      	bx	lr
 8004878:	2000012c 	.word	0x2000012c
 800487c:	ffff0208 	.word	0xffff0208

08004880 <strncmp>:
 8004880:	b510      	push	{r4, lr}
 8004882:	b17a      	cbz	r2, 80048a4 <strncmp+0x24>
 8004884:	4603      	mov	r3, r0
 8004886:	3901      	subs	r1, #1
 8004888:	1884      	adds	r4, r0, r2
 800488a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800488e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004892:	4290      	cmp	r0, r2
 8004894:	d101      	bne.n	800489a <strncmp+0x1a>
 8004896:	42a3      	cmp	r3, r4
 8004898:	d101      	bne.n	800489e <strncmp+0x1e>
 800489a:	1a80      	subs	r0, r0, r2
 800489c:	bd10      	pop	{r4, pc}
 800489e:	2800      	cmp	r0, #0
 80048a0:	d1f3      	bne.n	800488a <strncmp+0xa>
 80048a2:	e7fa      	b.n	800489a <strncmp+0x1a>
 80048a4:	4610      	mov	r0, r2
 80048a6:	e7f9      	b.n	800489c <strncmp+0x1c>

080048a8 <strstr>:
 80048a8:	780a      	ldrb	r2, [r1, #0]
 80048aa:	b570      	push	{r4, r5, r6, lr}
 80048ac:	b96a      	cbnz	r2, 80048ca <strstr+0x22>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d109      	bne.n	80048c8 <strstr+0x20>
 80048b4:	460c      	mov	r4, r1
 80048b6:	4605      	mov	r5, r0
 80048b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f6      	beq.n	80048ae <strstr+0x6>
 80048c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80048c4:	429e      	cmp	r6, r3
 80048c6:	d0f7      	beq.n	80048b8 <strstr+0x10>
 80048c8:	3001      	adds	r0, #1
 80048ca:	7803      	ldrb	r3, [r0, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ef      	bne.n	80048b0 <strstr+0x8>
 80048d0:	4618      	mov	r0, r3
 80048d2:	e7ec      	b.n	80048ae <strstr+0x6>

080048d4 <__ssputs_r>:
 80048d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	688e      	ldr	r6, [r1, #8]
 80048da:	429e      	cmp	r6, r3
 80048dc:	4682      	mov	sl, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	4690      	mov	r8, r2
 80048e2:	461f      	mov	r7, r3
 80048e4:	d838      	bhi.n	8004958 <__ssputs_r+0x84>
 80048e6:	898a      	ldrh	r2, [r1, #12]
 80048e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048ec:	d032      	beq.n	8004954 <__ssputs_r+0x80>
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	6909      	ldr	r1, [r1, #16]
 80048f2:	eba5 0901 	sub.w	r9, r5, r1
 80048f6:	6965      	ldr	r5, [r4, #20]
 80048f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004900:	3301      	adds	r3, #1
 8004902:	444b      	add	r3, r9
 8004904:	106d      	asrs	r5, r5, #1
 8004906:	429d      	cmp	r5, r3
 8004908:	bf38      	it	cc
 800490a:	461d      	movcc	r5, r3
 800490c:	0553      	lsls	r3, r2, #21
 800490e:	d531      	bpl.n	8004974 <__ssputs_r+0xa0>
 8004910:	4629      	mov	r1, r5
 8004912:	f000 fb63 	bl	8004fdc <_malloc_r>
 8004916:	4606      	mov	r6, r0
 8004918:	b950      	cbnz	r0, 8004930 <__ssputs_r+0x5c>
 800491a:	230c      	movs	r3, #12
 800491c:	f8ca 3000 	str.w	r3, [sl]
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	6921      	ldr	r1, [r4, #16]
 8004932:	464a      	mov	r2, r9
 8004934:	f000 fabe 	bl	8004eb4 <memcpy>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	6126      	str	r6, [r4, #16]
 8004946:	6165      	str	r5, [r4, #20]
 8004948:	444e      	add	r6, r9
 800494a:	eba5 0509 	sub.w	r5, r5, r9
 800494e:	6026      	str	r6, [r4, #0]
 8004950:	60a5      	str	r5, [r4, #8]
 8004952:	463e      	mov	r6, r7
 8004954:	42be      	cmp	r6, r7
 8004956:	d900      	bls.n	800495a <__ssputs_r+0x86>
 8004958:	463e      	mov	r6, r7
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	4632      	mov	r2, r6
 800495e:	4641      	mov	r1, r8
 8004960:	f000 fab6 	bl	8004ed0 <memmove>
 8004964:	68a3      	ldr	r3, [r4, #8]
 8004966:	1b9b      	subs	r3, r3, r6
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	4433      	add	r3, r6
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2000      	movs	r0, #0
 8004972:	e7db      	b.n	800492c <__ssputs_r+0x58>
 8004974:	462a      	mov	r2, r5
 8004976:	f000 fba5 	bl	80050c4 <_realloc_r>
 800497a:	4606      	mov	r6, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	d1e1      	bne.n	8004944 <__ssputs_r+0x70>
 8004980:	6921      	ldr	r1, [r4, #16]
 8004982:	4650      	mov	r0, sl
 8004984:	f000 fabe 	bl	8004f04 <_free_r>
 8004988:	e7c7      	b.n	800491a <__ssputs_r+0x46>
	...

0800498c <_svfiprintf_r>:
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	4698      	mov	r8, r3
 8004992:	898b      	ldrh	r3, [r1, #12]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	b09d      	sub	sp, #116	; 0x74
 8004998:	4607      	mov	r7, r0
 800499a:	460d      	mov	r5, r1
 800499c:	4614      	mov	r4, r2
 800499e:	d50e      	bpl.n	80049be <_svfiprintf_r+0x32>
 80049a0:	690b      	ldr	r3, [r1, #16]
 80049a2:	b963      	cbnz	r3, 80049be <_svfiprintf_r+0x32>
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	f000 fb19 	bl	8004fdc <_malloc_r>
 80049aa:	6028      	str	r0, [r5, #0]
 80049ac:	6128      	str	r0, [r5, #16]
 80049ae:	b920      	cbnz	r0, 80049ba <_svfiprintf_r+0x2e>
 80049b0:	230c      	movs	r3, #12
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	e0d1      	b.n	8004b5e <_svfiprintf_r+0x1d2>
 80049ba:	2340      	movs	r3, #64	; 0x40
 80049bc:	616b      	str	r3, [r5, #20]
 80049be:	2300      	movs	r3, #0
 80049c0:	9309      	str	r3, [sp, #36]	; 0x24
 80049c2:	2320      	movs	r3, #32
 80049c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049cc:	2330      	movs	r3, #48	; 0x30
 80049ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b78 <_svfiprintf_r+0x1ec>
 80049d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049d6:	f04f 0901 	mov.w	r9, #1
 80049da:	4623      	mov	r3, r4
 80049dc:	469a      	mov	sl, r3
 80049de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049e2:	b10a      	cbz	r2, 80049e8 <_svfiprintf_r+0x5c>
 80049e4:	2a25      	cmp	r2, #37	; 0x25
 80049e6:	d1f9      	bne.n	80049dc <_svfiprintf_r+0x50>
 80049e8:	ebba 0b04 	subs.w	fp, sl, r4
 80049ec:	d00b      	beq.n	8004a06 <_svfiprintf_r+0x7a>
 80049ee:	465b      	mov	r3, fp
 80049f0:	4622      	mov	r2, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	4638      	mov	r0, r7
 80049f6:	f7ff ff6d 	bl	80048d4 <__ssputs_r>
 80049fa:	3001      	adds	r0, #1
 80049fc:	f000 80aa 	beq.w	8004b54 <_svfiprintf_r+0x1c8>
 8004a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a02:	445a      	add	r2, fp
 8004a04:	9209      	str	r2, [sp, #36]	; 0x24
 8004a06:	f89a 3000 	ldrb.w	r3, [sl]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80a2 	beq.w	8004b54 <_svfiprintf_r+0x1c8>
 8004a10:	2300      	movs	r3, #0
 8004a12:	f04f 32ff 	mov.w	r2, #4294967295
 8004a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a1a:	f10a 0a01 	add.w	sl, sl, #1
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	9307      	str	r3, [sp, #28]
 8004a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a26:	931a      	str	r3, [sp, #104]	; 0x68
 8004a28:	4654      	mov	r4, sl
 8004a2a:	2205      	movs	r2, #5
 8004a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a30:	4851      	ldr	r0, [pc, #324]	; (8004b78 <_svfiprintf_r+0x1ec>)
 8004a32:	f7fb fbdd 	bl	80001f0 <memchr>
 8004a36:	9a04      	ldr	r2, [sp, #16]
 8004a38:	b9d8      	cbnz	r0, 8004a72 <_svfiprintf_r+0xe6>
 8004a3a:	06d0      	lsls	r0, r2, #27
 8004a3c:	bf44      	itt	mi
 8004a3e:	2320      	movmi	r3, #32
 8004a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a44:	0711      	lsls	r1, r2, #28
 8004a46:	bf44      	itt	mi
 8004a48:	232b      	movmi	r3, #43	; 0x2b
 8004a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a52:	2b2a      	cmp	r3, #42	; 0x2a
 8004a54:	d015      	beq.n	8004a82 <_svfiprintf_r+0xf6>
 8004a56:	9a07      	ldr	r2, [sp, #28]
 8004a58:	4654      	mov	r4, sl
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f04f 0c0a 	mov.w	ip, #10
 8004a60:	4621      	mov	r1, r4
 8004a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a66:	3b30      	subs	r3, #48	; 0x30
 8004a68:	2b09      	cmp	r3, #9
 8004a6a:	d94e      	bls.n	8004b0a <_svfiprintf_r+0x17e>
 8004a6c:	b1b0      	cbz	r0, 8004a9c <_svfiprintf_r+0x110>
 8004a6e:	9207      	str	r2, [sp, #28]
 8004a70:	e014      	b.n	8004a9c <_svfiprintf_r+0x110>
 8004a72:	eba0 0308 	sub.w	r3, r0, r8
 8004a76:	fa09 f303 	lsl.w	r3, r9, r3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	46a2      	mov	sl, r4
 8004a80:	e7d2      	b.n	8004a28 <_svfiprintf_r+0x9c>
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	1d19      	adds	r1, r3, #4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	9103      	str	r1, [sp, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bfbb      	ittet	lt
 8004a8e:	425b      	neglt	r3, r3
 8004a90:	f042 0202 	orrlt.w	r2, r2, #2
 8004a94:	9307      	strge	r3, [sp, #28]
 8004a96:	9307      	strlt	r3, [sp, #28]
 8004a98:	bfb8      	it	lt
 8004a9a:	9204      	strlt	r2, [sp, #16]
 8004a9c:	7823      	ldrb	r3, [r4, #0]
 8004a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004aa0:	d10c      	bne.n	8004abc <_svfiprintf_r+0x130>
 8004aa2:	7863      	ldrb	r3, [r4, #1]
 8004aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa6:	d135      	bne.n	8004b14 <_svfiprintf_r+0x188>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	1d1a      	adds	r2, r3, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	9203      	str	r2, [sp, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bfb8      	it	lt
 8004ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ab8:	3402      	adds	r4, #2
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b88 <_svfiprintf_r+0x1fc>
 8004ac0:	7821      	ldrb	r1, [r4, #0]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	f7fb fb93 	bl	80001f0 <memchr>
 8004aca:	b140      	cbz	r0, 8004ade <_svfiprintf_r+0x152>
 8004acc:	2340      	movs	r3, #64	; 0x40
 8004ace:	eba0 000a 	sub.w	r0, r0, sl
 8004ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	3401      	adds	r4, #1
 8004adc:	9304      	str	r3, [sp, #16]
 8004ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae2:	4826      	ldr	r0, [pc, #152]	; (8004b7c <_svfiprintf_r+0x1f0>)
 8004ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ae8:	2206      	movs	r2, #6
 8004aea:	f7fb fb81 	bl	80001f0 <memchr>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d038      	beq.n	8004b64 <_svfiprintf_r+0x1d8>
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <_svfiprintf_r+0x1f4>)
 8004af4:	bb1b      	cbnz	r3, 8004b3e <_svfiprintf_r+0x1b2>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	3307      	adds	r3, #7
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	3308      	adds	r3, #8
 8004b00:	9303      	str	r3, [sp, #12]
 8004b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b04:	4433      	add	r3, r6
 8004b06:	9309      	str	r3, [sp, #36]	; 0x24
 8004b08:	e767      	b.n	80049da <_svfiprintf_r+0x4e>
 8004b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b0e:	460c      	mov	r4, r1
 8004b10:	2001      	movs	r0, #1
 8004b12:	e7a5      	b.n	8004a60 <_svfiprintf_r+0xd4>
 8004b14:	2300      	movs	r3, #0
 8004b16:	3401      	adds	r4, #1
 8004b18:	9305      	str	r3, [sp, #20]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f04f 0c0a 	mov.w	ip, #10
 8004b20:	4620      	mov	r0, r4
 8004b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b26:	3a30      	subs	r2, #48	; 0x30
 8004b28:	2a09      	cmp	r2, #9
 8004b2a:	d903      	bls.n	8004b34 <_svfiprintf_r+0x1a8>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0c5      	beq.n	8004abc <_svfiprintf_r+0x130>
 8004b30:	9105      	str	r1, [sp, #20]
 8004b32:	e7c3      	b.n	8004abc <_svfiprintf_r+0x130>
 8004b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b38:	4604      	mov	r4, r0
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7f0      	b.n	8004b20 <_svfiprintf_r+0x194>
 8004b3e:	ab03      	add	r3, sp, #12
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	462a      	mov	r2, r5
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <_svfiprintf_r+0x1f8>)
 8004b46:	a904      	add	r1, sp, #16
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f3af 8000 	nop.w
 8004b4e:	1c42      	adds	r2, r0, #1
 8004b50:	4606      	mov	r6, r0
 8004b52:	d1d6      	bne.n	8004b02 <_svfiprintf_r+0x176>
 8004b54:	89ab      	ldrh	r3, [r5, #12]
 8004b56:	065b      	lsls	r3, r3, #25
 8004b58:	f53f af2c 	bmi.w	80049b4 <_svfiprintf_r+0x28>
 8004b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b5e:	b01d      	add	sp, #116	; 0x74
 8004b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b64:	ab03      	add	r3, sp, #12
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <_svfiprintf_r+0x1f8>)
 8004b6c:	a904      	add	r1, sp, #16
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f000 f87a 	bl	8004c68 <_printf_i>
 8004b74:	e7eb      	b.n	8004b4e <_svfiprintf_r+0x1c2>
 8004b76:	bf00      	nop
 8004b78:	08005314 	.word	0x08005314
 8004b7c:	0800531e 	.word	0x0800531e
 8004b80:	00000000 	.word	0x00000000
 8004b84:	080048d5 	.word	0x080048d5
 8004b88:	0800531a 	.word	0x0800531a

08004b8c <_printf_common>:
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	4616      	mov	r6, r2
 8004b92:	4699      	mov	r9, r3
 8004b94:	688a      	ldr	r2, [r1, #8]
 8004b96:	690b      	ldr	r3, [r1, #16]
 8004b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bfb8      	it	lt
 8004ba0:	4613      	movlt	r3, r2
 8004ba2:	6033      	str	r3, [r6, #0]
 8004ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba8:	4607      	mov	r7, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_printf_common+0x26>
 8004bae:	3301      	adds	r3, #1
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	0699      	lsls	r1, r3, #26
 8004bb6:	bf42      	ittt	mi
 8004bb8:	6833      	ldrmi	r3, [r6, #0]
 8004bba:	3302      	addmi	r3, #2
 8004bbc:	6033      	strmi	r3, [r6, #0]
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	f015 0506 	ands.w	r5, r5, #6
 8004bc4:	d106      	bne.n	8004bd4 <_printf_common+0x48>
 8004bc6:	f104 0a19 	add.w	sl, r4, #25
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	6832      	ldr	r2, [r6, #0]
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dc26      	bgt.n	8004c22 <_printf_common+0x96>
 8004bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd8:	1e13      	subs	r3, r2, #0
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	0692      	lsls	r2, r2, #26
 8004be2:	d42b      	bmi.n	8004c3c <_printf_common+0xb0>
 8004be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be8:	4649      	mov	r1, r9
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c0      	blx	r8
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d01e      	beq.n	8004c30 <_printf_common+0xa4>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	68e5      	ldr	r5, [r4, #12]
 8004bf6:	6832      	ldr	r2, [r6, #0]
 8004bf8:	f003 0306 	and.w	r3, r3, #6
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	bf08      	it	eq
 8004c00:	1aad      	subeq	r5, r5, r2
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	bf0c      	ite	eq
 8004c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c0c:	2500      	movne	r5, #0
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	bfc4      	itt	gt
 8004c12:	1a9b      	subgt	r3, r3, r2
 8004c14:	18ed      	addgt	r5, r5, r3
 8004c16:	2600      	movs	r6, #0
 8004c18:	341a      	adds	r4, #26
 8004c1a:	42b5      	cmp	r5, r6
 8004c1c:	d11a      	bne.n	8004c54 <_printf_common+0xc8>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e008      	b.n	8004c34 <_printf_common+0xa8>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4652      	mov	r2, sl
 8004c26:	4649      	mov	r1, r9
 8004c28:	4638      	mov	r0, r7
 8004c2a:	47c0      	blx	r8
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d103      	bne.n	8004c38 <_printf_common+0xac>
 8004c30:	f04f 30ff 	mov.w	r0, #4294967295
 8004c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c38:	3501      	adds	r5, #1
 8004c3a:	e7c6      	b.n	8004bca <_printf_common+0x3e>
 8004c3c:	18e1      	adds	r1, r4, r3
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	2030      	movs	r0, #48	; 0x30
 8004c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c46:	4422      	add	r2, r4
 8004c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c50:	3302      	adds	r3, #2
 8004c52:	e7c7      	b.n	8004be4 <_printf_common+0x58>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4622      	mov	r2, r4
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c0      	blx	r8
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d0e6      	beq.n	8004c30 <_printf_common+0xa4>
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7d9      	b.n	8004c1a <_printf_common+0x8e>
	...

08004c68 <_printf_i>:
 8004c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c6c:	7e0f      	ldrb	r7, [r1, #24]
 8004c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c70:	2f78      	cmp	r7, #120	; 0x78
 8004c72:	4691      	mov	r9, r2
 8004c74:	4680      	mov	r8, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	469a      	mov	sl, r3
 8004c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c7e:	d807      	bhi.n	8004c90 <_printf_i+0x28>
 8004c80:	2f62      	cmp	r7, #98	; 0x62
 8004c82:	d80a      	bhi.n	8004c9a <_printf_i+0x32>
 8004c84:	2f00      	cmp	r7, #0
 8004c86:	f000 80d8 	beq.w	8004e3a <_printf_i+0x1d2>
 8004c8a:	2f58      	cmp	r7, #88	; 0x58
 8004c8c:	f000 80a3 	beq.w	8004dd6 <_printf_i+0x16e>
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c98:	e03a      	b.n	8004d10 <_printf_i+0xa8>
 8004c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c9e:	2b15      	cmp	r3, #21
 8004ca0:	d8f6      	bhi.n	8004c90 <_printf_i+0x28>
 8004ca2:	a101      	add	r1, pc, #4	; (adr r1, 8004ca8 <_printf_i+0x40>)
 8004ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca8:	08004d01 	.word	0x08004d01
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004c91 	.word	0x08004c91
 8004cb4:	08004c91 	.word	0x08004c91
 8004cb8:	08004c91 	.word	0x08004c91
 8004cbc:	08004c91 	.word	0x08004c91
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004c91 	.word	0x08004c91
 8004cc8:	08004c91 	.word	0x08004c91
 8004ccc:	08004c91 	.word	0x08004c91
 8004cd0:	08004c91 	.word	0x08004c91
 8004cd4:	08004e21 	.word	0x08004e21
 8004cd8:	08004d45 	.word	0x08004d45
 8004cdc:	08004e03 	.word	0x08004e03
 8004ce0:	08004c91 	.word	0x08004c91
 8004ce4:	08004c91 	.word	0x08004c91
 8004ce8:	08004e43 	.word	0x08004e43
 8004cec:	08004c91 	.word	0x08004c91
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004c91 	.word	0x08004c91
 8004cf8:	08004c91 	.word	0x08004c91
 8004cfc:	08004e0b 	.word	0x08004e0b
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	602a      	str	r2, [r5, #0]
 8004d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0a3      	b.n	8004e5c <_printf_i+0x1f4>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	6829      	ldr	r1, [r5, #0]
 8004d18:	0606      	lsls	r6, r0, #24
 8004d1a:	f101 0304 	add.w	r3, r1, #4
 8004d1e:	d50a      	bpl.n	8004d36 <_printf_i+0xce>
 8004d20:	680e      	ldr	r6, [r1, #0]
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	2e00      	cmp	r6, #0
 8004d26:	da03      	bge.n	8004d30 <_printf_i+0xc8>
 8004d28:	232d      	movs	r3, #45	; 0x2d
 8004d2a:	4276      	negs	r6, r6
 8004d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d30:	485e      	ldr	r0, [pc, #376]	; (8004eac <_printf_i+0x244>)
 8004d32:	230a      	movs	r3, #10
 8004d34:	e019      	b.n	8004d6a <_printf_i+0x102>
 8004d36:	680e      	ldr	r6, [r1, #0]
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d3e:	bf18      	it	ne
 8004d40:	b236      	sxthne	r6, r6
 8004d42:	e7ef      	b.n	8004d24 <_printf_i+0xbc>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	1d19      	adds	r1, r3, #4
 8004d4a:	6029      	str	r1, [r5, #0]
 8004d4c:	0601      	lsls	r1, r0, #24
 8004d4e:	d501      	bpl.n	8004d54 <_printf_i+0xec>
 8004d50:	681e      	ldr	r6, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <_printf_i+0xf2>
 8004d54:	0646      	lsls	r6, r0, #25
 8004d56:	d5fb      	bpl.n	8004d50 <_printf_i+0xe8>
 8004d58:	881e      	ldrh	r6, [r3, #0]
 8004d5a:	4854      	ldr	r0, [pc, #336]	; (8004eac <_printf_i+0x244>)
 8004d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d5e:	bf0c      	ite	eq
 8004d60:	2308      	moveq	r3, #8
 8004d62:	230a      	movne	r3, #10
 8004d64:	2100      	movs	r1, #0
 8004d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d6a:	6865      	ldr	r5, [r4, #4]
 8004d6c:	60a5      	str	r5, [r4, #8]
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	bfa2      	ittt	ge
 8004d72:	6821      	ldrge	r1, [r4, #0]
 8004d74:	f021 0104 	bicge.w	r1, r1, #4
 8004d78:	6021      	strge	r1, [r4, #0]
 8004d7a:	b90e      	cbnz	r6, 8004d80 <_printf_i+0x118>
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	d04d      	beq.n	8004e1c <_printf_i+0x1b4>
 8004d80:	4615      	mov	r5, r2
 8004d82:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d86:	fb03 6711 	mls	r7, r3, r1, r6
 8004d8a:	5dc7      	ldrb	r7, [r0, r7]
 8004d8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d90:	4637      	mov	r7, r6
 8004d92:	42bb      	cmp	r3, r7
 8004d94:	460e      	mov	r6, r1
 8004d96:	d9f4      	bls.n	8004d82 <_printf_i+0x11a>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d10b      	bne.n	8004db4 <_printf_i+0x14c>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07de      	lsls	r6, r3, #31
 8004da0:	d508      	bpl.n	8004db4 <_printf_i+0x14c>
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	6861      	ldr	r1, [r4, #4]
 8004da6:	4299      	cmp	r1, r3
 8004da8:	bfde      	ittt	le
 8004daa:	2330      	movle	r3, #48	; 0x30
 8004dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004db4:	1b52      	subs	r2, r2, r5
 8004db6:	6122      	str	r2, [r4, #16]
 8004db8:	f8cd a000 	str.w	sl, [sp]
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	aa03      	add	r2, sp, #12
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f7ff fee2 	bl	8004b8c <_printf_common>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d14c      	bne.n	8004e66 <_printf_i+0x1fe>
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	b004      	add	sp, #16
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	4835      	ldr	r0, [pc, #212]	; (8004eac <_printf_i+0x244>)
 8004dd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ddc:	6829      	ldr	r1, [r5, #0]
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004de4:	6029      	str	r1, [r5, #0]
 8004de6:	061d      	lsls	r5, r3, #24
 8004de8:	d514      	bpl.n	8004e14 <_printf_i+0x1ac>
 8004dea:	07df      	lsls	r7, r3, #31
 8004dec:	bf44      	itt	mi
 8004dee:	f043 0320 	orrmi.w	r3, r3, #32
 8004df2:	6023      	strmi	r3, [r4, #0]
 8004df4:	b91e      	cbnz	r6, 8004dfe <_printf_i+0x196>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f023 0320 	bic.w	r3, r3, #32
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	2310      	movs	r3, #16
 8004e00:	e7b0      	b.n	8004d64 <_printf_i+0xfc>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f043 0320 	orr.w	r3, r3, #32
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	2378      	movs	r3, #120	; 0x78
 8004e0c:	4828      	ldr	r0, [pc, #160]	; (8004eb0 <_printf_i+0x248>)
 8004e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e12:	e7e3      	b.n	8004ddc <_printf_i+0x174>
 8004e14:	0659      	lsls	r1, r3, #25
 8004e16:	bf48      	it	mi
 8004e18:	b2b6      	uxthmi	r6, r6
 8004e1a:	e7e6      	b.n	8004dea <_printf_i+0x182>
 8004e1c:	4615      	mov	r5, r2
 8004e1e:	e7bb      	b.n	8004d98 <_printf_i+0x130>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	6826      	ldr	r6, [r4, #0]
 8004e24:	6961      	ldr	r1, [r4, #20]
 8004e26:	1d18      	adds	r0, r3, #4
 8004e28:	6028      	str	r0, [r5, #0]
 8004e2a:	0635      	lsls	r5, r6, #24
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	d501      	bpl.n	8004e34 <_printf_i+0x1cc>
 8004e30:	6019      	str	r1, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <_printf_i+0x1d2>
 8004e34:	0670      	lsls	r0, r6, #25
 8004e36:	d5fb      	bpl.n	8004e30 <_printf_i+0x1c8>
 8004e38:	8019      	strh	r1, [r3, #0]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	4615      	mov	r5, r2
 8004e40:	e7ba      	b.n	8004db8 <_printf_i+0x150>
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	1d1a      	adds	r2, r3, #4
 8004e46:	602a      	str	r2, [r5, #0]
 8004e48:	681d      	ldr	r5, [r3, #0]
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7fb f9ce 	bl	80001f0 <memchr>
 8004e54:	b108      	cbz	r0, 8004e5a <_printf_i+0x1f2>
 8004e56:	1b40      	subs	r0, r0, r5
 8004e58:	6060      	str	r0, [r4, #4]
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e64:	e7a8      	b.n	8004db8 <_printf_i+0x150>
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	462a      	mov	r2, r5
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	47d0      	blx	sl
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0ab      	beq.n	8004dcc <_printf_i+0x164>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	079b      	lsls	r3, r3, #30
 8004e78:	d413      	bmi.n	8004ea2 <_printf_i+0x23a>
 8004e7a:	68e0      	ldr	r0, [r4, #12]
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	4298      	cmp	r0, r3
 8004e80:	bfb8      	it	lt
 8004e82:	4618      	movlt	r0, r3
 8004e84:	e7a4      	b.n	8004dd0 <_printf_i+0x168>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	47d0      	blx	sl
 8004e90:	3001      	adds	r0, #1
 8004e92:	d09b      	beq.n	8004dcc <_printf_i+0x164>
 8004e94:	3501      	adds	r5, #1
 8004e96:	68e3      	ldr	r3, [r4, #12]
 8004e98:	9903      	ldr	r1, [sp, #12]
 8004e9a:	1a5b      	subs	r3, r3, r1
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	dcf2      	bgt.n	8004e86 <_printf_i+0x21e>
 8004ea0:	e7eb      	b.n	8004e7a <_printf_i+0x212>
 8004ea2:	2500      	movs	r5, #0
 8004ea4:	f104 0619 	add.w	r6, r4, #25
 8004ea8:	e7f5      	b.n	8004e96 <_printf_i+0x22e>
 8004eaa:	bf00      	nop
 8004eac:	08005325 	.word	0x08005325
 8004eb0:	08005336 	.word	0x08005336

08004eb4 <memcpy>:
 8004eb4:	440a      	add	r2, r1
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ebc:	d100      	bne.n	8004ec0 <memcpy+0xc>
 8004ebe:	4770      	bx	lr
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	d1f9      	bne.n	8004ec2 <memcpy+0xe>
 8004ece:	bd10      	pop	{r4, pc}

08004ed0 <memmove>:
 8004ed0:	4288      	cmp	r0, r1
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	eb01 0402 	add.w	r4, r1, r2
 8004ed8:	d902      	bls.n	8004ee0 <memmove+0x10>
 8004eda:	4284      	cmp	r4, r0
 8004edc:	4623      	mov	r3, r4
 8004ede:	d807      	bhi.n	8004ef0 <memmove+0x20>
 8004ee0:	1e43      	subs	r3, r0, #1
 8004ee2:	42a1      	cmp	r1, r4
 8004ee4:	d008      	beq.n	8004ef8 <memmove+0x28>
 8004ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eee:	e7f8      	b.n	8004ee2 <memmove+0x12>
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	428a      	cmp	r2, r1
 8004ef6:	d100      	bne.n	8004efa <memmove+0x2a>
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f02:	e7f7      	b.n	8004ef4 <memmove+0x24>

08004f04 <_free_r>:
 8004f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f06:	2900      	cmp	r1, #0
 8004f08:	d044      	beq.n	8004f94 <_free_r+0x90>
 8004f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f0e:	9001      	str	r0, [sp, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f1a1 0404 	sub.w	r4, r1, #4
 8004f16:	bfb8      	it	lt
 8004f18:	18e4      	addlt	r4, r4, r3
 8004f1a:	f000 f913 	bl	8005144 <__malloc_lock>
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <_free_r+0x94>)
 8004f20:	9801      	ldr	r0, [sp, #4]
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	b933      	cbnz	r3, 8004f34 <_free_r+0x30>
 8004f26:	6063      	str	r3, [r4, #4]
 8004f28:	6014      	str	r4, [r2, #0]
 8004f2a:	b003      	add	sp, #12
 8004f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f30:	f000 b90e 	b.w	8005150 <__malloc_unlock>
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d908      	bls.n	8004f4a <_free_r+0x46>
 8004f38:	6825      	ldr	r5, [r4, #0]
 8004f3a:	1961      	adds	r1, r4, r5
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	bf01      	itttt	eq
 8004f40:	6819      	ldreq	r1, [r3, #0]
 8004f42:	685b      	ldreq	r3, [r3, #4]
 8004f44:	1949      	addeq	r1, r1, r5
 8004f46:	6021      	streq	r1, [r4, #0]
 8004f48:	e7ed      	b.n	8004f26 <_free_r+0x22>
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	b10b      	cbz	r3, 8004f54 <_free_r+0x50>
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	d9fa      	bls.n	8004f4a <_free_r+0x46>
 8004f54:	6811      	ldr	r1, [r2, #0]
 8004f56:	1855      	adds	r5, r2, r1
 8004f58:	42a5      	cmp	r5, r4
 8004f5a:	d10b      	bne.n	8004f74 <_free_r+0x70>
 8004f5c:	6824      	ldr	r4, [r4, #0]
 8004f5e:	4421      	add	r1, r4
 8004f60:	1854      	adds	r4, r2, r1
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	d1e0      	bne.n	8004f2a <_free_r+0x26>
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	6053      	str	r3, [r2, #4]
 8004f6e:	4421      	add	r1, r4
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	e7da      	b.n	8004f2a <_free_r+0x26>
 8004f74:	d902      	bls.n	8004f7c <_free_r+0x78>
 8004f76:	230c      	movs	r3, #12
 8004f78:	6003      	str	r3, [r0, #0]
 8004f7a:	e7d6      	b.n	8004f2a <_free_r+0x26>
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	1961      	adds	r1, r4, r5
 8004f80:	428b      	cmp	r3, r1
 8004f82:	bf04      	itt	eq
 8004f84:	6819      	ldreq	r1, [r3, #0]
 8004f86:	685b      	ldreq	r3, [r3, #4]
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	bf04      	itt	eq
 8004f8c:	1949      	addeq	r1, r1, r5
 8004f8e:	6021      	streq	r1, [r4, #0]
 8004f90:	6054      	str	r4, [r2, #4]
 8004f92:	e7ca      	b.n	8004f2a <_free_r+0x26>
 8004f94:	b003      	add	sp, #12
 8004f96:	bd30      	pop	{r4, r5, pc}
 8004f98:	200006a0 	.word	0x200006a0

08004f9c <sbrk_aligned>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	4e0e      	ldr	r6, [pc, #56]	; (8004fd8 <sbrk_aligned+0x3c>)
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	6831      	ldr	r1, [r6, #0]
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	b911      	cbnz	r1, 8004fae <sbrk_aligned+0x12>
 8004fa8:	f000 f8bc 	bl	8005124 <_sbrk_r>
 8004fac:	6030      	str	r0, [r6, #0]
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f8b7 	bl	8005124 <_sbrk_r>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	d00a      	beq.n	8004fd0 <sbrk_aligned+0x34>
 8004fba:	1cc4      	adds	r4, r0, #3
 8004fbc:	f024 0403 	bic.w	r4, r4, #3
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d007      	beq.n	8004fd4 <sbrk_aligned+0x38>
 8004fc4:	1a21      	subs	r1, r4, r0
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f8ac 	bl	8005124 <_sbrk_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d101      	bne.n	8004fd4 <sbrk_aligned+0x38>
 8004fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	200006a4 	.word	0x200006a4

08004fdc <_malloc_r>:
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	1ccd      	adds	r5, r1, #3
 8004fe2:	f025 0503 	bic.w	r5, r5, #3
 8004fe6:	3508      	adds	r5, #8
 8004fe8:	2d0c      	cmp	r5, #12
 8004fea:	bf38      	it	cc
 8004fec:	250c      	movcc	r5, #12
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	db01      	blt.n	8004ff8 <_malloc_r+0x1c>
 8004ff4:	42a9      	cmp	r1, r5
 8004ff6:	d905      	bls.n	8005004 <_malloc_r+0x28>
 8004ff8:	230c      	movs	r3, #12
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	4630      	mov	r0, r6
 8005000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005004:	4e2e      	ldr	r6, [pc, #184]	; (80050c0 <_malloc_r+0xe4>)
 8005006:	f000 f89d 	bl	8005144 <__malloc_lock>
 800500a:	6833      	ldr	r3, [r6, #0]
 800500c:	461c      	mov	r4, r3
 800500e:	bb34      	cbnz	r4, 800505e <_malloc_r+0x82>
 8005010:	4629      	mov	r1, r5
 8005012:	4638      	mov	r0, r7
 8005014:	f7ff ffc2 	bl	8004f9c <sbrk_aligned>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	4604      	mov	r4, r0
 800501c:	d14d      	bne.n	80050ba <_malloc_r+0xde>
 800501e:	6834      	ldr	r4, [r6, #0]
 8005020:	4626      	mov	r6, r4
 8005022:	2e00      	cmp	r6, #0
 8005024:	d140      	bne.n	80050a8 <_malloc_r+0xcc>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	4631      	mov	r1, r6
 800502a:	4638      	mov	r0, r7
 800502c:	eb04 0803 	add.w	r8, r4, r3
 8005030:	f000 f878 	bl	8005124 <_sbrk_r>
 8005034:	4580      	cmp	r8, r0
 8005036:	d13a      	bne.n	80050ae <_malloc_r+0xd2>
 8005038:	6821      	ldr	r1, [r4, #0]
 800503a:	3503      	adds	r5, #3
 800503c:	1a6d      	subs	r5, r5, r1
 800503e:	f025 0503 	bic.w	r5, r5, #3
 8005042:	3508      	adds	r5, #8
 8005044:	2d0c      	cmp	r5, #12
 8005046:	bf38      	it	cc
 8005048:	250c      	movcc	r5, #12
 800504a:	4629      	mov	r1, r5
 800504c:	4638      	mov	r0, r7
 800504e:	f7ff ffa5 	bl	8004f9c <sbrk_aligned>
 8005052:	3001      	adds	r0, #1
 8005054:	d02b      	beq.n	80050ae <_malloc_r+0xd2>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	442b      	add	r3, r5
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	e00e      	b.n	800507c <_malloc_r+0xa0>
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	1b52      	subs	r2, r2, r5
 8005062:	d41e      	bmi.n	80050a2 <_malloc_r+0xc6>
 8005064:	2a0b      	cmp	r2, #11
 8005066:	d916      	bls.n	8005096 <_malloc_r+0xba>
 8005068:	1961      	adds	r1, r4, r5
 800506a:	42a3      	cmp	r3, r4
 800506c:	6025      	str	r5, [r4, #0]
 800506e:	bf18      	it	ne
 8005070:	6059      	strne	r1, [r3, #4]
 8005072:	6863      	ldr	r3, [r4, #4]
 8005074:	bf08      	it	eq
 8005076:	6031      	streq	r1, [r6, #0]
 8005078:	5162      	str	r2, [r4, r5]
 800507a:	604b      	str	r3, [r1, #4]
 800507c:	4638      	mov	r0, r7
 800507e:	f104 060b 	add.w	r6, r4, #11
 8005082:	f000 f865 	bl	8005150 <__malloc_unlock>
 8005086:	f026 0607 	bic.w	r6, r6, #7
 800508a:	1d23      	adds	r3, r4, #4
 800508c:	1af2      	subs	r2, r6, r3
 800508e:	d0b6      	beq.n	8004ffe <_malloc_r+0x22>
 8005090:	1b9b      	subs	r3, r3, r6
 8005092:	50a3      	str	r3, [r4, r2]
 8005094:	e7b3      	b.n	8004ffe <_malloc_r+0x22>
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	42a3      	cmp	r3, r4
 800509a:	bf0c      	ite	eq
 800509c:	6032      	streq	r2, [r6, #0]
 800509e:	605a      	strne	r2, [r3, #4]
 80050a0:	e7ec      	b.n	800507c <_malloc_r+0xa0>
 80050a2:	4623      	mov	r3, r4
 80050a4:	6864      	ldr	r4, [r4, #4]
 80050a6:	e7b2      	b.n	800500e <_malloc_r+0x32>
 80050a8:	4634      	mov	r4, r6
 80050aa:	6876      	ldr	r6, [r6, #4]
 80050ac:	e7b9      	b.n	8005022 <_malloc_r+0x46>
 80050ae:	230c      	movs	r3, #12
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4638      	mov	r0, r7
 80050b4:	f000 f84c 	bl	8005150 <__malloc_unlock>
 80050b8:	e7a1      	b.n	8004ffe <_malloc_r+0x22>
 80050ba:	6025      	str	r5, [r4, #0]
 80050bc:	e7de      	b.n	800507c <_malloc_r+0xa0>
 80050be:	bf00      	nop
 80050c0:	200006a0 	.word	0x200006a0

080050c4 <_realloc_r>:
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c8:	4680      	mov	r8, r0
 80050ca:	4614      	mov	r4, r2
 80050cc:	460e      	mov	r6, r1
 80050ce:	b921      	cbnz	r1, 80050da <_realloc_r+0x16>
 80050d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	4611      	mov	r1, r2
 80050d6:	f7ff bf81 	b.w	8004fdc <_malloc_r>
 80050da:	b92a      	cbnz	r2, 80050e8 <_realloc_r+0x24>
 80050dc:	f7ff ff12 	bl	8004f04 <_free_r>
 80050e0:	4625      	mov	r5, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	f000 f838 	bl	800515c <_malloc_usable_size_r>
 80050ec:	4284      	cmp	r4, r0
 80050ee:	4607      	mov	r7, r0
 80050f0:	d802      	bhi.n	80050f8 <_realloc_r+0x34>
 80050f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050f6:	d812      	bhi.n	800511e <_realloc_r+0x5a>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff ff6e 	bl	8004fdc <_malloc_r>
 8005100:	4605      	mov	r5, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	d0ed      	beq.n	80050e2 <_realloc_r+0x1e>
 8005106:	42bc      	cmp	r4, r7
 8005108:	4622      	mov	r2, r4
 800510a:	4631      	mov	r1, r6
 800510c:	bf28      	it	cs
 800510e:	463a      	movcs	r2, r7
 8005110:	f7ff fed0 	bl	8004eb4 <memcpy>
 8005114:	4631      	mov	r1, r6
 8005116:	4640      	mov	r0, r8
 8005118:	f7ff fef4 	bl	8004f04 <_free_r>
 800511c:	e7e1      	b.n	80050e2 <_realloc_r+0x1e>
 800511e:	4635      	mov	r5, r6
 8005120:	e7df      	b.n	80050e2 <_realloc_r+0x1e>
	...

08005124 <_sbrk_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	; (8005140 <_sbrk_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fb fdf0 	bl	8000d14 <_sbrk>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_sbrk_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_sbrk_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	200006a8 	.word	0x200006a8

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_lock+0x8>)
 8005146:	f000 b811 	b.w	800516c <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	200006ac 	.word	0x200006ac

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_unlock+0x8>)
 8005152:	f000 b80c 	b.w	800516e <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	200006ac 	.word	0x200006ac

0800515c <_malloc_usable_size_r>:
 800515c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005160:	1f18      	subs	r0, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	bfbc      	itt	lt
 8005166:	580b      	ldrlt	r3, [r1, r0]
 8005168:	18c0      	addlt	r0, r0, r3
 800516a:	4770      	bx	lr

0800516c <__retarget_lock_acquire_recursive>:
 800516c:	4770      	bx	lr

0800516e <__retarget_lock_release_recursive>:
 800516e:	4770      	bx	lr

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
