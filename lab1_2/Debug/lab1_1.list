
lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b4  080042b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000548  20000548  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4cb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf3  00000000  00000000  0002a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aba  00000000  00000000  0002cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5c0  00000000  00000000  0004faa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf8a3  00000000  00000000  0005a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129905  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000218c  00000000  00000000  00129958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004144 	.word	0x08004144

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004144 	.word	0x08004144

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0308 	orr.w	r3, r3, #8
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xd4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xd4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_GPIO_Init+0xd4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_GPIO_Init+0xd4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0xd8>)
 8000622:	f001 fa5b 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_GPIO_Init+0xdc>)
 800063c:	f001 f8a2 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0xd8>)
 800065a:	f001 f893 	bl	8001784 <HAL_GPIO_Init>

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40020800 	.word	0x40020800

08000674 <init_vals_IT>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void init_vals_IT(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	len_in_buf = 0;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <init_vals_IT+0x2c>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
	memset(in_buffer_IT, 't', sizeof(in_buffer_IT));
 800067e:	2232      	movs	r2, #50	; 0x32
 8000680:	2174      	movs	r1, #116	; 0x74
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <init_vals_IT+0x30>)
 8000684:	f003 f8be 	bl	8003804 <memset>
	send_req = 0;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <init_vals_IT+0x34>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
	already_printed = 0;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <init_vals_IT+0x38>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
	last_data = 0;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <init_vals_IT+0x3c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000f0 	.word	0x200000f0
 80006a4:	200000bc 	.word	0x200000bc
 80006a8:	200000f4 	.word	0x200000f4
 80006ac:	200004e0 	.word	0x200004e0
 80006b0:	200004e4 	.word	0x200004e4

080006b4 <data_collecter>:

void data_collecter(char* buf, int len){
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	for(int i = 0;i < len; i++){
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e00f      	b.n	80006e4 <data_collecter+0x30>
		datas[last_data] = buf[i];
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	441a      	add	r2, r3
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <data_collecter+0x48>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7811      	ldrb	r1, [r2, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <data_collecter+0x4c>)
 80006d2:	54d1      	strb	r1, [r2, r3]
		last_data++;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <data_collecter+0x48>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <data_collecter+0x48>)
 80006dc:	6013      	str	r3, [r2, #0]
	for(int i = 0;i < len; i++){
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3301      	adds	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbeb      	blt.n	80006c4 <data_collecter+0x10>
	}
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200004e4 	.word	0x200004e4
 8000700:	200000f8 	.word	0x200000f8

08000704 <transend_data_IT>:

void transend_data_IT(char* buf, int len){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if(send_req){
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <transend_data_IT+0x34>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <transend_data_IT+0x1c>
		data_collecter(buf, len);
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffcb 	bl	80006b4 <data_collecter>
		return;
 800071e:	e007      	b.n	8000730 <transend_data_IT+0x2c>
	}
	send_req = 1;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <transend_data_IT+0x34>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit_IT( &huart6, (uint8_t *) buf, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <transend_data_IT+0x38>)
 800072c:	f001 ffc9 	bl	80026c2 <HAL_UART_Transmit_IT>
}
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000f4 	.word	0x200000f4
 800073c:	200004f0 	.word	0x200004f0

08000740 <print_collected_data>:

void print_collected_data(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if(already_printed < last_data){
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <print_collected_data+0x3c>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <print_collected_data+0x40>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	da0d      	bge.n	800076c <print_collected_data+0x2c>
		transend_data_IT(&datas[already_printed], 1);
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <print_collected_data+0x3c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <print_collected_data+0x44>)
 8000756:	4413      	add	r3, r2
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffd2 	bl	8000704 <transend_data_IT>
		already_printed++;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <print_collected_data+0x3c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <print_collected_data+0x3c>)
 8000768:	6013      	str	r3, [r2, #0]
	}
	else {
		already_printed = 0;
		last_data       = 0;
	}
}
 800076a:	e005      	b.n	8000778 <print_collected_data+0x38>
		already_printed = 0;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <print_collected_data+0x3c>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
		last_data       = 0;
 8000772:	4b03      	ldr	r3, [pc, #12]	; (8000780 <print_collected_data+0x40>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200004e0 	.word	0x200004e0
 8000780:	200004e4 	.word	0x200004e4
 8000784:	200000f8 	.word	0x200000f8

08000788 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  in_buffer_IT[len_in_buf] = el;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <HAL_UART_RxCpltCallback+0x5c>)
 8000796:	7811      	ldrb	r1, [r2, #0]
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <HAL_UART_RxCpltCallback+0x60>)
 800079a:	54d1      	strb	r1, [r2, r3]
  transend_data_IT(&el, 1);
 800079c:	2101      	movs	r1, #1
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <HAL_UART_RxCpltCallback+0x5c>)
 80007a0:	f7ff ffb0 	bl	8000704 <transend_data_IT>
  if(in_buffer_IT[len_in_buf] == '\r'){
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <HAL_UART_RxCpltCallback+0x60>)
 80007aa:	5cd3      	ldrb	r3, [r2, r3]
 80007ac:	2b0d      	cmp	r3, #13
 80007ae:	d10d      	bne.n	80007cc <HAL_UART_RxCpltCallback+0x44>
	  int local_len = len_in_buf;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
	  deshifr(in_buffer_IT, &local_len, &fsm_obj);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_UART_RxCpltCallback+0x64>)
 80007bc:	4619      	mov	r1, r3
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_UART_RxCpltCallback+0x60>)
 80007c0:	f000 fbc6 	bl	8000f50 <deshifr>
	  len_in_buf = 0;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
  }
  else{
	  len_in_buf = len_in_buf + 1;
  }
}
 80007ca:	e004      	b.n	80007d6 <HAL_UART_RxCpltCallback+0x4e>
	  len_in_buf = len_in_buf + 1;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_UART_RxCpltCallback+0x58>)
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000f0 	.word	0x200000f0
 80007e4:	200000b8 	.word	0x200000b8
 80007e8:	200000bc 	.word	0x200000bc
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	send_req = 0;
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <HAL_UART_TxCpltCallback+0x1c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
	print_collected_data();
 80007fe:	f7ff ff9f 	bl	8000740 <print_collected_data>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000f4 	.word	0x200000f4

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fd61 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f8a7 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f7ff feb9 	bl	8000594 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000822:	f000 fcb7 	bl	8001194 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  fsm_obj.button_cnt = 0;
 8000826:	4b47      	ldr	r3, [pc, #284]	; (8000944 <main+0x134>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  fsm_obj.button_pressed_flag = 0;
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <main+0x134>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  fsm_obj.red_time = 6000;
 8000832:	4b44      	ldr	r3, [pc, #272]	; (8000944 <main+0x134>)
 8000834:	f241 7270 	movw	r2, #6000	; 0x1770
 8000838:	601a      	str	r2, [r3, #0]
  fsm_obj.other_time = fsm_obj.red_time / 4;
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <main+0x134>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da00      	bge.n	8000844 <main+0x34>
 8000842:	3303      	adds	r3, #3
 8000844:	109b      	asrs	r3, r3, #2
 8000846:	461a      	mov	r2, r3
 8000848:	4b3e      	ldr	r3, [pc, #248]	; (8000944 <main+0x134>)
 800084a:	605a      	str	r2, [r3, #4]
  fsm_obj.current_red = fsm_obj.red_time;
 800084c:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <main+0x134>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a3c      	ldr	r2, [pc, #240]	; (8000944 <main+0x134>)
 8000852:	6093      	str	r3, [r2, #8]
  fsm_obj.start_time = 0;
 8000854:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <main+0x134>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  fsm_obj.wait_time = 0;
 800085a:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <main+0x134>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  fsm_obj.state = RED;
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <main+0x134>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  fsm_obj.fsm_flag = 0;
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <main+0x134>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  fsm_obj.interupt_enable = 0;
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <main+0x134>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  fsm_obj.work_mode = 1;
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <main+0x134>)
 8000876:	2201      	movs	r2, #1
 8000878:	621a      	str	r2, [r3, #32]

  char in_buffer[50];
  int  in_curlen = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  int first_iter = -1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <main+0x134>)
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <main+0x134>)
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <main+0x138>)
 800088e:	9303      	str	r3, [sp, #12]
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <main+0x13c>)
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <main+0x140>)
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <main+0x144>)
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <main+0x148>)
 800089e:	482f      	ldr	r0, [pc, #188]	; (800095c <main+0x14c>)
 80008a0:	f000 fa02 	bl	8000ca8 <nextStateMachine>
	  if(fsm_obj.work_mode)
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <main+0x134>)
 80008a6:	6a1b      	ldr	r3, [r3, #32]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <main+0xaa>
		  check_button(&fsm_obj.button_cnt, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.button_pressed_flag);
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <main+0x134>)
 80008ae:	6859      	ldr	r1, [r3, #4]
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <main+0x13c>)
 80008b2:	4a29      	ldr	r2, [pc, #164]	; (8000958 <main+0x148>)
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <main+0x150>)
 80008b6:	f000 fb11 	bl	8000edc <check_button>
	  if(!fsm_obj.interupt_enable) {
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <main+0x134>)
 80008bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d131      	bne.n	8000926 <main+0x116>
		first_iter = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(HAL_OK == HAL_UART_Receive( &huart6, (uint8_t *) &in_buffer[in_curlen], 1, 10 )){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f107 0208 	add.w	r2, r7, #8
 80008cc:	18d1      	adds	r1, r2, r3
 80008ce:	230a      	movs	r3, #10
 80008d0:	2201      	movs	r2, #1
 80008d2:	4824      	ldr	r0, [pc, #144]	; (8000964 <main+0x154>)
 80008d4:	f001 fe53 	bl	800257e <HAL_UART_Receive>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1d2      	bne.n	8000884 <main+0x74>
        	HAL_UART_Transmit( &huart6, (uint8_t *) &in_buffer[in_curlen], 1, 10 );
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f107 0208 	add.w	r2, r7, #8
 80008e4:	18d1      	adds	r1, r2, r3
 80008e6:	230a      	movs	r3, #10
 80008e8:	2201      	movs	r2, #1
 80008ea:	481e      	ldr	r0, [pc, #120]	; (8000964 <main+0x154>)
 80008ec:	f001 fdb5 	bl	800245a <HAL_UART_Transmit>
        	if(in_buffer[in_curlen] == '\r') {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3340      	adds	r3, #64	; 0x40
 80008f4:	443b      	add	r3, r7
 80008f6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008fa:	2b0d      	cmp	r3, #13
 80008fc:	d10f      	bne.n	800091e <main+0x10e>
        		in_buffer[in_curlen] = '\0';
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3340      	adds	r3, #64	; 0x40
 8000902:	443b      	add	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	f803 2c38 	strb.w	r2, [r3, #-56]
        		deshifr(in_buffer, &in_curlen, &fsm_obj);
 800090a:	1d39      	adds	r1, r7, #4
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <main+0x134>)
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fb1c 	bl	8000f50 <deshifr>
        		in_curlen = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	e7b2      	b.n	8000884 <main+0x74>
        	}
        	else {
        		in_curlen++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	e7ae      	b.n	8000884 <main+0x74>
        	}
        }
	  }
	  else{
		  if(first_iter == 0){
 8000926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <main+0x126>
			  init_vals_IT();
 800092c:	f7ff fea2 	bl	8000674 <init_vals_IT>
			  first_iter = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000934:	e7a6      	b.n	8000884 <main+0x74>
		  }
		  else
			  HAL_UART_Receive_IT( &huart6, (uint8_t *) &el, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	490b      	ldr	r1, [pc, #44]	; (8000968 <main+0x158>)
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <main+0x154>)
 800093c:	f001 ff06 	bl	800274c <HAL_UART_Receive_IT>
	  nextStateMachine(&fsm_obj.state, fsm_obj.red_time, fsm_obj.other_time, &fsm_obj.current_red, &fsm_obj.fsm_flag, &fsm_obj.wait_time, &fsm_obj.button_pressed_flag, &fsm_obj.start_time);
 8000940:	e7a0      	b.n	8000884 <main+0x74>
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	200000a4 	.word	0x200000a4
 800094c:	2000009c 	.word	0x2000009c
 8000950:	200000a0 	.word	0x200000a0
 8000954:	20000098 	.word	0x20000098
 8000958:	20000094 	.word	0x20000094
 800095c:	200000b0 	.word	0x200000b0
 8000960:	200000a8 	.word	0x200000a8
 8000964:	200004f0 	.word	0x200004f0
 8000968:	200000b8 	.word	0x200000b8

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 ff42 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemClock_Config+0xb8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <SystemClock_Config+0xb8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SystemClock_Config+0xb8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <SystemClock_Config+0xbc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <SystemClock_Config+0xbc>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <SystemClock_Config+0xbc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f895 	bl	8001b10 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009ec:	f000 f81e 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 faf8 	bl	8002000 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a16:	f000 f809 	bl	8000a2c <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 fc54 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART6_IRQHandler+0x10>)
 8000ae2:	f001 ff07 	bl	80028f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200004f0 	.word	0x200004f0

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f002 fe46 	bl	80037b0 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20030000 	.word	0x20030000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	200004e8 	.word	0x200004e8
 8000b58:	20000548 	.word	0x20000548

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <set_LED>:
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void set_LED(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	707b      	strb	r3, [r7, #1]
	/* нам не нужны асерты, гарантируется работа
	 * старшие 16 бит бсра, отвечаю за сброс значения, младшие за установку*/
	  if(PinState != GPIO_PIN_RESET)
 8000b90:	787b      	ldrb	r3, [r7, #1]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <set_LED+0x1e>
	  {
	    GPIOx->BSRR = GPIO_Pin;
 8000b96:	887a      	ldrh	r2, [r7, #2]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
	  }
	  else
	  {
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
	  }
};
 8000b9c:	e003      	b.n	8000ba6 <set_LED+0x26>
	    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	041a      	lsls	r2, r3, #16
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	619a      	str	r2, [r3, #24]
};
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <read_PIN>:

GPIO_PinState read_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	807b      	strh	r3, [r7, #2]

	GPIO_PinState bitstatus;
	if((GPIOx->IDR & GPIO_Pin))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <read_PIN+0x1e>
	  bitstatus = GPIO_PIN_SET;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e001      	b.n	8000bd4 <read_PIN+0x22>
	else
	  bitstatus = GPIO_PIN_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	return bitstatus;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <getColorName>:

const char* getColorName(TrafficLight c) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    switch (c) {
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d813      	bhi.n	8000c1c <getColorName+0x38>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <getColorName+0x18>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c19 	.word	0x08000c19
        case RED: return "RED";
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <getColorName+0x48>)
 8000c0e:	e006      	b.n	8000c1e <getColorName+0x3a>
        case GREEN: return "GREEN";
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <getColorName+0x4c>)
 8000c12:	e004      	b.n	8000c1e <getColorName+0x3a>
        case GREEN_BLINK: return "GREEN_BLINK";
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <getColorName+0x50>)
 8000c16:	e002      	b.n	8000c1e <getColorName+0x3a>
        case YELLOW: return "YELLOW";
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <getColorName+0x54>)
 8000c1a:	e000      	b.n	8000c1e <getColorName+0x3a>
        default: return "UNKNOWN";
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <getColorName+0x58>)
    }
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	0800415c 	.word	0x0800415c
 8000c30:	08004160 	.word	0x08004160
 8000c34:	08004168 	.word	0x08004168
 8000c38:	08004174 	.word	0x08004174
 8000c3c:	0800417c 	.word	0x0800417c

08000c40 <read_button>:


int read_button(int* cnt){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	GPIO_PinState res = read_PIN(GPIOC, GPIO_PIN_15);
 8000c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <read_button+0x4c>)
 8000c4e:	f7ff ffb0 	bl	8000bb2 <read_PIN>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
	if(res == 0){
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d105      	bne.n	8000c68 <read_button+0x28>
		(*cnt) = (*cnt) + 1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e002      	b.n	8000c6e <read_button+0x2e>
	}
	else
		(*cnt) = 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
	/* при стандартном времени дребезга в 5-10мс, то при частоте 16 мега герц, нам нужно примерно 80-160 тактов, взял 200 для надежности
	 * */
	if((*cnt) >= 5){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	dd04      	ble.n	8000c80 <read_button+0x40>
		(*cnt) = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
		return 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <read_button+0x42>
	}
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020800 	.word	0x40020800

08000c90 <reset_LEDS>:

void reset_LEDS(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	set_LED(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <reset_LEDS+0x14>)
 8000c9c:	f7ff ff70 	bl	8000b80 <set_LED>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40020c00 	.word	0x40020c00

08000ca8 <nextStateMachine>:

void nextStateMachine(TrafficLight* light, int red_t, int other_t, int* current_red, int* flag, int* waiting_time, int* button_flag_button, int* start_time) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
	static int prev = 0;
    switch (*light) {
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	f200 80f5 	bhi.w	8000eaa <nextStateMachine+0x202>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <nextStateMachine+0x20>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cd9 	.word	0x08000cd9
 8000ccc:	08000d5f 	.word	0x08000d5f
 8000cd0:	08000db5 	.word	0x08000db5
 8000cd4:	08000e57 	.word	0x08000e57
        case RED:
        	if(*flag == 1){ // ждём
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d11f      	bne.n	8000d20 <nextStateMachine+0x78>
        		if(HAL_GetTick() >= *waiting_time){
 8000ce0:	f000 fb62 	bl	80013a8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d305      	bcc.n	8000cfa <nextStateMachine+0x52>
        			*light = GREEN;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
        		}
        		if(*button_flag_button){
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80dc 	beq.w	8000ebc <nextStateMachine+0x214>
        			(*button_flag_button) = 0;
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
        			(*waiting_time) = (*start_time) + (*current_red);
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	441a      	add	r2, r3
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	601a      	str	r2, [r3, #0]
        			(*current_red) = red_t;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
        		*button_flag_button = 0;
        		(*current_red) = red_t;
        		*flag = 1;
        	}
            break;
 8000d1e:	e0cd      	b.n	8000ebc <nextStateMachine+0x214>
        		reset_LEDS();
 8000d20:	f7ff ffb6 	bl	8000c90 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2a:	486a      	ldr	r0, [pc, #424]	; (8000ed4 <nextStateMachine+0x22c>)
 8000d2c:	f7ff ff28 	bl	8000b80 <set_LED>
        		(*start_time) = HAL_GetTick();
 8000d30:	f000 fb3a 	bl	80013a8 <HAL_GetTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	601a      	str	r2, [r3, #0]
        		*waiting_time = (*start_time) + (*current_red);
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	441a      	add	r2, r3
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	601a      	str	r2, [r3, #0]
        		*button_flag_button = 0;
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
        		(*current_red) = red_t;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
            break;
 8000d5c:	e0ae      	b.n	8000ebc <nextStateMachine+0x214>
        case GREEN:
        	if(*flag == 1){ // ждём
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d10e      	bne.n	8000d84 <nextStateMachine+0xdc>
        		if(HAL_GetTick() >= *waiting_time){
 8000d66:	f000 fb1f 	bl	80013a8 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f0c0 80a5 	bcc.w	8000ec0 <nextStateMachine+0x218>
        			*light = GREEN_BLINK;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2202      	movs	r2, #2
 8000d7a:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 8000d82:	e09d      	b.n	8000ec0 <nextStateMachine+0x218>
        		reset_LEDS();
 8000d84:	f7ff ff84 	bl	8000c90 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8e:	4851      	ldr	r0, [pc, #324]	; (8000ed4 <nextStateMachine+0x22c>)
 8000d90:	f7ff fef6 	bl	8000b80 <set_LED>
        		(*start_time) = HAL_GetTick();
 8000d94:	f000 fb08 	bl	80013a8 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	441a      	add	r2, r3
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
            break;
 8000db2:	e085      	b.n	8000ec0 <nextStateMachine+0x218>
        case GREEN_BLINK:
        	if(*flag == 1){ // ждём
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d12e      	bne.n	8000e1a <nextStateMachine+0x172>
        		if(HAL_GetTick() >= *waiting_time){
 8000dbc:	f000 faf4 	bl	80013a8 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d305      	bcc.n	8000dd6 <nextStateMachine+0x12e>
        			*light = YELLOW;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
        		}
        		if(HAL_GetTick() - prev >= (other_t) / 8) {
 8000dd6:	f000 fae7 	bl	80013a8 <HAL_GetTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <nextStateMachine+0x230>)
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	1a9a      	subs	r2, r3, r2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da00      	bge.n	8000dea <nextStateMachine+0x142>
 8000de8:	3307      	adds	r3, #7
 8000dea:	10db      	asrs	r3, r3, #3
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d369      	bcc.n	8000ec4 <nextStateMachine+0x21c>
        			prev = HAL_GetTick();
 8000df0:	f000 fada 	bl	80013a8 <HAL_GetTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <nextStateMachine+0x230>)
 8000dfa:	601a      	str	r2, [r3, #0]
        			//inline toggle
        			uint32_t odr = GPIOD->ODR;
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <nextStateMachine+0x22c>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	617b      	str	r3, [r7, #20]
        			GPIOD->BSRR = ((odr & GPIO_PIN_13) << 16U) | (~odr & GPIO_PIN_13);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e12:	4930      	ldr	r1, [pc, #192]	; (8000ed4 <nextStateMachine+0x22c>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	618b      	str	r3, [r1, #24]
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		prev = HAL_GetTick();
        		*flag = 1;
        	}
            break;
 8000e18:	e054      	b.n	8000ec4 <nextStateMachine+0x21c>
        		reset_LEDS();
 8000e1a:	f7ff ff39 	bl	8000c90 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e24:	482b      	ldr	r0, [pc, #172]	; (8000ed4 <nextStateMachine+0x22c>)
 8000e26:	f7ff feab 	bl	8000b80 <set_LED>
        		(*start_time) = HAL_GetTick();
 8000e2a:	f000 fabd 	bl	80013a8 <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	441a      	add	r2, r3
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	601a      	str	r2, [r3, #0]
        		prev = HAL_GetTick();
 8000e42:	f000 fab1 	bl	80013a8 <HAL_GetTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <nextStateMachine+0x230>)
 8000e4c:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
            break;
 8000e54:	e036      	b.n	8000ec4 <nextStateMachine+0x21c>
        case YELLOW:
        	if(*flag == 1){ // ждём
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10d      	bne.n	8000e7a <nextStateMachine+0x1d2>
        		if(HAL_GetTick() >= *waiting_time){
 8000e5e:	f000 faa3 	bl	80013a8 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d32d      	bcc.n	8000ec8 <nextStateMachine+0x220>
        			*light = RED;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
        			*flag = 0;
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
        		(*start_time) = HAL_GetTick();
        		(*waiting_time) = (*start_time) + (other_t);
        		*flag = 1;
        	}
            break;
 8000e78:	e026      	b.n	8000ec8 <nextStateMachine+0x220>
        		reset_LEDS();
 8000e7a:	f7ff ff09 	bl	8000c90 <reset_LEDS>
        		set_LED(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <nextStateMachine+0x22c>)
 8000e86:	f7ff fe7b 	bl	8000b80 <set_LED>
        		(*start_time) = HAL_GetTick();
 8000e8a:	f000 fa8d 	bl	80013a8 <HAL_GetTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	601a      	str	r2, [r3, #0]
        		(*waiting_time) = (*start_time) + (other_t);
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	601a      	str	r2, [r3, #0]
        		*flag = 1;
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
            break;
 8000ea8:	e00e      	b.n	8000ec8 <nextStateMachine+0x220>
        default:
        	reset_LEDS();
 8000eaa:	f7ff fef1 	bl	8000c90 <reset_LEDS>
        	*flag = 0;
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
        	*light = RED;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
            break;
 8000eba:	e006      	b.n	8000eca <nextStateMachine+0x222>
            break;
 8000ebc:	bf00      	nop
 8000ebe:	e004      	b.n	8000eca <nextStateMachine+0x222>
            break;
 8000ec0:	bf00      	nop
 8000ec2:	e002      	b.n	8000eca <nextStateMachine+0x222>
            break;
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <nextStateMachine+0x222>
            break;
 8000ec8:	bf00      	nop
    }
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	200004ec 	.word	0x200004ec

08000edc <check_button>:

void check_button(int* cnt, int other_t, int* current_red, int* button_flag_button){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
	if(read_button(cnt)){
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fea8 	bl	8000c40 <read_button>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <check_button+0x26>
		(*current_red) = other_t;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	601a      	str	r2, [r3, #0]
		(*button_flag_button) = 1;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
	}
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <enable_interrupt>:

void enable_interrupt(struct mech_data* tfl_obj) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f12:	2047      	movs	r0, #71	; 0x47
 8000f14:	f000 fb6f 	bl	80015f6 <HAL_NVIC_EnableIRQ>
	tfl_obj->interupt_enable = 1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <disable_interrupt>:

void disable_interrupt(struct mech_data* tfl_obj) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive(&huart6);
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <disable_interrupt+0x24>)
 8000f32:	f001 fc3b 	bl	80027ac <HAL_UART_AbortReceive>
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8000f36:	2047      	movs	r0, #71	; 0x47
 8000f38:	f000 fb6b 	bl	8001612 <HAL_NVIC_DisableIRQ>
	tfl_obj->interupt_enable = 0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200004f0 	.word	0x200004f0

08000f50 <deshifr>:

void deshifr(char* in_buf, int* cur_length, struct mech_data* tfl_obj){
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b0ab      	sub	sp, #172	; 0xac
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	int cmp_res = strncmp(in_buf, "!", 1);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	4b81      	ldr	r3, [pc, #516]	; (8001168 <deshifr+0x218>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if(cmp_res == 0){
 8000f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12c      	bne.n	8000fcc <deshifr+0x7c>
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "current_state is %s, timeout is %d, mode is %d, I is %d\r", getColorName(tfl_obj->state), tfl_obj->red_time, tfl_obj->work_mode, tfl_obj->interupt_enable);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fe33 	bl	8000be4 <getColorName>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f8c:	f107 0014 	add.w	r0, r7, #20
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	460b      	mov	r3, r1
 8000f96:	4622      	mov	r2, r4
 8000f98:	4974      	ldr	r1, [pc, #464]	; (800116c <deshifr+0x21c>)
 8000f9a:	f002 fc3b 	bl	8003814 <siprintf>
 8000f9e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(tfl_obj->interupt_enable){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <deshifr+0x6a>
			transend_data_IT(out_buffer, transmitted_data_len);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fba6 	bl	8000704 <transend_data_IT>
 8000fb8:	e008      	b.n	8000fcc <deshifr+0x7c>
		}
		else{
			HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 8000fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 0114 	add.w	r1, r7, #20
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	486a      	ldr	r0, [pc, #424]	; (8001170 <deshifr+0x220>)
 8000fc8:	f001 fa47 	bl	800245a <HAL_UART_Transmit>
		}
	}
	char* set_mode_flag = strstr(in_buf, "set mode ");
 8000fcc:	4969      	ldr	r1, [pc, #420]	; (8001174 <deshifr+0x224>)
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f002 fc54 	bl	800387c <strstr>
 8000fd4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if(set_mode_flag) {
 8000fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d024      	beq.n	800102a <deshifr+0xda>
		int val = (*(set_mode_flag + 9) - '0');
 8000fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe4:	3309      	adds	r3, #9
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3b30      	subs	r3, #48	; 0x30
 8000fea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		tfl_obj->work_mode = val;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000ff4:	621a      	str	r2, [r3, #32]
		if(val == 0)
 8000ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <deshifr+0xb4>
			tfl_obj->button_pressed_flag = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "data change to %d\r", val);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800100c:	495a      	ldr	r1, [pc, #360]	; (8001178 <deshifr+0x228>)
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fc00 	bl	8003814 <siprintf>
 8001014:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 8001018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800101c:	b29a      	uxth	r2, r3
 800101e:	f107 0114 	add.w	r1, r7, #20
 8001022:	230a      	movs	r3, #10
 8001024:	4852      	ldr	r0, [pc, #328]	; (8001170 <deshifr+0x220>)
 8001026:	f001 fa18 	bl	800245a <HAL_UART_Transmit>
	}
	char* set_red_time = strstr(in_buf, "set timeout ");
 800102a:	4954      	ldr	r1, [pc, #336]	; (800117c <deshifr+0x22c>)
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f002 fc25 	bl	800387c <strstr>
 8001032:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	if(set_red_time) {
 8001036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d054      	beq.n	80010e8 <deshifr+0x198>
		set_red_time = set_red_time + 12;
 800103e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001042:	330c      	adds	r3, #12
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		int val = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while(*set_red_time != '\0') {
 800104e:	e012      	b.n	8001076 <deshifr+0x126>
			val = val * 10 + (*set_red_time - '0');
 8001050:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	461a      	mov	r2, r3
 800105e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3b30      	subs	r3, #48	; 0x30
 8001066:	4413      	add	r3, r2
 8001068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			set_red_time++;
 800106c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		while(*set_red_time != '\0') {
 8001076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e7      	bne.n	8001050 <deshifr+0x100>
		}
		if(tfl_obj->current_red == tfl_obj->red_time)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d104      	bne.n	8001096 <deshifr+0x146>
			tfl_obj->current_red = val;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	e008      	b.n	80010a8 <deshifr+0x158>
		else
			tfl_obj->current_red = val / 4;
 8001096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800109a:	2b00      	cmp	r3, #0
 800109c:	da00      	bge.n	80010a0 <deshifr+0x150>
 800109e:	3303      	adds	r3, #3
 80010a0:	109b      	asrs	r3, r3, #2
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
		tfl_obj->red_time = val;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80010ae:	601a      	str	r2, [r3, #0]
		tfl_obj->other_time = tfl_obj-> red_time / 4;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da00      	bge.n	80010ba <deshifr+0x16a>
 80010b8:	3303      	adds	r3, #3
 80010ba:	109b      	asrs	r3, r3, #2
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
		char out_buffer[100];
		int transmitted_data_len;
		transmitted_data_len = sprintf(out_buffer, "red timeout change to %d\r", tfl_obj->current_red);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	492d      	ldr	r1, [pc, #180]	; (8001180 <deshifr+0x230>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fba1 	bl	8003814 <siprintf>
 80010d2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10 );
 80010d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f107 0114 	add.w	r1, r7, #20
 80010e0:	230a      	movs	r3, #10
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <deshifr+0x220>)
 80010e4:	f001 f9b9 	bl	800245a <HAL_UART_Transmit>
	}

	cmp_res = strncmp(in_buf, "set interrupts on", 17);
 80010e8:	2211      	movs	r2, #17
 80010ea:	4926      	ldr	r1, [pc, #152]	; (8001184 <deshifr+0x234>)
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f002 fbb1 	bl	8003854 <strncmp>
 80010f2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(cmp_res == 0) {
 80010f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d111      	bne.n	8001122 <deshifr+0x1d2>
		char out_buffer[100];
		int transmitted_data_len = sprintf(out_buffer, "interupt enable\r");
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <deshifr+0x238>)
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fb85 	bl	8003814 <siprintf>
 800110a:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10);
 800110c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110e:	b29a      	uxth	r2, r3
 8001110:	f107 0114 	add.w	r1, r7, #20
 8001114:	230a      	movs	r3, #10
 8001116:	4816      	ldr	r0, [pc, #88]	; (8001170 <deshifr+0x220>)
 8001118:	f001 f99f 	bl	800245a <HAL_UART_Transmit>
		enable_interrupt(tfl_obj);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fef4 	bl	8000f0a <enable_interrupt>
	}

	cmp_res = strncmp(in_buf, "set interrupts off", 18);
 8001122:	2212      	movs	r2, #18
 8001124:	4919      	ldr	r1, [pc, #100]	; (800118c <deshifr+0x23c>)
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f002 fb94 	bl	8003854 <strncmp>
 800112c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(cmp_res == 0) {
 8001130:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001134:	2b00      	cmp	r3, #0
 8001136:	d112      	bne.n	800115e <deshifr+0x20e>
		char out_buffer[100];
		int transmitted_data_len = sprintf(out_buffer, "interupt disable\r");
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4914      	ldr	r1, [pc, #80]	; (8001190 <deshifr+0x240>)
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fb68 	bl	8003814 <siprintf>
 8001144:	67b8      	str	r0, [r7, #120]	; 0x78
		HAL_UART_Transmit( &huart6, (uint8_t *) out_buffer, transmitted_data_len, 10);
 8001146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0114 	add.w	r1, r7, #20
 800114e:	230a      	movs	r3, #10
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <deshifr+0x220>)
 8001152:	f001 f982 	bl	800245a <HAL_UART_Transmit>
		disable_interrupt(tfl_obj);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fee6 	bl	8000f28 <disable_interrupt>
	}

	return;
 800115c:	bf00      	nop
 800115e:	bf00      	nop
}
 8001160:	37a4      	adds	r7, #164	; 0xa4
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	08004184 	.word	0x08004184
 800116c:	08004188 	.word	0x08004188
 8001170:	200004f0 	.word	0x200004f0
 8001174:	080041c4 	.word	0x080041c4
 8001178:	080041d0 	.word	0x080041d0
 800117c:	080041e4 	.word	0x080041e4
 8001180:	080041f4 	.word	0x080041f4
 8001184:	08004210 	.word	0x08004210
 8001188:	08004224 	.word	0x08004224
 800118c:	08004238 	.word	0x08004238
 8001190:	0800424c 	.word	0x0800424c

08001194 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART6_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011a0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART6_UART_Init+0x4c>)
 80011cc:	f001 f8f8 	bl	80023c0 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f7ff fc29 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200004f0 	.word	0x200004f0
 80011e4:	40011400 	.word	0x40011400

080011e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_UART_MspInit+0x94>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d133      	bne.n	8001272 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_UART_MspInit+0x98>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x98>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_UART_MspInit+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001252:	2308      	movs	r3, #8
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_UART_MspInit+0x9c>)
 800125e:	f000 fa91 	bl	8001784 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2047      	movs	r0, #71	; 0x47
 8001268:	f000 f9a9 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800126c:	2047      	movs	r0, #71	; 0x47
 800126e:	f000 f9c2 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40011400 	.word	0x40011400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a4:	4c0b      	ldr	r4, [pc, #44]	; (80012d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b2:	f7ff fc53 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 fa81 	bl	80037bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff faa9 	bl	8000810 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012cc:	080042bc 	.word	0x080042bc
  ldr r2, =_sbss
 80012d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012d4:	20000548 	.word	0x20000548

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f94f 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	200f      	movs	r0, #15
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fb92 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f975 	bl	800162e <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f92f 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000534 	.word	0x20000534

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000534 	.word	0x20000534

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db12      	blt.n	8001498 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <__NVIC_DisableIRQ+0x44>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	3320      	adds	r3, #32
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800148c:	f3bf 8f4f 	dsb	sy
}
 8001490:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001492:	f3bf 8f6f 	isb	sy
}
 8001496:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff05 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff1a 	bl	8001408 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff0d 	bl	8001424 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff1d 	bl	8001460 <__NVIC_DisableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff94 	bl	8001564 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff fea8 	bl	80013a8 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e052      	b.n	800171e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0216 	bic.w	r2, r2, #22
 8001686:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_DMA_Abort+0x62>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e013      	b.n	80016f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fe6d 	bl	80013a8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d90c      	bls.n	80016f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e015      	b.n	800171e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e4      	bne.n	80016ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d004      	beq.n	8001744 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00c      	b.n	800175e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2205      	movs	r2, #5
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e177      	b.n	8001a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8166 	bne.w	8001a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80c0 	beq.w	8001a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a61      	ldr	r2, [pc, #388]	; (8001aac <HAL_GPIO_Init+0x328>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_GPIO_Init+0x32c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d037      	beq.n	80019c2 <HAL_GPIO_Init+0x23e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_GPIO_Init+0x330>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <HAL_GPIO_Init+0x23a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a56      	ldr	r2, [pc, #344]	; (8001ab8 <HAL_GPIO_Init+0x334>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x236>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a55      	ldr	r2, [pc, #340]	; (8001abc <HAL_GPIO_Init+0x338>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x232>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <HAL_GPIO_Init+0x33c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x22e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <HAL_GPIO_Init+0x340>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x22a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_GPIO_Init+0x344>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	; (8001acc <HAL_GPIO_Init+0x348>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_GPIO_Init+0x34c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_GPIO_Init+0x350>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x21a>
 800199a:	2309      	movs	r3, #9
 800199c:	e012      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 800199e:	230a      	movs	r3, #10
 80019a0:	e010      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a2:	2308      	movs	r3, #8
 80019a4:	e00e      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x240>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	; (8001aac <HAL_GPIO_Init+0x328>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_GPIO_Init+0x354>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae84 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021c00 	.word	0x40021c00
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40022400 	.word	0x40022400
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e267      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d075      	beq.n	8001c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e242      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x74>
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b70      	ldr	r3, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6f      	ldr	r2, [pc, #444]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a68      	ldr	r2, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fbee 	bl	80013a8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fbea 	bl	80013a8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e207      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fbda 	bl	80013a8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fbd6 	bl	80013a8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1f3      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d116      	bne.n	8001c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1c7      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	e03a      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fb8f 	bl	80013a8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fb8b 	bl	80013a8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1a8      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4925      	ldr	r1, [pc, #148]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_OscConfig+0x244>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb6e 	bl	80013a8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb6a 	bl	80013a8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e187      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d036      	beq.n	8001d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d016      	beq.n	8001d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x248>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fb4e 	bl	80013a8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fb4a 	bl	80013a8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e167      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x240>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x200>
 8001d2e:	e01b      	b.n	8001d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x248>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb37 	bl	80013a8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	e00e      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fb33 	bl	80013a8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d907      	bls.n	8001d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e150      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	42470000 	.word	0x42470000
 8001d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ea      	bne.n	8001d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8097 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b81      	ldr	r3, [pc, #516]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	4b7d      	ldr	r3, [pc, #500]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a7c      	ldr	r2, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b77      	ldr	r3, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a73      	ldr	r2, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff faf3 	bl	80013a8 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff faef 	bl	80013a8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e10c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x474>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2ea>
 8001dec:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
 8001df8:	e01c      	b.n	8001e34 <HAL_RCC_OscConfig+0x324>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x30c>
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a5e      	ldr	r2, [pc, #376]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a5b      	ldr	r2, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0x324>
 8001e1c:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d015      	beq.n	8001e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fab4 	bl	80013a8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff fab0 	bl	80013a8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0cb      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ee      	beq.n	8001e44 <HAL_RCC_OscConfig+0x334>
 8001e66:	e014      	b.n	8001e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fa9e 	bl	80013a8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff fa9a 	bl	80013a8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0b5      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ee      	bne.n	8001e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a1 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d05c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d141      	bne.n	8001f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fa6e 	bl	80013a8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff fa6a 	bl	80013a8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e087      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	491b      	ldr	r1, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa43 	bl	80013a8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fa3f 	bl	80013a8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e05c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x416>
 8001f44:	e054      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_OscConfig+0x478>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa2c 	bl	80013a8 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff fa28 	bl	80013a8 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e045      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x470>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x444>
 8001f72:	e03d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e038      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40007000 	.word	0x40007000
 8001f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x4ec>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d028      	beq.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d121      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0cc      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d90c      	bls.n	800203c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0b8      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	494d      	ldr	r1, [pc, #308]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d044      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d119      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e07f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d003      	beq.n	80020be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e067      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f95a 	bl	80013a8 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7ff f956 	bl	80013a8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e04f      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d20c      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e032      	b.n	80021ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002186:	f000 f821 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800218a:	4602      	mov	r2, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	490a      	ldr	r1, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8ba 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08004260 	.word	0x08004260
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d0:	b090      	sub	sp, #64	; 0x40
 80021d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d00d      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x40>
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	f200 80a1 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x16c>
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x34>
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x3a>
 80021fe:	e09b      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_GetSysClockFreq+0x184>)
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002204:	e09b      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800220a:	e098      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d028      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	2200      	movs	r2, #0
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	627a      	str	r2, [r7, #36]	; 0x24
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002234:	2100      	movs	r1, #0
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002238:	fb03 f201 	mul.w	r2, r3, r1
 800223c:	2300      	movs	r3, #0
 800223e:	fb00 f303 	mul.w	r3, r0, r3
 8002242:	4413      	add	r3, r2
 8002244:	4a43      	ldr	r2, [pc, #268]	; (8002354 <HAL_RCC_GetSysClockFreq+0x188>)
 8002246:	fba0 1202 	umull	r1, r2, r0, r2
 800224a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800224c:	460a      	mov	r2, r1
 800224e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002252:	4413      	add	r3, r2
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	2200      	movs	r2, #0
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	61fa      	str	r2, [r7, #28]
 800225e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002266:	f7fe f813 	bl	8000290 <__aeabi_uldivmod>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4613      	mov	r3, r2
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002272:	e053      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	2200      	movs	r2, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	617a      	str	r2, [r7, #20]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002286:	f04f 0b00 	mov.w	fp, #0
 800228a:	4652      	mov	r2, sl
 800228c:	465b      	mov	r3, fp
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229c:	0150      	lsls	r0, r2, #5
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	ebb2 080a 	subs.w	r8, r2, sl
 80022a6:	eb63 090b 	sbc.w	r9, r3, fp
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022be:	ebb2 0408 	subs.w	r4, r2, r8
 80022c2:	eb63 0509 	sbc.w	r5, r3, r9
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	00eb      	lsls	r3, r5, #3
 80022d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d4:	00e2      	lsls	r2, r4, #3
 80022d6:	4614      	mov	r4, r2
 80022d8:	461d      	mov	r5, r3
 80022da:	eb14 030a 	adds.w	r3, r4, sl
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	eb45 030b 	adc.w	r3, r5, fp
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022f2:	4629      	mov	r1, r5
 80022f4:	028b      	lsls	r3, r1, #10
 80022f6:	4621      	mov	r1, r4
 80022f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022fc:	4621      	mov	r1, r4
 80022fe:	028a      	lsls	r2, r1, #10
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	2200      	movs	r2, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002310:	f7fd ffbe 	bl	8000290 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800232c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x184>)
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002340:	4618      	mov	r0, r3
 8002342:	3740      	adds	r7, #64	; 0x40
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	017d7840 	.word	0x017d7840

08002358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	08004270 	.word	0x08004270

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff ffdc 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0b5b      	lsrs	r3, r3, #13
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08004270 	.word	0x08004270

080023c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e03f      	b.n	8002452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fefe 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 ff5f 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08a      	sub	sp, #40	; 0x28
 800245e:	af02      	add	r7, sp, #8
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d17c      	bne.n	8002574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_Transmit+0x2c>
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e075      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit+0x3e>
 8002494:	2302      	movs	r3, #2
 8002496:	e06e      	b.n	8002576 <HAL_UART_Transmit+0x11c>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2221      	movs	r2, #33	; 0x21
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ae:	f7fe ff7b 	bl	80013a8 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d108      	bne.n	80024dc <HAL_UART_Transmit+0x82>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e003      	b.n	80024e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024ec:	e02a      	b.n	8002544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fc9f 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e036      	b.n	8002576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3302      	adds	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e007      	b.n	8002536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3301      	adds	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1cf      	bne.n	80024ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fc6f 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e006      	b.n	8002576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b08a      	sub	sp, #40	; 0x28
 8002582:	af02      	add	r7, sp, #8
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	f040 808c 	bne.w	80026b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_UART_Receive+0x2e>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e084      	b.n	80026ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UART_Receive+0x40>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e07d      	b.n	80026ba <HAL_UART_Receive+0x13c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2222      	movs	r2, #34	; 0x22
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025da:	f7fe fee5 	bl	80013a8 <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	88fa      	ldrh	r2, [r7, #6]
 80025ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Receive+0x8a>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002618:	e043      	b.n	80026a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	2120      	movs	r1, #32
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fc09 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e042      	b.n	80026ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	b29a      	uxth	r2, r3
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	3302      	adds	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	e01f      	b.n	8002694 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d007      	beq.n	800266e <HAL_UART_Receive+0xf0>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_UART_Receive+0xfe>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e008      	b.n	800268e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002688:	b2da      	uxtb	r2, r3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1b6      	bne.n	800261a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d130      	bne.n	800273e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_UART_Transmit_IT+0x26>
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e029      	b.n	8002740 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Transmit_IT+0x38>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e022      	b.n	8002740 <HAL_UART_Transmit_IT+0x7e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002738:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d11d      	bne.n	80027a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_UART_Receive_IT+0x26>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e016      	b.n	80027a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_UART_Receive_IT+0x38>
 8002780:	2302      	movs	r3, #2
 8002782:	e00f      	b.n	80027a4 <HAL_UART_Receive_IT+0x58>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	461a      	mov	r2, r3
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fbbd 	bl	8002f18 <UART_Start_Receive_IT>
 800279e:	4603      	mov	r3, r0
 80027a0:	e000      	b.n	80027a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b09a      	sub	sp, #104	; 0x68
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027be:	e853 3f00 	ldrex	r3, [r3]
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027d4:	657a      	str	r2, [r7, #84]	; 0x54
 80027d6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e5      	bne.n	80027b4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002808:	643a      	str	r2, [r7, #64]	; 0x40
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800280e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	2b01      	cmp	r3, #1
 8002822:	d119      	bne.n	8002858 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	61fb      	str	r3, [r7, #28]
   return(result);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f023 0310 	bic.w	r3, r3, #16
 800283a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e5      	bne.n	8002824 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d136      	bne.n	80028d4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	60bb      	str	r3, [r7, #8]
   return(result);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287c:	65bb      	str	r3, [r7, #88]	; 0x58
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002886:	61ba      	str	r2, [r7, #24]
 8002888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	6979      	ldr	r1, [r7, #20]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	613b      	str	r3, [r7, #16]
   return(result);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e5      	bne.n	8002866 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	2200      	movs	r2, #0
 80028a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fec9 	bl	8001646 <HAL_DMA_Abort>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe ff53 	bl	800176a <HAL_DMA_GetError>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d104      	bne.n	80028d4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2210      	movs	r2, #16
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e00a      	b.n	80028ea <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3768      	adds	r7, #104	; 0x68
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b0ba      	sub	sp, #232	; 0xe8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800293a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_UART_IRQHandler+0x66>
 8002946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fbfd 	bl	8003152 <UART_Receive_IT>
      return;
 8002958:	e256      	b.n	8002e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800295a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80de 	beq.w	8002b20 <HAL_UART_IRQHandler+0x22c>
 8002964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80d1 	beq.w	8002b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800297e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_UART_IRQHandler+0xae>
 800298a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_UART_IRQHandler+0xd2>
 80029ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0202 	orr.w	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_UART_IRQHandler+0xf6>
 80029d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f043 0204 	orr.w	r2, r3, #4
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_UART_IRQHandler+0x126>
 80029f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0208 	orr.w	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 81ed 	beq.w	8002dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_UART_IRQHandler+0x14e>
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb88 	bl	8003152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_UART_IRQHandler+0x17a>
 8002a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04f      	beq.n	8002b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fa90 	bl	8002f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d141      	bne.n	8002b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1d9      	bne.n	8002a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d013      	beq.n	8002afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4a7d      	ldr	r2, [pc, #500]	; (8002cd0 <HAL_UART_IRQHandler+0x3dc>)
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fe1f 	bl	8001726 <HAL_DMA_Abort_IT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af8:	4610      	mov	r0, r2
 8002afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	e00e      	b.n	8002b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f986 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	e00a      	b.n	8002b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f982 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	e006      	b.n	8002b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f97e 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b1a:	e170      	b.n	8002dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	bf00      	nop
    return;
 8002b1e:	e16e      	b.n	8002dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	f040 814a 	bne.w	8002dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8143 	beq.w	8002dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 813c 	beq.w	8002dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	f040 80b4 	bne.w	8002cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8140 	beq.w	8002e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f080 8139 	bcs.w	8002e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	f000 8088 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1d9      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e1      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c86:	f023 0310 	bic.w	r3, r3, #16
 8002c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	330c      	adds	r3, #12
 8002c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e3      	bne.n	8002c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fcc8 	bl	8001646 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8ac 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ccc:	e099      	b.n	8002e02 <HAL_UART_IRQHandler+0x50e>
 8002cce:	bf00      	nop
 8002cd0:	0800305b 	.word	0x0800305b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 808b 	beq.w	8002e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8086 	beq.w	8002e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e3      	bne.n	8002cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	e853 3f00 	ldrex	r3, [r3]
 8002d40:	623b      	str	r3, [r7, #32]
   return(result);
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d56:	633a      	str	r2, [r7, #48]	; 0x30
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e3      	bne.n	8002d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0310 	bic.w	r3, r3, #16
 8002d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d9c:	61fa      	str	r2, [r7, #28]
 8002d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	617b      	str	r3, [r7, #20]
   return(result);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e3      	bne.n	8002d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f834 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dbc:	e023      	b.n	8002e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_UART_IRQHandler+0x4ea>
 8002dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f953 	bl	8003082 <UART_Transmit_IT>
    return;
 8002ddc:	e014      	b.n	8002e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <HAL_UART_IRQHandler+0x514>
 8002dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f993 	bl	8003122 <UART_EndTransmit_IT>
    return;
 8002dfc:	e004      	b.n	8002e08 <HAL_UART_IRQHandler+0x514>
    return;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <HAL_UART_IRQHandler+0x514>
      return;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <HAL_UART_IRQHandler+0x514>
      return;
 8002e06:	bf00      	nop
  }
}
 8002e08:	37e8      	adds	r7, #232	; 0xe8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b090      	sub	sp, #64	; 0x40
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	e050      	b.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d04c      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e5c:	f7fe faa4 	bl	80013a8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d241      	bcs.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8c:	637a      	str	r2, [r7, #52]	; 0x34
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e5      	bne.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec0:	623a      	str	r2, [r7, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	69f9      	ldr	r1, [r7, #28]
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e00f      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d09f      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3740      	adds	r7, #64	; 0x40
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2222      	movs	r2, #34	; 0x22
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b095      	sub	sp, #84	; 0x54
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e5      	bne.n	8002f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	2b01      	cmp	r3, #1
 800300a:	d119      	bne.n	8003040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	60bb      	str	r3, [r7, #8]
   return(result);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0310 	bic.w	r3, r3, #16
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800302c:	61ba      	str	r2, [r7, #24]
 800302e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	613b      	str	r3, [r7, #16]
   return(result);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800304e:	bf00      	nop
 8003050:	3754      	adds	r7, #84	; 0x54
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fecb 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b21      	cmp	r3, #33	; 0x21
 8003094:	d13e      	bne.n	8003114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d114      	bne.n	80030ca <UART_Transmit_IT+0x48>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d110      	bne.n	80030ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	1c9a      	adds	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	621a      	str	r2, [r3, #32]
 80030c8:	e008      	b.n	80030dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6211      	str	r1, [r2, #32]
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fb54 	bl	80007f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b22      	cmp	r3, #34	; 0x22
 8003164:	f040 80ab 	bne.w	80032be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d117      	bne.n	80031a2 <UART_Receive_IT+0x50>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	b29a      	uxth	r2, r3
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
 80031a0:	e026      	b.n	80031f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d007      	beq.n	80031c6 <UART_Receive_IT+0x74>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <UART_Receive_IT+0x82>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e008      	b.n	80031e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003200:	2b00      	cmp	r3, #0
 8003202:	d15a      	bne.n	80032ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0220 	bic.w	r2, r2, #32
 8003212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	2b01      	cmp	r3, #1
 8003242:	d135      	bne.n	80032b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	613b      	str	r3, [r7, #16]
   return(result);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	623a      	str	r2, [r7, #32]
 800326c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	69f9      	ldr	r1, [r7, #28]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	61bb      	str	r3, [r7, #24]
   return(result);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d10a      	bne.n	80032a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fdbb 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
 80032ae:	e002      	b.n	80032b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fa69 	bl	8000788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e002      	b.n	80032c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b0c0      	sub	sp, #256	; 0x100
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	68d9      	ldr	r1, [r3, #12]
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	ea40 0301 	orr.w	r3, r0, r1
 80032f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	431a      	orrs	r2, r3
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003320:	f021 010c 	bic.w	r1, r1, #12
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800332e:	430b      	orrs	r3, r1
 8003330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	6999      	ldr	r1, [r3, #24]
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	ea40 0301 	orr.w	r3, r0, r1
 800334e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <UART_SetConfig+0x2cc>)
 8003358:	429a      	cmp	r2, r3
 800335a:	d005      	beq.n	8003368 <UART_SetConfig+0xa0>
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <UART_SetConfig+0x2d0>)
 8003364:	429a      	cmp	r2, r3
 8003366:	d104      	bne.n	8003372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7ff f816 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 800336c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003370:	e003      	b.n	800337a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003372:	f7fe fffd 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003376:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	f040 810c 	bne.w	80035a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003392:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	1891      	adds	r1, r2, r2
 80033a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033a2:	415b      	adcs	r3, r3
 80033a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033aa:	4621      	mov	r1, r4
 80033ac:	eb12 0801 	adds.w	r8, r2, r1
 80033b0:	4629      	mov	r1, r5
 80033b2:	eb43 0901 	adc.w	r9, r3, r1
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ca:	4690      	mov	r8, r2
 80033cc:	4699      	mov	r9, r3
 80033ce:	4623      	mov	r3, r4
 80033d0:	eb18 0303 	adds.w	r3, r8, r3
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033d8:	462b      	mov	r3, r5
 80033da:	eb49 0303 	adc.w	r3, r9, r3
 80033de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033f6:	460b      	mov	r3, r1
 80033f8:	18db      	adds	r3, r3, r3
 80033fa:	653b      	str	r3, [r7, #80]	; 0x50
 80033fc:	4613      	mov	r3, r2
 80033fe:	eb42 0303 	adc.w	r3, r2, r3
 8003402:	657b      	str	r3, [r7, #84]	; 0x54
 8003404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800340c:	f7fc ff40 	bl	8000290 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <UART_SetConfig+0x2d4>)
 8003416:	fba3 2302 	umull	r2, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	011c      	lsls	r4, r3, #4
 800341e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003428:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800342c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	1891      	adds	r1, r2, r2
 8003436:	64b9      	str	r1, [r7, #72]	; 0x48
 8003438:	415b      	adcs	r3, r3
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003440:	4641      	mov	r1, r8
 8003442:	eb12 0a01 	adds.w	sl, r2, r1
 8003446:	4649      	mov	r1, r9
 8003448:	eb43 0b01 	adc.w	fp, r3, r1
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800345c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003460:	4692      	mov	sl, r2
 8003462:	469b      	mov	fp, r3
 8003464:	4643      	mov	r3, r8
 8003466:	eb1a 0303 	adds.w	r3, sl, r3
 800346a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800346e:	464b      	mov	r3, r9
 8003470:	eb4b 0303 	adc.w	r3, fp, r3
 8003474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800348c:	460b      	mov	r3, r1
 800348e:	18db      	adds	r3, r3, r3
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
 8003492:	4613      	mov	r3, r2
 8003494:	eb42 0303 	adc.w	r3, r2, r3
 8003498:	647b      	str	r3, [r7, #68]	; 0x44
 800349a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800349e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034a2:	f7fc fef5 	bl	8000290 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <UART_SetConfig+0x2d4>)
 80034ae:	fba3 2301 	umull	r2, r3, r3, r1
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2264      	movs	r2, #100	; 0x64
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	1acb      	subs	r3, r1, r3
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <UART_SetConfig+0x2d4>)
 80034c4:	fba3 2302 	umull	r2, r3, r3, r2
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d0:	441c      	add	r4, r3
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80034ec:	415b      	adcs	r3, r3
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6339      	str	r1, [r7, #48]	; 0x30
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003528:	464b      	mov	r3, r9
 800352a:	460a      	mov	r2, r1
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003540:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003548:	460b      	mov	r3, r1
 800354a:	18db      	adds	r3, r3, r3
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	4613      	mov	r3, r2
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800355a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800355e:	f7fc fe97 	bl	8000290 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <UART_SetConfig+0x2d4>)
 8003568:	fba3 1302 	umull	r1, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	2164      	movs	r1, #100	; 0x64
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3332      	adds	r3, #50	; 0x32
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <UART_SetConfig+0x2d4>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	f003 0207 	and.w	r2, r3, #7
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4422      	add	r2, r4
 800358e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003590:	e105      	b.n	800379e <UART_SetConfig+0x4d6>
 8003592:	bf00      	nop
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035b2:	4642      	mov	r2, r8
 80035b4:	464b      	mov	r3, r9
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	6239      	str	r1, [r7, #32]
 80035ba:	415b      	adcs	r3, r3
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035c2:	4641      	mov	r1, r8
 80035c4:	1854      	adds	r4, r2, r1
 80035c6:	4649      	mov	r1, r9
 80035c8:	eb43 0501 	adc.w	r5, r3, r1
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	00eb      	lsls	r3, r5, #3
 80035d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035da:	00e2      	lsls	r2, r4, #3
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	4643      	mov	r3, r8
 80035e2:	18e3      	adds	r3, r4, r3
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e8:	464b      	mov	r3, r9
 80035ea:	eb45 0303 	adc.w	r3, r5, r3
 80035ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800360e:	4629      	mov	r1, r5
 8003610:	008b      	lsls	r3, r1, #2
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003618:	4621      	mov	r1, r4
 800361a:	008a      	lsls	r2, r1, #2
 800361c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003620:	f7fc fe36 	bl	8000290 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b60      	ldr	r3, [pc, #384]	; (80037ac <UART_SetConfig+0x4e4>)
 800362a:	fba3 2302 	umull	r2, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	011c      	lsls	r4, r3, #4
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800363c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	1891      	adds	r1, r2, r2
 800364a:	61b9      	str	r1, [r7, #24]
 800364c:	415b      	adcs	r3, r3
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003654:	4641      	mov	r1, r8
 8003656:	1851      	adds	r1, r2, r1
 8003658:	6139      	str	r1, [r7, #16]
 800365a:	4649      	mov	r1, r9
 800365c:	414b      	adcs	r3, r1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800366c:	4659      	mov	r1, fp
 800366e:	00cb      	lsls	r3, r1, #3
 8003670:	4651      	mov	r1, sl
 8003672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003676:	4651      	mov	r1, sl
 8003678:	00ca      	lsls	r2, r1, #3
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	4603      	mov	r3, r0
 8003680:	4642      	mov	r2, r8
 8003682:	189b      	adds	r3, r3, r2
 8003684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	67bb      	str	r3, [r7, #120]	; 0x78
 800369e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036ac:	4649      	mov	r1, r9
 80036ae:	008b      	lsls	r3, r1, #2
 80036b0:	4641      	mov	r1, r8
 80036b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b6:	4641      	mov	r1, r8
 80036b8:	008a      	lsls	r2, r1, #2
 80036ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036be:	f7fc fde7 	bl	8000290 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <UART_SetConfig+0x4e4>)
 80036c8:	fba3 1302 	umull	r1, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2164      	movs	r1, #100	; 0x64
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	3332      	adds	r3, #50	; 0x32
 80036da:	4a34      	ldr	r2, [pc, #208]	; (80037ac <UART_SetConfig+0x4e4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e6:	441c      	add	r4, r3
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	673b      	str	r3, [r7, #112]	; 0x70
 80036f0:	677a      	str	r2, [r7, #116]	; 0x74
 80036f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	415b      	adcs	r3, r3
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003706:	4641      	mov	r1, r8
 8003708:	1851      	adds	r1, r2, r1
 800370a:	6039      	str	r1, [r7, #0]
 800370c:	4649      	mov	r1, r9
 800370e:	414b      	adcs	r3, r1
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371e:	4659      	mov	r1, fp
 8003720:	00cb      	lsls	r3, r1, #3
 8003722:	4651      	mov	r1, sl
 8003724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003728:	4651      	mov	r1, sl
 800372a:	00ca      	lsls	r2, r1, #3
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	4603      	mov	r3, r0
 8003732:	4642      	mov	r2, r8
 8003734:	189b      	adds	r3, r3, r2
 8003736:	66bb      	str	r3, [r7, #104]	; 0x68
 8003738:	464b      	mov	r3, r9
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	663b      	str	r3, [r7, #96]	; 0x60
 800374c:	667a      	str	r2, [r7, #100]	; 0x64
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800375a:	4649      	mov	r1, r9
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	4641      	mov	r1, r8
 8003760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003764:	4641      	mov	r1, r8
 8003766:	008a      	lsls	r2, r1, #2
 8003768:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800376c:	f7fc fd90 	bl	8000290 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <UART_SetConfig+0x4e4>)
 8003776:	fba3 1302 	umull	r1, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2164      	movs	r1, #100	; 0x64
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <UART_SetConfig+0x4e4>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4422      	add	r2, r4
 800379c:	609a      	str	r2, [r3, #8]
}
 800379e:	bf00      	nop
 80037a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	51eb851f 	.word	0x51eb851f

080037b0 <__errno>:
 80037b0:	4b01      	ldr	r3, [pc, #4]	; (80037b8 <__errno+0x8>)
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	2000000c 	.word	0x2000000c

080037bc <__libc_init_array>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4d0d      	ldr	r5, [pc, #52]	; (80037f4 <__libc_init_array+0x38>)
 80037c0:	4c0d      	ldr	r4, [pc, #52]	; (80037f8 <__libc_init_array+0x3c>)
 80037c2:	1b64      	subs	r4, r4, r5
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	2600      	movs	r6, #0
 80037c8:	42a6      	cmp	r6, r4
 80037ca:	d109      	bne.n	80037e0 <__libc_init_array+0x24>
 80037cc:	4d0b      	ldr	r5, [pc, #44]	; (80037fc <__libc_init_array+0x40>)
 80037ce:	4c0c      	ldr	r4, [pc, #48]	; (8003800 <__libc_init_array+0x44>)
 80037d0:	f000 fcb8 	bl	8004144 <_init>
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	2600      	movs	r6, #0
 80037da:	42a6      	cmp	r6, r4
 80037dc:	d105      	bne.n	80037ea <__libc_init_array+0x2e>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e4:	4798      	blx	r3
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7ee      	b.n	80037c8 <__libc_init_array+0xc>
 80037ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ee:	4798      	blx	r3
 80037f0:	3601      	adds	r6, #1
 80037f2:	e7f2      	b.n	80037da <__libc_init_array+0x1e>
 80037f4:	080042b4 	.word	0x080042b4
 80037f8:	080042b4 	.word	0x080042b4
 80037fc:	080042b4 	.word	0x080042b4
 8003800:	080042b8 	.word	0x080042b8

08003804 <memset>:
 8003804:	4402      	add	r2, r0
 8003806:	4603      	mov	r3, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <siprintf>:
 8003814:	b40e      	push	{r1, r2, r3}
 8003816:	b500      	push	{lr}
 8003818:	b09c      	sub	sp, #112	; 0x70
 800381a:	ab1d      	add	r3, sp, #116	; 0x74
 800381c:	9002      	str	r0, [sp, #8]
 800381e:	9006      	str	r0, [sp, #24]
 8003820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003824:	4809      	ldr	r0, [pc, #36]	; (800384c <siprintf+0x38>)
 8003826:	9107      	str	r1, [sp, #28]
 8003828:	9104      	str	r1, [sp, #16]
 800382a:	4909      	ldr	r1, [pc, #36]	; (8003850 <siprintf+0x3c>)
 800382c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003830:	9105      	str	r1, [sp, #20]
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	a902      	add	r1, sp, #8
 8003838:	f000 f892 	bl	8003960 <_svfiprintf_r>
 800383c:	9b02      	ldr	r3, [sp, #8]
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	b01c      	add	sp, #112	; 0x70
 8003844:	f85d eb04 	ldr.w	lr, [sp], #4
 8003848:	b003      	add	sp, #12
 800384a:	4770      	bx	lr
 800384c:	2000000c 	.word	0x2000000c
 8003850:	ffff0208 	.word	0xffff0208

08003854 <strncmp>:
 8003854:	b510      	push	{r4, lr}
 8003856:	b17a      	cbz	r2, 8003878 <strncmp+0x24>
 8003858:	4603      	mov	r3, r0
 800385a:	3901      	subs	r1, #1
 800385c:	1884      	adds	r4, r0, r2
 800385e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003862:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003866:	4290      	cmp	r0, r2
 8003868:	d101      	bne.n	800386e <strncmp+0x1a>
 800386a:	42a3      	cmp	r3, r4
 800386c:	d101      	bne.n	8003872 <strncmp+0x1e>
 800386e:	1a80      	subs	r0, r0, r2
 8003870:	bd10      	pop	{r4, pc}
 8003872:	2800      	cmp	r0, #0
 8003874:	d1f3      	bne.n	800385e <strncmp+0xa>
 8003876:	e7fa      	b.n	800386e <strncmp+0x1a>
 8003878:	4610      	mov	r0, r2
 800387a:	e7f9      	b.n	8003870 <strncmp+0x1c>

0800387c <strstr>:
 800387c:	780a      	ldrb	r2, [r1, #0]
 800387e:	b570      	push	{r4, r5, r6, lr}
 8003880:	b96a      	cbnz	r2, 800389e <strstr+0x22>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	429a      	cmp	r2, r3
 8003886:	d109      	bne.n	800389c <strstr+0x20>
 8003888:	460c      	mov	r4, r1
 800388a:	4605      	mov	r5, r0
 800388c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f6      	beq.n	8003882 <strstr+0x6>
 8003894:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003898:	429e      	cmp	r6, r3
 800389a:	d0f7      	beq.n	800388c <strstr+0x10>
 800389c:	3001      	adds	r0, #1
 800389e:	7803      	ldrb	r3, [r0, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ef      	bne.n	8003884 <strstr+0x8>
 80038a4:	4618      	mov	r0, r3
 80038a6:	e7ec      	b.n	8003882 <strstr+0x6>

080038a8 <__ssputs_r>:
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	688e      	ldr	r6, [r1, #8]
 80038ae:	429e      	cmp	r6, r3
 80038b0:	4682      	mov	sl, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	4690      	mov	r8, r2
 80038b6:	461f      	mov	r7, r3
 80038b8:	d838      	bhi.n	800392c <__ssputs_r+0x84>
 80038ba:	898a      	ldrh	r2, [r1, #12]
 80038bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038c0:	d032      	beq.n	8003928 <__ssputs_r+0x80>
 80038c2:	6825      	ldr	r5, [r4, #0]
 80038c4:	6909      	ldr	r1, [r1, #16]
 80038c6:	eba5 0901 	sub.w	r9, r5, r1
 80038ca:	6965      	ldr	r5, [r4, #20]
 80038cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038d4:	3301      	adds	r3, #1
 80038d6:	444b      	add	r3, r9
 80038d8:	106d      	asrs	r5, r5, #1
 80038da:	429d      	cmp	r5, r3
 80038dc:	bf38      	it	cc
 80038de:	461d      	movcc	r5, r3
 80038e0:	0553      	lsls	r3, r2, #21
 80038e2:	d531      	bpl.n	8003948 <__ssputs_r+0xa0>
 80038e4:	4629      	mov	r1, r5
 80038e6:	f000 fb63 	bl	8003fb0 <_malloc_r>
 80038ea:	4606      	mov	r6, r0
 80038ec:	b950      	cbnz	r0, 8003904 <__ssputs_r+0x5c>
 80038ee:	230c      	movs	r3, #12
 80038f0:	f8ca 3000 	str.w	r3, [sl]
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	6921      	ldr	r1, [r4, #16]
 8003906:	464a      	mov	r2, r9
 8003908:	f000 fabe 	bl	8003e88 <memcpy>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003916:	81a3      	strh	r3, [r4, #12]
 8003918:	6126      	str	r6, [r4, #16]
 800391a:	6165      	str	r5, [r4, #20]
 800391c:	444e      	add	r6, r9
 800391e:	eba5 0509 	sub.w	r5, r5, r9
 8003922:	6026      	str	r6, [r4, #0]
 8003924:	60a5      	str	r5, [r4, #8]
 8003926:	463e      	mov	r6, r7
 8003928:	42be      	cmp	r6, r7
 800392a:	d900      	bls.n	800392e <__ssputs_r+0x86>
 800392c:	463e      	mov	r6, r7
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	4632      	mov	r2, r6
 8003932:	4641      	mov	r1, r8
 8003934:	f000 fab6 	bl	8003ea4 <memmove>
 8003938:	68a3      	ldr	r3, [r4, #8]
 800393a:	1b9b      	subs	r3, r3, r6
 800393c:	60a3      	str	r3, [r4, #8]
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	4433      	add	r3, r6
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	2000      	movs	r0, #0
 8003946:	e7db      	b.n	8003900 <__ssputs_r+0x58>
 8003948:	462a      	mov	r2, r5
 800394a:	f000 fba5 	bl	8004098 <_realloc_r>
 800394e:	4606      	mov	r6, r0
 8003950:	2800      	cmp	r0, #0
 8003952:	d1e1      	bne.n	8003918 <__ssputs_r+0x70>
 8003954:	6921      	ldr	r1, [r4, #16]
 8003956:	4650      	mov	r0, sl
 8003958:	f000 fabe 	bl	8003ed8 <_free_r>
 800395c:	e7c7      	b.n	80038ee <__ssputs_r+0x46>
	...

08003960 <_svfiprintf_r>:
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	4698      	mov	r8, r3
 8003966:	898b      	ldrh	r3, [r1, #12]
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	b09d      	sub	sp, #116	; 0x74
 800396c:	4607      	mov	r7, r0
 800396e:	460d      	mov	r5, r1
 8003970:	4614      	mov	r4, r2
 8003972:	d50e      	bpl.n	8003992 <_svfiprintf_r+0x32>
 8003974:	690b      	ldr	r3, [r1, #16]
 8003976:	b963      	cbnz	r3, 8003992 <_svfiprintf_r+0x32>
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	f000 fb19 	bl	8003fb0 <_malloc_r>
 800397e:	6028      	str	r0, [r5, #0]
 8003980:	6128      	str	r0, [r5, #16]
 8003982:	b920      	cbnz	r0, 800398e <_svfiprintf_r+0x2e>
 8003984:	230c      	movs	r3, #12
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e0d1      	b.n	8003b32 <_svfiprintf_r+0x1d2>
 800398e:	2340      	movs	r3, #64	; 0x40
 8003990:	616b      	str	r3, [r5, #20]
 8003992:	2300      	movs	r3, #0
 8003994:	9309      	str	r3, [sp, #36]	; 0x24
 8003996:	2320      	movs	r3, #32
 8003998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800399c:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a0:	2330      	movs	r3, #48	; 0x30
 80039a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b4c <_svfiprintf_r+0x1ec>
 80039a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039aa:	f04f 0901 	mov.w	r9, #1
 80039ae:	4623      	mov	r3, r4
 80039b0:	469a      	mov	sl, r3
 80039b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b6:	b10a      	cbz	r2, 80039bc <_svfiprintf_r+0x5c>
 80039b8:	2a25      	cmp	r2, #37	; 0x25
 80039ba:	d1f9      	bne.n	80039b0 <_svfiprintf_r+0x50>
 80039bc:	ebba 0b04 	subs.w	fp, sl, r4
 80039c0:	d00b      	beq.n	80039da <_svfiprintf_r+0x7a>
 80039c2:	465b      	mov	r3, fp
 80039c4:	4622      	mov	r2, r4
 80039c6:	4629      	mov	r1, r5
 80039c8:	4638      	mov	r0, r7
 80039ca:	f7ff ff6d 	bl	80038a8 <__ssputs_r>
 80039ce:	3001      	adds	r0, #1
 80039d0:	f000 80aa 	beq.w	8003b28 <_svfiprintf_r+0x1c8>
 80039d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039d6:	445a      	add	r2, fp
 80039d8:	9209      	str	r2, [sp, #36]	; 0x24
 80039da:	f89a 3000 	ldrb.w	r3, [sl]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80a2 	beq.w	8003b28 <_svfiprintf_r+0x1c8>
 80039e4:	2300      	movs	r3, #0
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ee:	f10a 0a01 	add.w	sl, sl, #1
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	9307      	str	r3, [sp, #28]
 80039f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039fa:	931a      	str	r3, [sp, #104]	; 0x68
 80039fc:	4654      	mov	r4, sl
 80039fe:	2205      	movs	r2, #5
 8003a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a04:	4851      	ldr	r0, [pc, #324]	; (8003b4c <_svfiprintf_r+0x1ec>)
 8003a06:	f7fc fbf3 	bl	80001f0 <memchr>
 8003a0a:	9a04      	ldr	r2, [sp, #16]
 8003a0c:	b9d8      	cbnz	r0, 8003a46 <_svfiprintf_r+0xe6>
 8003a0e:	06d0      	lsls	r0, r2, #27
 8003a10:	bf44      	itt	mi
 8003a12:	2320      	movmi	r3, #32
 8003a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a18:	0711      	lsls	r1, r2, #28
 8003a1a:	bf44      	itt	mi
 8003a1c:	232b      	movmi	r3, #43	; 0x2b
 8003a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a22:	f89a 3000 	ldrb.w	r3, [sl]
 8003a26:	2b2a      	cmp	r3, #42	; 0x2a
 8003a28:	d015      	beq.n	8003a56 <_svfiprintf_r+0xf6>
 8003a2a:	9a07      	ldr	r2, [sp, #28]
 8003a2c:	4654      	mov	r4, sl
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f04f 0c0a 	mov.w	ip, #10
 8003a34:	4621      	mov	r1, r4
 8003a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a3a:	3b30      	subs	r3, #48	; 0x30
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d94e      	bls.n	8003ade <_svfiprintf_r+0x17e>
 8003a40:	b1b0      	cbz	r0, 8003a70 <_svfiprintf_r+0x110>
 8003a42:	9207      	str	r2, [sp, #28]
 8003a44:	e014      	b.n	8003a70 <_svfiprintf_r+0x110>
 8003a46:	eba0 0308 	sub.w	r3, r0, r8
 8003a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	9304      	str	r3, [sp, #16]
 8003a52:	46a2      	mov	sl, r4
 8003a54:	e7d2      	b.n	80039fc <_svfiprintf_r+0x9c>
 8003a56:	9b03      	ldr	r3, [sp, #12]
 8003a58:	1d19      	adds	r1, r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	9103      	str	r1, [sp, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfbb      	ittet	lt
 8003a62:	425b      	neglt	r3, r3
 8003a64:	f042 0202 	orrlt.w	r2, r2, #2
 8003a68:	9307      	strge	r3, [sp, #28]
 8003a6a:	9307      	strlt	r3, [sp, #28]
 8003a6c:	bfb8      	it	lt
 8003a6e:	9204      	strlt	r2, [sp, #16]
 8003a70:	7823      	ldrb	r3, [r4, #0]
 8003a72:	2b2e      	cmp	r3, #46	; 0x2e
 8003a74:	d10c      	bne.n	8003a90 <_svfiprintf_r+0x130>
 8003a76:	7863      	ldrb	r3, [r4, #1]
 8003a78:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7a:	d135      	bne.n	8003ae8 <_svfiprintf_r+0x188>
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	1d1a      	adds	r2, r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	9203      	str	r2, [sp, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a8c:	3402      	adds	r4, #2
 8003a8e:	9305      	str	r3, [sp, #20]
 8003a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b5c <_svfiprintf_r+0x1fc>
 8003a94:	7821      	ldrb	r1, [r4, #0]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4650      	mov	r0, sl
 8003a9a:	f7fc fba9 	bl	80001f0 <memchr>
 8003a9e:	b140      	cbz	r0, 8003ab2 <_svfiprintf_r+0x152>
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	eba0 000a 	sub.w	r0, r0, sl
 8003aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aaa:	9b04      	ldr	r3, [sp, #16]
 8003aac:	4303      	orrs	r3, r0
 8003aae:	3401      	adds	r4, #1
 8003ab0:	9304      	str	r3, [sp, #16]
 8003ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab6:	4826      	ldr	r0, [pc, #152]	; (8003b50 <_svfiprintf_r+0x1f0>)
 8003ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003abc:	2206      	movs	r2, #6
 8003abe:	f7fc fb97 	bl	80001f0 <memchr>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d038      	beq.n	8003b38 <_svfiprintf_r+0x1d8>
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <_svfiprintf_r+0x1f4>)
 8003ac8:	bb1b      	cbnz	r3, 8003b12 <_svfiprintf_r+0x1b2>
 8003aca:	9b03      	ldr	r3, [sp, #12]
 8003acc:	3307      	adds	r3, #7
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	9303      	str	r3, [sp, #12]
 8003ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad8:	4433      	add	r3, r6
 8003ada:	9309      	str	r3, [sp, #36]	; 0x24
 8003adc:	e767      	b.n	80039ae <_svfiprintf_r+0x4e>
 8003ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	e7a5      	b.n	8003a34 <_svfiprintf_r+0xd4>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	3401      	adds	r4, #1
 8003aec:	9305      	str	r3, [sp, #20]
 8003aee:	4619      	mov	r1, r3
 8003af0:	f04f 0c0a 	mov.w	ip, #10
 8003af4:	4620      	mov	r0, r4
 8003af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003afa:	3a30      	subs	r2, #48	; 0x30
 8003afc:	2a09      	cmp	r2, #9
 8003afe:	d903      	bls.n	8003b08 <_svfiprintf_r+0x1a8>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0c5      	beq.n	8003a90 <_svfiprintf_r+0x130>
 8003b04:	9105      	str	r1, [sp, #20]
 8003b06:	e7c3      	b.n	8003a90 <_svfiprintf_r+0x130>
 8003b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e7f0      	b.n	8003af4 <_svfiprintf_r+0x194>
 8003b12:	ab03      	add	r3, sp, #12
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	462a      	mov	r2, r5
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <_svfiprintf_r+0x1f8>)
 8003b1a:	a904      	add	r1, sp, #16
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f3af 8000 	nop.w
 8003b22:	1c42      	adds	r2, r0, #1
 8003b24:	4606      	mov	r6, r0
 8003b26:	d1d6      	bne.n	8003ad6 <_svfiprintf_r+0x176>
 8003b28:	89ab      	ldrh	r3, [r5, #12]
 8003b2a:	065b      	lsls	r3, r3, #25
 8003b2c:	f53f af2c 	bmi.w	8003988 <_svfiprintf_r+0x28>
 8003b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b32:	b01d      	add	sp, #116	; 0x74
 8003b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b38:	ab03      	add	r3, sp, #12
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	462a      	mov	r2, r5
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <_svfiprintf_r+0x1f8>)
 8003b40:	a904      	add	r1, sp, #16
 8003b42:	4638      	mov	r0, r7
 8003b44:	f000 f87a 	bl	8003c3c <_printf_i>
 8003b48:	e7eb      	b.n	8003b22 <_svfiprintf_r+0x1c2>
 8003b4a:	bf00      	nop
 8003b4c:	08004278 	.word	0x08004278
 8003b50:	08004282 	.word	0x08004282
 8003b54:	00000000 	.word	0x00000000
 8003b58:	080038a9 	.word	0x080038a9
 8003b5c:	0800427e 	.word	0x0800427e

08003b60 <_printf_common>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	4616      	mov	r6, r2
 8003b66:	4699      	mov	r9, r3
 8003b68:	688a      	ldr	r2, [r1, #8]
 8003b6a:	690b      	ldr	r3, [r1, #16]
 8003b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b70:	4293      	cmp	r3, r2
 8003b72:	bfb8      	it	lt
 8003b74:	4613      	movlt	r3, r2
 8003b76:	6033      	str	r3, [r6, #0]
 8003b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	b10a      	cbz	r2, 8003b86 <_printf_common+0x26>
 8003b82:	3301      	adds	r3, #1
 8003b84:	6033      	str	r3, [r6, #0]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	0699      	lsls	r1, r3, #26
 8003b8a:	bf42      	ittt	mi
 8003b8c:	6833      	ldrmi	r3, [r6, #0]
 8003b8e:	3302      	addmi	r3, #2
 8003b90:	6033      	strmi	r3, [r6, #0]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	f015 0506 	ands.w	r5, r5, #6
 8003b98:	d106      	bne.n	8003ba8 <_printf_common+0x48>
 8003b9a:	f104 0a19 	add.w	sl, r4, #25
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	6832      	ldr	r2, [r6, #0]
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	42ab      	cmp	r3, r5
 8003ba6:	dc26      	bgt.n	8003bf6 <_printf_common+0x96>
 8003ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bac:	1e13      	subs	r3, r2, #0
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	bf18      	it	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	0692      	lsls	r2, r2, #26
 8003bb6:	d42b      	bmi.n	8003c10 <_printf_common+0xb0>
 8003bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	47c0      	blx	r8
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d01e      	beq.n	8003c04 <_printf_common+0xa4>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	68e5      	ldr	r5, [r4, #12]
 8003bca:	6832      	ldr	r2, [r6, #0]
 8003bcc:	f003 0306 	and.w	r3, r3, #6
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	bf08      	it	eq
 8003bd4:	1aad      	subeq	r5, r5, r2
 8003bd6:	68a3      	ldr	r3, [r4, #8]
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	bf0c      	ite	eq
 8003bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be0:	2500      	movne	r5, #0
 8003be2:	4293      	cmp	r3, r2
 8003be4:	bfc4      	itt	gt
 8003be6:	1a9b      	subgt	r3, r3, r2
 8003be8:	18ed      	addgt	r5, r5, r3
 8003bea:	2600      	movs	r6, #0
 8003bec:	341a      	adds	r4, #26
 8003bee:	42b5      	cmp	r5, r6
 8003bf0:	d11a      	bne.n	8003c28 <_printf_common+0xc8>
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	e008      	b.n	8003c08 <_printf_common+0xa8>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4652      	mov	r2, sl
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	47c0      	blx	r8
 8003c00:	3001      	adds	r0, #1
 8003c02:	d103      	bne.n	8003c0c <_printf_common+0xac>
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0c:	3501      	adds	r5, #1
 8003c0e:	e7c6      	b.n	8003b9e <_printf_common+0x3e>
 8003c10:	18e1      	adds	r1, r4, r3
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	2030      	movs	r0, #48	; 0x30
 8003c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c1a:	4422      	add	r2, r4
 8003c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c24:	3302      	adds	r3, #2
 8003c26:	e7c7      	b.n	8003bb8 <_printf_common+0x58>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	4638      	mov	r0, r7
 8003c30:	47c0      	blx	r8
 8003c32:	3001      	adds	r0, #1
 8003c34:	d0e6      	beq.n	8003c04 <_printf_common+0xa4>
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7d9      	b.n	8003bee <_printf_common+0x8e>
	...

08003c3c <_printf_i>:
 8003c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	7e0f      	ldrb	r7, [r1, #24]
 8003c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c44:	2f78      	cmp	r7, #120	; 0x78
 8003c46:	4691      	mov	r9, r2
 8003c48:	4680      	mov	r8, r0
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	469a      	mov	sl, r3
 8003c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c52:	d807      	bhi.n	8003c64 <_printf_i+0x28>
 8003c54:	2f62      	cmp	r7, #98	; 0x62
 8003c56:	d80a      	bhi.n	8003c6e <_printf_i+0x32>
 8003c58:	2f00      	cmp	r7, #0
 8003c5a:	f000 80d8 	beq.w	8003e0e <_printf_i+0x1d2>
 8003c5e:	2f58      	cmp	r7, #88	; 0x58
 8003c60:	f000 80a3 	beq.w	8003daa <_printf_i+0x16e>
 8003c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c6c:	e03a      	b.n	8003ce4 <_printf_i+0xa8>
 8003c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c72:	2b15      	cmp	r3, #21
 8003c74:	d8f6      	bhi.n	8003c64 <_printf_i+0x28>
 8003c76:	a101      	add	r1, pc, #4	; (adr r1, 8003c7c <_printf_i+0x40>)
 8003c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c7c:	08003cd5 	.word	0x08003cd5
 8003c80:	08003ce9 	.word	0x08003ce9
 8003c84:	08003c65 	.word	0x08003c65
 8003c88:	08003c65 	.word	0x08003c65
 8003c8c:	08003c65 	.word	0x08003c65
 8003c90:	08003c65 	.word	0x08003c65
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003c65 	.word	0x08003c65
 8003c9c:	08003c65 	.word	0x08003c65
 8003ca0:	08003c65 	.word	0x08003c65
 8003ca4:	08003c65 	.word	0x08003c65
 8003ca8:	08003df5 	.word	0x08003df5
 8003cac:	08003d19 	.word	0x08003d19
 8003cb0:	08003dd7 	.word	0x08003dd7
 8003cb4:	08003c65 	.word	0x08003c65
 8003cb8:	08003c65 	.word	0x08003c65
 8003cbc:	08003e17 	.word	0x08003e17
 8003cc0:	08003c65 	.word	0x08003c65
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003c65 	.word	0x08003c65
 8003ccc:	08003c65 	.word	0x08003c65
 8003cd0:	08003ddf 	.word	0x08003ddf
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	1d1a      	adds	r2, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	602a      	str	r2, [r5, #0]
 8003cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0a3      	b.n	8003e30 <_printf_i+0x1f4>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	6829      	ldr	r1, [r5, #0]
 8003cec:	0606      	lsls	r6, r0, #24
 8003cee:	f101 0304 	add.w	r3, r1, #4
 8003cf2:	d50a      	bpl.n	8003d0a <_printf_i+0xce>
 8003cf4:	680e      	ldr	r6, [r1, #0]
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	2e00      	cmp	r6, #0
 8003cfa:	da03      	bge.n	8003d04 <_printf_i+0xc8>
 8003cfc:	232d      	movs	r3, #45	; 0x2d
 8003cfe:	4276      	negs	r6, r6
 8003d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d04:	485e      	ldr	r0, [pc, #376]	; (8003e80 <_printf_i+0x244>)
 8003d06:	230a      	movs	r3, #10
 8003d08:	e019      	b.n	8003d3e <_printf_i+0x102>
 8003d0a:	680e      	ldr	r6, [r1, #0]
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d12:	bf18      	it	ne
 8003d14:	b236      	sxthne	r6, r6
 8003d16:	e7ef      	b.n	8003cf8 <_printf_i+0xbc>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	1d19      	adds	r1, r3, #4
 8003d1e:	6029      	str	r1, [r5, #0]
 8003d20:	0601      	lsls	r1, r0, #24
 8003d22:	d501      	bpl.n	8003d28 <_printf_i+0xec>
 8003d24:	681e      	ldr	r6, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <_printf_i+0xf2>
 8003d28:	0646      	lsls	r6, r0, #25
 8003d2a:	d5fb      	bpl.n	8003d24 <_printf_i+0xe8>
 8003d2c:	881e      	ldrh	r6, [r3, #0]
 8003d2e:	4854      	ldr	r0, [pc, #336]	; (8003e80 <_printf_i+0x244>)
 8003d30:	2f6f      	cmp	r7, #111	; 0x6f
 8003d32:	bf0c      	ite	eq
 8003d34:	2308      	moveq	r3, #8
 8003d36:	230a      	movne	r3, #10
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d3e:	6865      	ldr	r5, [r4, #4]
 8003d40:	60a5      	str	r5, [r4, #8]
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	bfa2      	ittt	ge
 8003d46:	6821      	ldrge	r1, [r4, #0]
 8003d48:	f021 0104 	bicge.w	r1, r1, #4
 8003d4c:	6021      	strge	r1, [r4, #0]
 8003d4e:	b90e      	cbnz	r6, 8003d54 <_printf_i+0x118>
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	d04d      	beq.n	8003df0 <_printf_i+0x1b4>
 8003d54:	4615      	mov	r5, r2
 8003d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d5e:	5dc7      	ldrb	r7, [r0, r7]
 8003d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d64:	4637      	mov	r7, r6
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	460e      	mov	r6, r1
 8003d6a:	d9f4      	bls.n	8003d56 <_printf_i+0x11a>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <_printf_i+0x14c>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	07de      	lsls	r6, r3, #31
 8003d74:	d508      	bpl.n	8003d88 <_printf_i+0x14c>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	bfde      	ittt	le
 8003d7e:	2330      	movle	r3, #48	; 0x30
 8003d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d88:	1b52      	subs	r2, r2, r5
 8003d8a:	6122      	str	r2, [r4, #16]
 8003d8c:	f8cd a000 	str.w	sl, [sp]
 8003d90:	464b      	mov	r3, r9
 8003d92:	aa03      	add	r2, sp, #12
 8003d94:	4621      	mov	r1, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	f7ff fee2 	bl	8003b60 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d14c      	bne.n	8003e3a <_printf_i+0x1fe>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	b004      	add	sp, #16
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	4835      	ldr	r0, [pc, #212]	; (8003e80 <_printf_i+0x244>)
 8003dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003db0:	6829      	ldr	r1, [r5, #0]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003db8:	6029      	str	r1, [r5, #0]
 8003dba:	061d      	lsls	r5, r3, #24
 8003dbc:	d514      	bpl.n	8003de8 <_printf_i+0x1ac>
 8003dbe:	07df      	lsls	r7, r3, #31
 8003dc0:	bf44      	itt	mi
 8003dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8003dc6:	6023      	strmi	r3, [r4, #0]
 8003dc8:	b91e      	cbnz	r6, 8003dd2 <_printf_i+0x196>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f023 0320 	bic.w	r3, r3, #32
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	e7b0      	b.n	8003d38 <_printf_i+0xfc>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f043 0320 	orr.w	r3, r3, #32
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	2378      	movs	r3, #120	; 0x78
 8003de0:	4828      	ldr	r0, [pc, #160]	; (8003e84 <_printf_i+0x248>)
 8003de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003de6:	e7e3      	b.n	8003db0 <_printf_i+0x174>
 8003de8:	0659      	lsls	r1, r3, #25
 8003dea:	bf48      	it	mi
 8003dec:	b2b6      	uxthmi	r6, r6
 8003dee:	e7e6      	b.n	8003dbe <_printf_i+0x182>
 8003df0:	4615      	mov	r5, r2
 8003df2:	e7bb      	b.n	8003d6c <_printf_i+0x130>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	6826      	ldr	r6, [r4, #0]
 8003df8:	6961      	ldr	r1, [r4, #20]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	6028      	str	r0, [r5, #0]
 8003dfe:	0635      	lsls	r5, r6, #24
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	d501      	bpl.n	8003e08 <_printf_i+0x1cc>
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	e002      	b.n	8003e0e <_printf_i+0x1d2>
 8003e08:	0670      	lsls	r0, r6, #25
 8003e0a:	d5fb      	bpl.n	8003e04 <_printf_i+0x1c8>
 8003e0c:	8019      	strh	r1, [r3, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	4615      	mov	r5, r2
 8003e14:	e7ba      	b.n	8003d8c <_printf_i+0x150>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	602a      	str	r2, [r5, #0]
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	2100      	movs	r1, #0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f7fc f9e4 	bl	80001f0 <memchr>
 8003e28:	b108      	cbz	r0, 8003e2e <_printf_i+0x1f2>
 8003e2a:	1b40      	subs	r0, r0, r5
 8003e2c:	6060      	str	r0, [r4, #4]
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	6123      	str	r3, [r4, #16]
 8003e32:	2300      	movs	r3, #0
 8003e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e38:	e7a8      	b.n	8003d8c <_printf_i+0x150>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	462a      	mov	r2, r5
 8003e3e:	4649      	mov	r1, r9
 8003e40:	4640      	mov	r0, r8
 8003e42:	47d0      	blx	sl
 8003e44:	3001      	adds	r0, #1
 8003e46:	d0ab      	beq.n	8003da0 <_printf_i+0x164>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	079b      	lsls	r3, r3, #30
 8003e4c:	d413      	bmi.n	8003e76 <_printf_i+0x23a>
 8003e4e:	68e0      	ldr	r0, [r4, #12]
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	4298      	cmp	r0, r3
 8003e54:	bfb8      	it	lt
 8003e56:	4618      	movlt	r0, r3
 8003e58:	e7a4      	b.n	8003da4 <_printf_i+0x168>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4640      	mov	r0, r8
 8003e62:	47d0      	blx	sl
 8003e64:	3001      	adds	r0, #1
 8003e66:	d09b      	beq.n	8003da0 <_printf_i+0x164>
 8003e68:	3501      	adds	r5, #1
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	9903      	ldr	r1, [sp, #12]
 8003e6e:	1a5b      	subs	r3, r3, r1
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	dcf2      	bgt.n	8003e5a <_printf_i+0x21e>
 8003e74:	e7eb      	b.n	8003e4e <_printf_i+0x212>
 8003e76:	2500      	movs	r5, #0
 8003e78:	f104 0619 	add.w	r6, r4, #25
 8003e7c:	e7f5      	b.n	8003e6a <_printf_i+0x22e>
 8003e7e:	bf00      	nop
 8003e80:	08004289 	.word	0x08004289
 8003e84:	0800429a 	.word	0x0800429a

08003e88 <memcpy>:
 8003e88:	440a      	add	r2, r1
 8003e8a:	4291      	cmp	r1, r2
 8003e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e90:	d100      	bne.n	8003e94 <memcpy+0xc>
 8003e92:	4770      	bx	lr
 8003e94:	b510      	push	{r4, lr}
 8003e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e9e:	4291      	cmp	r1, r2
 8003ea0:	d1f9      	bne.n	8003e96 <memcpy+0xe>
 8003ea2:	bd10      	pop	{r4, pc}

08003ea4 <memmove>:
 8003ea4:	4288      	cmp	r0, r1
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	eb01 0402 	add.w	r4, r1, r2
 8003eac:	d902      	bls.n	8003eb4 <memmove+0x10>
 8003eae:	4284      	cmp	r4, r0
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	d807      	bhi.n	8003ec4 <memmove+0x20>
 8003eb4:	1e43      	subs	r3, r0, #1
 8003eb6:	42a1      	cmp	r1, r4
 8003eb8:	d008      	beq.n	8003ecc <memmove+0x28>
 8003eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ec2:	e7f8      	b.n	8003eb6 <memmove+0x12>
 8003ec4:	4402      	add	r2, r0
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	d100      	bne.n	8003ece <memmove+0x2a>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ed6:	e7f7      	b.n	8003ec8 <memmove+0x24>

08003ed8 <_free_r>:
 8003ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d044      	beq.n	8003f68 <_free_r+0x90>
 8003ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee2:	9001      	str	r0, [sp, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8003eea:	bfb8      	it	lt
 8003eec:	18e4      	addlt	r4, r4, r3
 8003eee:	f000 f913 	bl	8004118 <__malloc_lock>
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <_free_r+0x94>)
 8003ef4:	9801      	ldr	r0, [sp, #4]
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	b933      	cbnz	r3, 8003f08 <_free_r+0x30>
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	6014      	str	r4, [r2, #0]
 8003efe:	b003      	add	sp, #12
 8003f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f04:	f000 b90e 	b.w	8004124 <__malloc_unlock>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d908      	bls.n	8003f1e <_free_r+0x46>
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	1961      	adds	r1, r4, r5
 8003f10:	428b      	cmp	r3, r1
 8003f12:	bf01      	itttt	eq
 8003f14:	6819      	ldreq	r1, [r3, #0]
 8003f16:	685b      	ldreq	r3, [r3, #4]
 8003f18:	1949      	addeq	r1, r1, r5
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	e7ed      	b.n	8003efa <_free_r+0x22>
 8003f1e:	461a      	mov	r2, r3
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b10b      	cbz	r3, 8003f28 <_free_r+0x50>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x46>
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	1855      	adds	r5, r2, r1
 8003f2c:	42a5      	cmp	r5, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x70>
 8003f30:	6824      	ldr	r4, [r4, #0]
 8003f32:	4421      	add	r1, r4
 8003f34:	1854      	adds	r4, r2, r1
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	d1e0      	bne.n	8003efe <_free_r+0x26>
 8003f3c:	681c      	ldr	r4, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	6053      	str	r3, [r2, #4]
 8003f42:	4421      	add	r1, r4
 8003f44:	6011      	str	r1, [r2, #0]
 8003f46:	e7da      	b.n	8003efe <_free_r+0x26>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x78>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	6003      	str	r3, [r0, #0]
 8003f4e:	e7d6      	b.n	8003efe <_free_r+0x26>
 8003f50:	6825      	ldr	r5, [r4, #0]
 8003f52:	1961      	adds	r1, r4, r5
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf04      	itt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	6063      	str	r3, [r4, #4]
 8003f5e:	bf04      	itt	eq
 8003f60:	1949      	addeq	r1, r1, r5
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	6054      	str	r4, [r2, #4]
 8003f66:	e7ca      	b.n	8003efe <_free_r+0x26>
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd30      	pop	{r4, r5, pc}
 8003f6c:	20000538 	.word	0x20000538

08003f70 <sbrk_aligned>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4e0e      	ldr	r6, [pc, #56]	; (8003fac <sbrk_aligned+0x3c>)
 8003f74:	460c      	mov	r4, r1
 8003f76:	6831      	ldr	r1, [r6, #0]
 8003f78:	4605      	mov	r5, r0
 8003f7a:	b911      	cbnz	r1, 8003f82 <sbrk_aligned+0x12>
 8003f7c:	f000 f8bc 	bl	80040f8 <_sbrk_r>
 8003f80:	6030      	str	r0, [r6, #0]
 8003f82:	4621      	mov	r1, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 f8b7 	bl	80040f8 <_sbrk_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d00a      	beq.n	8003fa4 <sbrk_aligned+0x34>
 8003f8e:	1cc4      	adds	r4, r0, #3
 8003f90:	f024 0403 	bic.w	r4, r4, #3
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d007      	beq.n	8003fa8 <sbrk_aligned+0x38>
 8003f98:	1a21      	subs	r1, r4, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f8ac 	bl	80040f8 <_sbrk_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d101      	bne.n	8003fa8 <sbrk_aligned+0x38>
 8003fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fa8:	4620      	mov	r0, r4
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	2000053c 	.word	0x2000053c

08003fb0 <_malloc_r>:
 8003fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb4:	1ccd      	adds	r5, r1, #3
 8003fb6:	f025 0503 	bic.w	r5, r5, #3
 8003fba:	3508      	adds	r5, #8
 8003fbc:	2d0c      	cmp	r5, #12
 8003fbe:	bf38      	it	cc
 8003fc0:	250c      	movcc	r5, #12
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	db01      	blt.n	8003fcc <_malloc_r+0x1c>
 8003fc8:	42a9      	cmp	r1, r5
 8003fca:	d905      	bls.n	8003fd8 <_malloc_r+0x28>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd8:	4e2e      	ldr	r6, [pc, #184]	; (8004094 <_malloc_r+0xe4>)
 8003fda:	f000 f89d 	bl	8004118 <__malloc_lock>
 8003fde:	6833      	ldr	r3, [r6, #0]
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	bb34      	cbnz	r4, 8004032 <_malloc_r+0x82>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f7ff ffc2 	bl	8003f70 <sbrk_aligned>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	4604      	mov	r4, r0
 8003ff0:	d14d      	bne.n	800408e <_malloc_r+0xde>
 8003ff2:	6834      	ldr	r4, [r6, #0]
 8003ff4:	4626      	mov	r6, r4
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	d140      	bne.n	800407c <_malloc_r+0xcc>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4638      	mov	r0, r7
 8004000:	eb04 0803 	add.w	r8, r4, r3
 8004004:	f000 f878 	bl	80040f8 <_sbrk_r>
 8004008:	4580      	cmp	r8, r0
 800400a:	d13a      	bne.n	8004082 <_malloc_r+0xd2>
 800400c:	6821      	ldr	r1, [r4, #0]
 800400e:	3503      	adds	r5, #3
 8004010:	1a6d      	subs	r5, r5, r1
 8004012:	f025 0503 	bic.w	r5, r5, #3
 8004016:	3508      	adds	r5, #8
 8004018:	2d0c      	cmp	r5, #12
 800401a:	bf38      	it	cc
 800401c:	250c      	movcc	r5, #12
 800401e:	4629      	mov	r1, r5
 8004020:	4638      	mov	r0, r7
 8004022:	f7ff ffa5 	bl	8003f70 <sbrk_aligned>
 8004026:	3001      	adds	r0, #1
 8004028:	d02b      	beq.n	8004082 <_malloc_r+0xd2>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	442b      	add	r3, r5
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	e00e      	b.n	8004050 <_malloc_r+0xa0>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	1b52      	subs	r2, r2, r5
 8004036:	d41e      	bmi.n	8004076 <_malloc_r+0xc6>
 8004038:	2a0b      	cmp	r2, #11
 800403a:	d916      	bls.n	800406a <_malloc_r+0xba>
 800403c:	1961      	adds	r1, r4, r5
 800403e:	42a3      	cmp	r3, r4
 8004040:	6025      	str	r5, [r4, #0]
 8004042:	bf18      	it	ne
 8004044:	6059      	strne	r1, [r3, #4]
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	bf08      	it	eq
 800404a:	6031      	streq	r1, [r6, #0]
 800404c:	5162      	str	r2, [r4, r5]
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	4638      	mov	r0, r7
 8004052:	f104 060b 	add.w	r6, r4, #11
 8004056:	f000 f865 	bl	8004124 <__malloc_unlock>
 800405a:	f026 0607 	bic.w	r6, r6, #7
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	1af2      	subs	r2, r6, r3
 8004062:	d0b6      	beq.n	8003fd2 <_malloc_r+0x22>
 8004064:	1b9b      	subs	r3, r3, r6
 8004066:	50a3      	str	r3, [r4, r2]
 8004068:	e7b3      	b.n	8003fd2 <_malloc_r+0x22>
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	42a3      	cmp	r3, r4
 800406e:	bf0c      	ite	eq
 8004070:	6032      	streq	r2, [r6, #0]
 8004072:	605a      	strne	r2, [r3, #4]
 8004074:	e7ec      	b.n	8004050 <_malloc_r+0xa0>
 8004076:	4623      	mov	r3, r4
 8004078:	6864      	ldr	r4, [r4, #4]
 800407a:	e7b2      	b.n	8003fe2 <_malloc_r+0x32>
 800407c:	4634      	mov	r4, r6
 800407e:	6876      	ldr	r6, [r6, #4]
 8004080:	e7b9      	b.n	8003ff6 <_malloc_r+0x46>
 8004082:	230c      	movs	r3, #12
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4638      	mov	r0, r7
 8004088:	f000 f84c 	bl	8004124 <__malloc_unlock>
 800408c:	e7a1      	b.n	8003fd2 <_malloc_r+0x22>
 800408e:	6025      	str	r5, [r4, #0]
 8004090:	e7de      	b.n	8004050 <_malloc_r+0xa0>
 8004092:	bf00      	nop
 8004094:	20000538 	.word	0x20000538

08004098 <_realloc_r>:
 8004098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	4680      	mov	r8, r0
 800409e:	4614      	mov	r4, r2
 80040a0:	460e      	mov	r6, r1
 80040a2:	b921      	cbnz	r1, 80040ae <_realloc_r+0x16>
 80040a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a8:	4611      	mov	r1, r2
 80040aa:	f7ff bf81 	b.w	8003fb0 <_malloc_r>
 80040ae:	b92a      	cbnz	r2, 80040bc <_realloc_r+0x24>
 80040b0:	f7ff ff12 	bl	8003ed8 <_free_r>
 80040b4:	4625      	mov	r5, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040bc:	f000 f838 	bl	8004130 <_malloc_usable_size_r>
 80040c0:	4284      	cmp	r4, r0
 80040c2:	4607      	mov	r7, r0
 80040c4:	d802      	bhi.n	80040cc <_realloc_r+0x34>
 80040c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ca:	d812      	bhi.n	80040f2 <_realloc_r+0x5a>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7ff ff6e 	bl	8003fb0 <_malloc_r>
 80040d4:	4605      	mov	r5, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d0ed      	beq.n	80040b6 <_realloc_r+0x1e>
 80040da:	42bc      	cmp	r4, r7
 80040dc:	4622      	mov	r2, r4
 80040de:	4631      	mov	r1, r6
 80040e0:	bf28      	it	cs
 80040e2:	463a      	movcs	r2, r7
 80040e4:	f7ff fed0 	bl	8003e88 <memcpy>
 80040e8:	4631      	mov	r1, r6
 80040ea:	4640      	mov	r0, r8
 80040ec:	f7ff fef4 	bl	8003ed8 <_free_r>
 80040f0:	e7e1      	b.n	80040b6 <_realloc_r+0x1e>
 80040f2:	4635      	mov	r5, r6
 80040f4:	e7df      	b.n	80040b6 <_realloc_r+0x1e>
	...

080040f8 <_sbrk_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d06      	ldr	r5, [pc, #24]	; (8004114 <_sbrk_r+0x1c>)
 80040fc:	2300      	movs	r3, #0
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	f7fc fcf4 	bl	8000af0 <_sbrk>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_sbrk_r+0x1a>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_sbrk_r+0x1a>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000540 	.word	0x20000540

08004118 <__malloc_lock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_lock+0x8>)
 800411a:	f000 b811 	b.w	8004140 <__retarget_lock_acquire_recursive>
 800411e:	bf00      	nop
 8004120:	20000544 	.word	0x20000544

08004124 <__malloc_unlock>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__malloc_unlock+0x8>)
 8004126:	f000 b80c 	b.w	8004142 <__retarget_lock_release_recursive>
 800412a:	bf00      	nop
 800412c:	20000544 	.word	0x20000544

08004130 <_malloc_usable_size_r>:
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f18      	subs	r0, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfbc      	itt	lt
 800413a:	580b      	ldrlt	r3, [r1, r0]
 800413c:	18c0      	addlt	r0, r0, r3
 800413e:	4770      	bx	lr

08004140 <__retarget_lock_acquire_recursive>:
 8004140:	4770      	bx	lr

08004142 <__retarget_lock_release_recursive>:
 8004142:	4770      	bx	lr

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
